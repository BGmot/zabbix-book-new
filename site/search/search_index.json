{"config":{"lang":["fr","de","it","nl","pt","es","th","zh","ru","en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>This book is born from a simple desire: to give back. After years of working with Zabbix, and authoring previous many other publications about the platform, Patrik and Nathan felt a strong pull to share their knowledge in a way that was accessible to everyone. That's how the initial idea of a free, online Zabbix resource was conceived \u2013 a community-driven project dedicated to empowering users.</p> <p>As the online resource grew, so did the vision. We recognized the potential to create something even more impactful. This led to the formation of a foundation, dedicated to ensuring the long-term sustainability and growth of this community effort. This book, a tangible culmination of that vision, represents the next step. All profits generated from its sales will be reinvested back into the community, enabling us to further expand and enhance the resources and support we offer. This is more than just a book; it's a testament to the power of shared knowledge and a commitment to fostering a thriving Zabbix community.\"</p>"},{"location":"#license","title":"License","text":"<p>Please note: The english version is the primary source document. Translations are provided for convenience, but this version is considered the most accurate.</p> <p>Please before you start take a look at our most updated license : License on Github.</p> <p>The Zabbix Book is a freely accessible resource designed to help users understand and master Zabbix. Contributions are highly encouraged to improve and expand its content. However, the book is distributed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 (CC BY-NC-SA 4.0) license, meaning it is free for non-commercial use only.</p> <p>Contributors should be aware that:</p> <ul> <li>By contributing to this work, you irrevocably assign and transfer all rights, title, and interest in your contributions to The Monitoring Penmasters Foundation, including any associated intellectual property rights, to the fullest extent permitted by law.</li> <li>The Monitoring Penmasters Foundation reserves the right to use, reproduce, modify, distribute, and commercially exploit any contributed material in any form, including but not limited to the publication of physical and digital books.</li> <li>All contributors must sign a Deed of Transfer of Intellectual Property Rights before making any contributions, ensuring the proper transfer of rights and handling of the content by The Monitoring Penmasters Foundation. Any contributions without a signed Deed of Transfer of Intellectual Property Rights cannot be accepted.</li> <li>All profits generated will be used by The Monitoring Penmasters Foundation to cover operational expenses and to sponsor other open-source projects, as determined by the foundation.</li> </ul> <p>Your contributions are invaluable and will help make The Zabbix Book an even greater resource for the entire community!</p> <p>Shield: </p> <p>Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.</p> <p></p>"},{"location":"Guidelines/","title":"Guidelines","text":""},{"location":"Guidelines/#how-to-contribute","title":"How to contribute","text":"<ul> <li>Sign the deed of transfer preferable electronically</li> <li>Clone this project to your Github account</li> <li> <p>Clone the repository to you pc</p> </li> <li> <p>Install the needed software for Mkdocs to work,   check the file in the root folder how-to-install-mkdocs.md</p> </li> <li>Create a new branch to make your changes<ul> <li>git branch \"&lt;your branch name&gt;\"</li> <li>git checkout \"&lt;your branch name&gt;\"</li> </ul> </li> <li>Make the changes you want and commit them<ul> <li>git add \"files you changed\"</li> <li>git commit -m \"add useful commit info\"</li> </ul> </li> <li>Return back to the main branch<ul> <li>git checkout main</li> </ul> </li> <li>Make sure you have the latest changes merged from main<ul> <li>git pull origin main</li> </ul> </li> <li>Merge your branch into the main branch<ul> <li>git merge \"&lt;your branch name&gt;\"</li> <li>git push</li> </ul> </li> <li>cleanup your branch<ul> <li>git branch -d \"&lt;your branch name&gt;\"</li> </ul> </li> <li>Create a pull requests so that we can merge it :)</li> </ul>"},{"location":"ch00-getting-started/Requirements/","title":"System Requirements","text":""},{"location":"ch00-getting-started/Requirements/#requirements","title":"Requirements","text":"<p>Zabbix has specific hardware and software requirements that must be met, and these requirements may change over time. They also depend on the size of your setup and the software stack you select. Before purchasing hardware or installing a database version, it's essential to consult the Zabbix documentation for the most up-to-date requirements for the version you plan to install. You can find the latest requirements https://www.zabbix.com/documentation/current/en/manual/installation/requirements. Make sure to select the correct Zabbix version from the list.</p> <p>For smaller or test setups, Zabbix can comfortably run on a system with 2 CPUs and 8 GB of RAM. However, your setup size, the number of items you monitor, the triggers you create, and how long you plan to retain data will impact resource requirements. In today's virtualised environments, my advice is to start small and scale up as needed.</p> <p>You can install all components (Zabbix server, database, web server) on a single machine or distribute them across multiple servers. For simplicity, take note of the server details:</p> Component IP Address Zabbix Server Database Server Web Server Tip <p>Zabbix package names often use dashes (<code>-</code>) in their names, such as <code>zabbix-get</code> or <code>zabbix-sender</code>, but the binaries themselves may use underscores (<code>_</code>), like <code>zabbix_sender</code> or <code>zabbix_server</code>. This naming discrepancy can sometimes be confusing, particularly if you are using packages from non-official Zabbix repositories. Always check if a binary uses a dash or an underscore when troubleshooting.</p>"},{"location":"ch00-getting-started/Requirements/#basic-os-configuration","title":"Basic OS Configuration","text":"<p>Operating systems, so many choices, each with its own advantages and loyal user base. While Zabbix can be installed on a wide range of platforms, documenting the process for every available OS would be impractical. To keep this book focused and efficient, we have chosen to cover only the most widely used options: Ubuntu and Red Hat based distributions.</p> <p>Since not everyone has access to a Red Hat Enterprise Linux (RHEL) subscription even though a developer account provides limited access we have opted for Rocky Linux as a readily available alternative. For this book, we will be using Rocky Linux 9.x and Ubuntu LTS 24.04.x.</p> <ul> <li>https://rockylinux.org/</li> <li>https://ubuntu.com/</li> </ul>"},{"location":"ch00-getting-started/Requirements/#firewall","title":"Firewall","text":"<p>Before installing Zabbix, it's essential to properly prepare the operating system. The first step is to ensure that the firewall is installed and configured.</p> <p>To install and enable the firewall, run the following command:</p> <p>RedHat</p> <pre><code># dnf install firewalld\n# systemctl enable firewalld --now\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt install ufw -y\n# sudo ufw enable\n</code></pre> <p>Once installed, you can configure the necessary ports. For Zabbix, we need to allow access to port <code>10051/tcp</code>, which is where the Zabbix trapper listens for incoming data. Use the following command to open this port in the firewall:</p> <p>RedHat</p> <pre><code># firewall-cmd --add-service=zabbix-server --permanent\n</code></pre> <p>Ubuntu</p> <pre><code># sudo ufw allow 10051/tcp\n</code></pre> <p>If the service is not recognized, you can manually specify the port:</p> <pre><code># firewall-cmd --add-port=10051/tcp --permanent\n</code></pre> <p>firewalld</p> <p>\"Firewalld is the replacement for iptables in RHEL-based systems and allows changes to take effect immediately without needing to restart the service. If your distribution does not use Firewalld, refer to your OS documentation for the appropriate firewall configuration steps.\" Ubuntu makes use of UFW and is merely a frontend for iptables.</p> <p>Another option is to add individual firewall zones for example</p> <pre><code># firewall-cmd --new-zone=postgresql-access --permanent\n</code></pre> <p>You can verify if the zone was created by running :</p> <pre><code># firewall-cmd --get-zones\n    block dmz drop external home internal nm-shared postgresql-access public\n    trusted work\n</code></pre> <p>Using zones in firewalld to configure firewall rules for PostgreSQL provides several advantages in terms of security, flexibility, and ease of management. Here\u2019s why zones are beneficial:</p> <ul> <li>Granular Access Control</li> <li>firewalld zones allow different levels of trust for different network interfaces     and IP ranges. You can define which systems are allowed to connect to PostgreSQL     based on their trust level.</li> <li>Simplified Rule management</li> <li>Instead of manually defining complex iptables rules, zones provide an organized     way to group and manage firewall rules based on usage scenarios.</li> <li>Enhanced security</li> <li>By restricting PostgreSQL access to a specific zone, you prevent unauthorized     connections from other interfaces or networks.</li> <li>Dynamic configuration</li> <li>firewalld supports runtime and permanent rule configurations, allowing changes     without disrupting existing connections.</li> <li>Multi-Interface support</li> <li>If the server has multiple network interfaces, zones allow different security     policies for each interface.</li> </ul> <p>Bringing everything together it would look like this:</p> <pre><code>firewall-cmd --new-zone=db_zone --permanent\nfirewall-cmd --zone=db_zone --add-service=postgresql --permanent\nfirewall-cmd --zone=db_zone --add-source=xxx.xxx.xxx.xxx/32 --permanent\nfirewall-cmd --reload\n</code></pre> <p>Where our <code>source IP</code> is the only IP that is allowed to connect to our DB.</p>"},{"location":"ch00-getting-started/Requirements/#time-server","title":"Time Server","text":"<p>Another crucial step is configuring the time server and syncing the Zabbix server using an NTP client. Accurate time synchronization is vital for Zabbix, both for the server and the devices it monitors. If one of the hosts has an incorrect time zone, it could lead to confusion, such as investigating an issue in Zabbix that appears to have happened hours earlier than it actually did.</p> <p>To install and enable chrony, our NTP client, use the following command:</p> <p>RedHat</p> <pre><code># dnf install chrony\n# systemctl enable chronyd --now\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt install chrony -y\n</code></pre> <p>Once installed, you can verify that Chrony is enabled and running by checking its status:</p> <p>RedHat</p> <pre><code># systemctl status chronyd\n</code></pre> <p>dnf</p> <p>\"dnf is a package manager used in Red Hat-based systems. If you're using another distribution, replace <code>dnf</code> with your appropriate package manager, such as <code>zyper</code>, <code>apt</code>, or <code>yum</code>. Chrony is a modern replacement for <code>ntpd</code>, offering faster and more accurate time synchronization. If your OS does not support Chrony, consider using <code>ntpd</code> instead.\"</p> <p>Once Chrony is installed, the next step is to ensure the correct time zone is set. You can view your current time configuration using the <code>timedatectl</code> command:</p> <pre><code># timedatectl\n               Local time: Thu 2023-11-16 15:09:14 UTC\n           Universal time: Thu 2023-11-16 15:09:14 UTC\n                 RTC time: Thu 2023-11-16 15:09:15\n                Time zone: UTC (UTC, +0000)\nSystem clock synchronized: yes\n              NTP service: active\n          RTC in local TZ: no\n</code></pre> <p>Ensure that the Chrony service is active (refer to the previous steps if needed). To set the correct time zone, first, you can list all available time zones with the following command:</p> <pre><code># timedatectl list-timezones\n</code></pre> <p>This will display a list of time zones, from which you can select the one closest to your location, for example:</p> <pre><code>Africa/Abidjan\nAfrica/Accra\n...\nPacific/Tongatapu\nPacific/Wake\nPacific/Wallis\nUTC\n</code></pre> <p>Once you've identified your time zone, configure it using the following command:</p> <pre><code># timedatectl set-timezone Europe/Brussels\n</code></pre> <p>To verify that the time zone has been configured correctly, use the <code>timedatectl</code> command again:</p> <pre><code># timedatectl\n               Local time: Thu 2023-11-16 16:13:35 CET\n           Universal time: Thu 2023-11-16 15:13:35 UTC\n                 RTC time: Thu 2023-11-16 15:13:36\n                Time zone: Europe/Brussels (CET, +0100)\nSystem clock synchronized: yes\n              NTP service: active\n          RTC in local TZ: no\n</code></pre> Note <p>Some administrators prefer installing all servers in the UTC time zone to ensure that server logs across global deployments are synchronized. Zabbix supports user-based time zone settings, which allows the server to remain in UTC while individual users can adjust the time zone via the interface if needed.</p>"},{"location":"ch00-getting-started/Requirements/#verifying-chrony-synchronization","title":"Verifying Chrony Synchronization","text":"<p>To ensure that Chrony is synchronizing with the correct time servers, you can run the following command:</p> <pre><code># chronyc\n</code></pre> <p>The output should resemble:</p> <pre><code>chrony version 4.2\nCopyright (C) 1997-2003, 2007, 2009-2021 Richard P. Curnow and others\nchrony comes with ABSOLUTELY NO WARRANTY.  This is free software, and\nyou are welcome to redistribute it under certain conditions.  See the\nGNU General Public License version 2 for details.\n\nchronyc&gt;\n</code></pre> <p>Once inside the Chrony prompt, type the following to check the sources:</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>Example output:</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- 51-15-20-83.rev.poneytel&gt;     2   9   377   354   +429us[ +429us] +/-  342ms\n^- 5.255.99.180                  2  10   377   620  +7424us[+7424us] +/-   37ms\n^- hachi.paina.net               2  10   377   412   +445us[ +445us] +/-   39ms\n^* leontp1.office.panq.nl        1  10   377   904  +6806ns[ +171us] +/- 2336us\n</code></pre> <p>In this example, the NTP servers in use are located outside your local region. It is recommended to switch to time servers in your country or, if available, to a dedicated company time server. You can find local NTP servers here.</p>"},{"location":"ch00-getting-started/Requirements/#updating-time-servers","title":"Updating Time Servers","text":"<p>To update the time servers, modify the <code>/etc/chrony.conf</code> file under RedHat based systems if you use Ubuntu edit <code>/etc/chrony/chrony.conf</code> . Replace the existing NTP server with one closer to your location.</p> <p>Example of the current configuration:</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool 2.centos.pool.ntp.org iburst\n</code></pre> <p>Change the pools you want to a local time server:</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool be.pool.ntp.org iburst\n</code></pre> <p>After making this change, restart the Chrony service to apply the new configuration:</p> <pre><code># systemctl restart chronyd\n</code></pre>"},{"location":"ch00-getting-started/Requirements/#verifying-updated-time-servers","title":"Verifying Updated Time Servers","text":"<p>Check the time sources again to ensure that the new local servers are in use:</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>Example of expected output with local servers:</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- ntp1.unix-solutions.be        2   6    17    43   -375us[ -676us] +/-   28ms\n^* ntp.devrandom.be              2   6    17    43   -579us[ -880us] +/- 2877us\n^+ time.cloudflare.com           3   6    17    43   +328us[  +27us] +/- 2620us\n^+ time.cloudflare.com           3   6    17    43\n</code></pre> <p>This confirms that the system is now using local time servers.</p>"},{"location":"ch00-getting-started/initial-steps/","title":"Getting Started with Zabbix \u2013 Unlocking the Power of Monitoring","text":"<p>Welcome to the world of Zabbix, a powerful open-source monitoring solution designed to give you comprehensive insights into your IT infrastructure. Whether you're managing a small network or overseeing a large-scale enterprise system, Zabbix provides the tools you need to monitor performance, detect issues, and ensure the smooth operation of your services.</p> <p>In this book, we focus on Zabbix LTS 8.0, the long-term support version that ensures stability and reliability for your monitoring needs. We'll explore its extensive feature set, including the newly introduced reporting functionality and built-in web monitoring based on the Selenium driver, which allows for sophisticated end-user experience monitoring through automated browser interactions.</p> <p>Zabbix is more than just a simple monitoring tool. It offers a wide range of features that allow you to:</p> <ul> <li>Monitor diverse environments: Track the performance and availability of servers, virtual machines, network devices, databases, and applications.</li> <li>Create dynamic visualizations: Use dashboards, graphs, maps, and screens to visualize data and get an overview of your system's health at a glance.</li> <li>Set up complex alerting mechanisms: Define triggers and actions that notify you of potential issues before they become critical, using various channels like email, SMS, and integrations with external services.</li> <li>Automate monitoring tasks: Leverage auto-discovery and auto-registration to keep up with changing environments without manual intervention.</li> <li>Customize and extend: Build custom scripts, templates, and integrations to tailor Zabbix to your specific needs.</li> </ul>"},{"location":"ch01-zabbix-components/basic-installation/","title":"Basic installation","text":"<p>In this chapter, we will walk through the process of installing the Zabbix server. There are many different ways to setup a Zabbix server. We will cover the most common setups with MariaDB and PostgreSQL on Ubuntu and on Rocky Linux.</p> <p>Before beginning the installation, it is important to understand the architecture of Zabbix. The Zabbix server is structured in a modular fashion, composed of three main components, which we will discuss in detail.</p> <ul> <li>The Zabbix server</li> <li>The Zabbix web server</li> <li>The Zabbix database</li> </ul> <p> 1.1 Zabbix basic split installation</p> <p>All of these components can either be installed on a single server or distributed across three separate servers. The core of the system is the Zabbix server, often referred to as the \"brain.\" This component is responsible for processing trigger calculations and sending alerts. The database serves as the storage for the Zabbix server's configuration and all the data it collects. The web server provides the user interface (front-end) for interacting with the system. It is important to note that the Zabbix API is part of the front-end component, not the Zabbix server itself.</p> <p>These components must function together seamlessly, as illustrated in the diagram above. The Zabbix server must read configurations and store monitoring data in the database, while the front-end needs access to read and write configuration data. Furthermore, the front-end must be able to check the status of the Zabbix server and retrieve additional necessary information to ensure smooth operation.</p> <p>For our setup, we will be using two virtual machines (VMs): one VM will host both the Zabbix server and the Zabbix web front-end, while the second VM will host the Zabbix database.</p> Note <p>It's perfect possible to install all components on 1 single VM or every component on a separate VM. Reason we split the DB as an example is because the database will probably be the first component giving you performance headaches. It's also the component that needs some extra attention when we split it so for this reason we have chosen in this example to split the database from the rest of the setup.</p> Note <p>A crucial consideration for those managing Zabbix installations is the database back-end. Zabbix 7.0 marks the final release to offer support for Oracle Database. Consequently, systems running Zabbix 7.0 or any prior version must undertake a database migration to either PostgreSQL, MySQL, or a compatible fork such as MariaDB before upgrading to a later Zabbix release. This migration is a mandatory step to ensure continued functionality and compatibility with future Zabbix versions.</p> <p>We will cover the following topics:</p> <ul> <li>Install our Database based on MariaDB.</li> <li>Install our Database based on PostgreSQL.</li> <li>Installing the Zabbix server.</li> <li>Install the frontend.</li> </ul>"},{"location":"ch01-zabbix-components/basic-installation/#installing-the-mariadb-database","title":"Installing the MariaDB database","text":"<p>To begin the installation process for the MariaDB server, the first step involves manually creating a repository configuration file. This file, mariadb.repo on Rocky, must be placed in the /etc/yum.repos.d/ directory. The repository file will allow your package manager to locate and install the necessary MariaDB components. For Ubuntu we need to import the repository keys and create a file for example '/etc/apt/sources.list.d/mariadb.sources'.</p>"},{"location":"ch01-zabbix-components/basic-installation/#add-the-mariadb-repository","title":"Add the MariaDB repository","text":"<p>To create the MariaDB repository file, execute the following command in your terminal:</p> <p>RedHat</p> <pre><code># vi /etc/yum.repos.d/mariadb.repo\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt-get install apt-transport-https curl\n# sudo mkdir -p /etc/apt/keyrings\n# sudo curl -o /etc/apt/keyrings/mariadb-keyring.pgp 'https://mariadb.org/mariadb_release_signing_key.pgp'\n\n# sudo vi /etc/apt/sources.list.d/mariadb.sources\n</code></pre> <p>This will open a text editor where you can input the repository configuration details. Once the repository is configured, you can proceed with the installation of MariaDB using your package manager.</p> Tip <p>Always check Zabbix documentation for the latest supported versions.</p> <p>The latest config can be found here: https://mariadb.org/download/?t=repo-config</p> <p>Here's the configuration you need to add into the file:</p> <p>RedHat</p> <pre><code># MariaDB 11.4 RedHatEnterpriseLinux repository list - created 2025-02-21 10:15 UTC\n# https://mariadb.org/download/\n[mariadb]\nname = MariaDB\n# rpm.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.\n# baseurl = https://rpm.mariadb.org/11.4/rhel/$releasever/$basearch\nbaseurl = https://mirror.bouwhuis.network/mariadb/yum/11.4/rhel/$releasever/$basearch\n# gpgkey = https://rpm.mariadb.org/RPM-GPG-KEY-MariaDB\ngpgkey = https://mirror.bouwhuis.network/mariadb/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\n</code></pre> <p>Ubuntu</p> <pre><code># MariaDB 11.4 repository list - created 2025-02-21 11:42 UTC\n# https://mariadb.org/download/\nX-Repolib-Name: MariaDB\nTypes: deb\n# deb.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.\n# URIs: https://deb.mariadb.org/11.4/ubuntu\nURIs: https://mirror.bouwhuis.network/mariadb/repo/11.4/ubuntu\nSuites: noble\nComponents: main main/debug\nSigned-By: /etc/apt/keyrings/mariadb-keyring.pgp\n</code></pre> <p>After saving the file, ensure that everything is properly set up and that your MariaDB version is compatible with your Zabbix version to avoid potential integration issues.</p> <p>Before proceeding with the MariaDB installation, it's a best practice to ensure your operating system is up-to-date with the latest patches and security fixes. This will help maintain system stability and compatibility with the software you're about to install.</p> <p>To update your OS, run the following command:</p> <p>RedHat</p> <pre><code># dnf update -y\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt update -y &amp;&amp; sudo apt upgrade -y\n</code></pre> <p>This command will automatically fetch and install the latest updates available for your system, applying security patches, performance improvements, and bug fixes. Once the update process is complete, you can move forward with the MariaDB installation.</p>"},{"location":"ch01-zabbix-components/basic-installation/#install-the-mariadb-database","title":"Install the MariaDB database","text":"<p>With the operating system updated and the MariaDB repository configured, you are now ready to install the MariaDB server and client packages. This will provide the necessary components to run and manage your database.</p> <p>To install the MariaDB server and client, execute the following command:</p> <p>RedHat</p> <pre><code># dnf install MariaDB-server\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt-get install mariadb-server\n</code></pre> <p>This command will download and install both the server and client packages, enabling you to set up, configure, and interact with your MariaDB database. Once the installation is complete, you can proceed to start and configure the MariaDB service.</p> <p>Now that MariaDB is installed, we need to enable the service to start automatically upon boot and start it immediately. Use the following command to accomplish this:</p> <p>RedHat</p> <pre><code># systemctl enable mariadb --now\n</code></pre> <p>This command will both enable and start the MariaDB service. Once the service is running, you can verify that the installation was successful by checking the version of MariaDB using the following command:</p> <p>RedHat and Ubuntu</p> <pre><code># sudo mariadb -V\n</code></pre> <p>The expected output should resemble this:</p> <pre><code>mariadb from 11.4.5-MariaDB, client 15.2 for Linux (aarch64) using  EditLine wrapper\n</code></pre> <p>To ensure that the MariaDB service is running properly, you can check its status with the following command:</p> <pre><code>RedHat and Ubuntu\n# sudo systemctl status mariadb\n</code></pre> <p>You should see an output similar to this, indicating that the MariaDB service is active and running:</p> <pre><code>mariadb.service - MariaDB 11.4.5 database server\n     Loaded: loaded (/usr/lib/systemd/system/mariadb.service; enabled; preset: disabled)\n    Drop-In: /etc/systemd/system/mariadb.service.d\n             \u2514\u2500migrated-from-my.cnf-settings.conf\n     Active: active (running) since Fri 2025-02-21 11:22:59 CET; 2min 8s ago\n       Docs: man:mariadbd(8)\n             https://mariadb.com/kb/en/library/systemd/\n    Process: 23147 ExecStartPre=/bin/sh -c systemctl unset-environment _WSREP_START_POSITION (code=exited, status=0/SUCCESS)\n    Process: 23148 ExecStartPre=/bin/sh -c [ ! -e /usr/bin/galera_recovery ] &amp;&amp; VAR= ||   VAR=`/usr/bin/galera_recovery`; [ $? -eq 0 ]   &amp;&amp; systemctl set-enviro&gt;\n    Process: 23168 ExecStartPost=/bin/sh -c systemctl unset-environment _WSREP_START_POSITION (code=exited, status=0/SUCCESS)\n   Main PID: 23156 (mariadbd)\n     Status: \"Taking your SQL requests now...\"\n      Tasks: 7 (limit: 30620)\n     Memory: 281.7M\n        CPU: 319ms\n     CGroup: /system.slice/mariadb.service\n             \u2514\u250023156 /usr/sbin/mariadbd\n\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] InnoDB: Loading buffer pool(s) from /var/lib/mysql/ib_buffer_pool\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Plugin 'FEEDBACK' is disabled.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Plugin 'wsrep-provider' is disabled.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] InnoDB: Buffer pool(s) load completed at 250221 11:22:58\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Server socket created on IP: '0.0.0.0'.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Server socket created on IP: '::'.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] mariadbd: Event Scheduler: Loaded 0 events\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] /usr/sbin/mariadbd: ready for connections.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: Version: '11.4.5-MariaDB'  socket: '/var/lib/mysql/mysql.sock'  port: 3306  MariaDB Server\nFeb 21 11:22:59 localhost.localdomain systemd[1]: Started MariaDB 11.4.5 database server.\n</code></pre> <p>This confirms that your MariaDB server is up and running, ready for further configuration.</p>"},{"location":"ch01-zabbix-components/basic-installation/#securing-the-mariadb-database","title":"Securing the MariaDB Database","text":"<p>To enhance the security of your MariaDB server, it's essential to remove unnecessary test databases, anonymous users, and set a root password. This can be done using the mariadb-secure-installation script, which provides a step-by-step guide to securing your database.</p> <p>Run the following command:</p> <p>RedHat and Ubuntu</p> <pre><code># sudo mariadb-secure-installation\n</code></pre> <pre><code>NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\n      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!\n\nIn order to log into MariaDB to secure it, we'll need the current\npassword for the root user. If you've just installed MariaDB, and\nhaven't set the root password yet, you should just press enter here.\n\nEnter current password for root (enter for none):\nOK, successfully used password, moving on...\n\nSetting the root password or using the unix_socket ensures that nobody\ncan log into the MariaDB root user without the proper authorisation.\n\nYou already have your root account protected, so you can safely answer 'n'.\n\nSwitch to unix_socket authentication [Y/n] n\n ... skipping.\n\nYou already have your root account protected, so you can safely answer 'n'.\n\nChange the root password? [Y/n] y\nNew password:\nRe-enter new password:\nPassword updated successfully!\nReloading privilege tables..\n ... Success!\n\n\nBy default, a MariaDB installation has an anonymous user, allowing anyone\nto log into MariaDB without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] y\n ... Success!\n\nNormally, root should only be allowed to connect from 'localhost'.  This\nensures that someone cannot guess at the root password from the network.\n\nDisallow root login remotely? [Y/n] y\n ... Success!\n\nBy default, MariaDB comes with a database named 'test' that anyone can\naccess.  This is also intended only for testing, and should be removed\nbefore moving into a production environment.\n\nRemove test database and access to it? [Y/n] y\n - Dropping test database...\n ... Success!\n - Removing privileges on test database...\n ... Success!\n\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\n\nReload privilege tables now? [Y/n] y\n ... Success!\n\nCleaning up...\n\nAll done!  If you've completed all of the above steps, your MariaDB\ninstallation should now be secure.\n\nThanks for using MariaDB!\n</code></pre> <p>The mariadb-secure-installation script will guide you through several key steps:</p> <ol> <li>Set a root password if one isn't already set.</li> <li>Remove anonymous users.</li> <li>Disallow remote root logins.</li> <li>Remove the test database.</li> <li>Reload the privilege tables to ensure the changes take effect.</li> </ol> <p>Once complete, your MariaDB instance will be significantly more secure. You are now ready to configure the database for Zabbix.</p>"},{"location":"ch01-zabbix-components/basic-installation/#create-the-zabbix-database","title":"Create the Zabbix database","text":"<p>With MariaDB now set up and secured, we can move on to creating the database for Zabbix. This database will store all the necessary data related to your Zabbix server, including configuration information and monitoring data.</p> <p>Follow these steps to create the Zabbix database:</p> <p>Log in to the MariaDB shell as the root user: You'll be prompted to enter the root password that you set during the mariadb-secure-installation process.</p> <p>RedHat and Ubuntu</p> <pre><code># mariadb -uroot -p\n</code></pre> <p>Once you're logged into the MariaDB shell, run the following command to create a database for Zabbix:</p> <pre><code>MariaDB [(none)]&gt; CREATE DATABASE zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\n</code></pre> Note <p>utf8mb4 is a proper implementation of UTF-8 in MySQL/MariaDB, supporting all Unicode characters, including emojis. The older utf8 charset in MySQL/MariaDB only supports up to three bytes per character and is not a true UTF-8 implementation, which is why utf8mb4 is recommended.</p> <p>This command creates a new database named zabbix with the UTF-8 character set, which is required for Zabbix.</p> <p>Create a dedicated user for Zabbix and grant the necessary privileges: Next, you need to create a user that Zabbix will use to access the database. Replace password with a strong password of your choice.</p> <pre><code>MariaDB [(none)]&gt; CREATE USER 'zabbix-web'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nMariaDB [(none)]&gt; CREATE USER 'zabbix-srv'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nMariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix-srv'@'&lt;zabbix server ip&gt;';\nMariaDB [(none)]&gt; GRANT SELECT, UPDATE, DELETE, INSERT ON zabbix.* TO 'zabbix-web'@'&lt;zabbix server ip&gt;';\nMariaDB [(none)]&gt; FLUSH PRIVILEGES;\n</code></pre> <p>This creates new users for zabbix-web and zabbix-srv, grants them access to the zabbix database, and ensures that the privileges are applied immediately.</p> <p>In some cases, especially when setting up Zabbix with MariaDB, you might encounter issues related to stored functions and triggers if binary logging is enabled. To address this, you need to set the log_bin_trust_function_creators option to 1 in the MariaDB configuration file. This allows non-root users to create stored functions and triggers without requiring SUPER privileges, which are restricted when binary logging is enabled.</p> <pre><code>MariaDB [(none)]&gt; SET GLOBAL log_bin_trust_function_creators = 1;\nMariaDB [(none)]&gt; QUIT\n</code></pre> <p>At this point, your Zabbix database is ready, and you can proceed with configuring the Zabbix server to connect to the database.</p> Warning <p>In the Zabbix documentation, it is explicitly stated that deterministic triggers need to be created during the schema import. On MySQL and MariaDB systems, this requires setting GLOBAL log_bin_trust_function_creators = 1 if binary logging is enabled, and you lack superuser privileges.</p> <p>If the log_bin_trust_function_creators option is not set in the MySQL configuration file, it will block the creation of these triggers during schema import. This is essential because, without superuser access, non-root users cannot create triggers or stored functions unless this setting is applied.</p> <p>To summarize:</p> <ul> <li> <p>Binary logging enabled: If binary logging is enabled and the user does not   have superuser privileges, the creation of necessary Zabbix triggers will   fail unless log_bin_trust_function_creators = 1 is set.</p> </li> <li> <p>Solution: Add log_bin_trust_function_creators = 1 to the [mysqld] section   in your MySQL/MariaDB configuration file or temporarily set it at runtime   with SET GLOBAL log_bin_trust_function_creators = 1 if you have sufficient   permissions.</p> </li> </ul> <p>This ensures that Zabbix can successfully create the required triggers during schema import without encountering privilege-related errors.</p> <p>If we want our Zabbix server to connect to our DB then we also need to open our firewall port.</p> <p>RedHat</p> <pre><code># firewall-cmd --add-port=3306/tcp --permanent\n# firewall-cmd --reload\n</code></pre> <p>Ubuntu</p> <pre><code># sudo ufw allow 3306/tcp\n</code></pre>"},{"location":"ch01-zabbix-components/basic-installation/#populate-the-zabbix-db","title":"Populate the Zabbix DB","text":"<p>With the users and permissions set up correctly, you can now populate the database with the Zabbix schema created and other required elements. Follow these steps:</p> <p>One of the first things we need to do is add the Zabbix repository to our machine. This may sound weird but actually makes sense because we need to populate our DB with our Zabbix schemas.</p> <p>RedHat</p> <pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\n# dnf clean all\n# dnf install zabbix-sql-scripts -y\n</code></pre> <p>Ubuntu</p> <pre><code># sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# sudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# sudo apt update\n# sudo apt install zabbix-sql-scripts\n</code></pre> <p>Now lets upload the data from zabbix (db structure, images, user, ... ) for this we make use of the user <code>zabbix-srv</code> and we upload it all in our DB <code>zabbix</code>.</p> <p>RedHat and Ubuntu</p> <pre><code># sudo zcat /usr/share/zabbix/sql-scripts/mysql/server.sql.gz | mariadb --default-character-set=utf8mb4 -uroot -p zabbix\n</code></pre> Note <p>Depending on the speed of your hardware or virtual machine, the process may take anywhere from a few seconds to several minutes. Please be patient and avoid cancelling the operation; just wait for the prompt to appear.</p> <p>Log back into your MySQL Database as root</p> <pre><code># mariadb -uroot -p\n</code></pre> <p>Once the import of the Zabbix schema is complete and you no longer need the log_bin_trust_function_creators global parameter, it is a good practice to remove it for security reasons.</p> <p>To revert the change and set the global parameter back to 0, use the following command in the MariaDB shell:</p> <pre><code>mysql&gt; SET GLOBAL log_bin_trust_function_creators = 0;\nQuery OK, 0 rows affected (0.001 sec)\n</code></pre> <p>This command will disable the setting, ensuring that the servers security posture remains robust.</p> <p>This concludes our installation of the MariaDB</p>"},{"location":"ch01-zabbix-components/basic-installation/#installing-the-postgresql-database","title":"Installing the PostgreSQL database","text":"<p>For our DB setup with PostgreSQL we need to add our PostgreSQL repository first to the system. As of writing PostgreSQL 13-17 are supported but best is to have a look before you install it as new versions may be supported and older maybe unsupported both by Zabbix and PostgreSQL. Usually it's a good idea to go with the latest version that is supported by Zabbix. Zabbix also supports the extension TimescaleDB this is something we will talk later about. As you will see the setup from PostgreSQL is very different from MySQL not only the installation but also securing the DB.</p> <p>The table of compatibility can be found https://docs.timescale.com/self-hosted/latest/upgrades/upgrade-pg/</p>"},{"location":"ch01-zabbix-components/basic-installation/#add-the-postgresql-repository","title":"Add the PostgreSQL repository","text":"<p>So let us start first setting up our PostgreSQL repository with the following commands.</p> <p>RedHat</p> <pre><code>Install the repository RPM:\n# sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\nDisable the built-in PostgreSQL module:\n# sudo dnf -qy module disable postgresql\n</code></pre> <p>Ubuntu</p> <pre><code># Import the repository signing key:\nsudo apt install curl ca-certificates\nsudo install -d /usr/share/postgresql-common/pgdg\nsudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc\n\n# Create the repository configuration file:\nsudo sh -c 'echo \"deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" &gt; /etc/apt/sources.list.d/pgdg.list'\n\n# Update the package lists:\nsudo apt update\n\n</code></pre>"},{"location":"ch01-zabbix-components/basic-installation/#install-the-postgresql-databases","title":"Install the PostgreSQL databases","text":"<p>RedHat</p> <pre><code># Install PostgreSQL:\nsudo dnf install -y postgresql17-server\n\nInitialize the database and enable automatic start:\n# sudo /usr/pgsql-17/bin/postgresql-17-setup initdb\n# sudo systemctl enable postgresql-17 --now\n</code></pre> <p>Ubuntu</p> <pre><code>sudo apt -y install postgresql-17\n</code></pre> <p>To update your OS, run the following command:</p> <p>RedHat</p> <pre><code># dnf update -y\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt update -y &amp;&amp; sudo apt upgrade -y\n</code></pre>"},{"location":"ch01-zabbix-components/basic-installation/#securing-the-postgresql-database","title":"Securing the PostgreSQL database","text":"<p>PostgreSQL handles access permissions differently from MySQL and MariaDB. PostgreSQL relies on a file called pg_hba.conf to manage who can access the database, from where, and what encryption method is used for authentication.</p> Note <p>Client authentication in PostgreSQL is configured through the pg_hba.conf file, where \"HBA\" stands for Host-Based Authentication. This file specifies which users can access the database, from which hosts, and how they are authenticated. For further details, you can refer to the official PostgreSQL documentation.\" https://www.postgresql.org/docs/current/auth-pg-hba-conf.html</p> <p>Add the following lines, the order here is important.</p> <p>Redhat</p> <pre><code># vi /var/lib/pgsql/17/data/pg_hba.conf\n</code></pre> <p>Ubuntu</p> <pre><code># sudo vi /etc/postgresql/17/main/pg_hba.conf\n</code></pre> <p>The result should look like : </p> <pre><code># \"local\" is for Unix domain socket connections only\nlocal    zabbix     zabbix-srv                                                              scram-sha-256\nlocal    all            all                                                                            peer\n# IPv4 local connections\nhost     zabbix     zabbix-srv          &lt;ip from zabbix server/24&gt;     scram-sha-256\nhost     zabbix     zabbix-web        &lt;ip from zabbix server/24&gt;     scram-sha-256\nhost     all            all                         127.0.0.1/32                            scram-sha-256\n</code></pre> <p>After we changed the pg_hba file don't forget to restart postgres else the settings will not be applied. But before we restart let us also edit the file postgresql.conf and allow our database to listen on our network interface for incoming connections from the zabbix server. Postgresql will standard only allow connections from the socket.</p> <p>RedHat</p> <pre><code># vi /var/lib/pgsql/17/data/postgresql.conf\n</code></pre> <p>Ubuntu</p> <pre><code># vi /etc/postgresql/17/main/postgresql.conf\n</code></pre> <p>To configure PostgreSQL to listen on all network interfaces, you need to modify the <code>postgresql.conf</code> file. Locate the following line:</p> <pre><code>#listen_addresses = 'localhost'\n</code></pre> <p>and replace it with:</p> <pre><code>listen_addresses = '*'\n</code></pre> <p>This will enable PostgreSQL to accept connections from any network interface, not just the local machine. In production it's probably a good idea to limit  who can connect to the DB. After making this change, restart the PostgreSQL service to apply the new settings:</p> <p>Redhat</p> <pre><code># systemctl restart postgresql-17\n</code></pre> <p>Ubuntu</p> <pre><code>sudo systemctl restart postgresql\n</code></pre> <p>If the service fails to restart, review the pg_hba.conf file for any syntax errors, as incorrect entries here may prevent PostgreSQL from starting.</p> <p>Next, to prepare your PostgreSQL instance for Zabbix, you'll need to create the necessary database tables. Begin by installing the Zabbix repository, as you did for the Zabbix server. Then, install the appropriate Zabbix package that contains the predefined tables, images, icons, and other database elements needed for the Zabbix application.</p>"},{"location":"ch01-zabbix-components/basic-installation/#create-the-zabbix-database_1","title":"Create the Zabbix database","text":"<p>To begin, add the Zabbix repository to your system by running the following commands:</p> <p>RedHat</p> <pre><code># dnf install https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm -y\n# dnf install zabbix-sql-scripts -y \n</code></pre> <p>Ubuntu</p> <pre><code># sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# sudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# sudo apt update -y\n# sudo apt install zabbix-sql-scripts -y\n</code></pre> <p>With the necessary packages installed, you are now ready to create the Zabbix users for both the server and frontend.</p> <p>First, switch to the <code>postgres</code> user and create the Zabbix server database user:</p> <pre><code># sudo su - postgres\n# createuser --pwprompt zabbix-srv\nEnter password for new role: &lt;server-password&gt;\nEnter it again: &lt;server-password&gt;\n</code></pre> <p>Next, create the Zabbix frontend user, which will be used to connect to the database:</p> <pre><code># createuser --pwprompt zabbix-web\nEnter password for new role: &lt;frontend-password&gt;\nEnter it again: &lt;frontend-password&gt;\n</code></pre> <p>After creating the users, you need to prepare the database schema. As the root or your regular user, unzip the necessary schema files by running the following command:</p> <p>RedHat</p> <pre><code># gzip -d /usr/share/zabbix/sql-scripts/postgresql/server.sql.gz\n</code></pre> <p>Ubuntu</p> <pre><code># sudo gzip -d /usr/share/zabbix/sql-scripts/postgresql/server.sql.gz\n</code></pre> Note <p>Zabbix seems to like to change the locations of the script to populate the DB every version or in between versions. If you encounter an error take a look at the Zabbix documentation there is a good chance that some location was changed.</p> <p>This will extract the database schema required for the Zabbix server.</p> <p>Now that the users are created, the next step is to create the Zabbix database.  First, switch to the <code>postgres</code> user and execute the following command to create the database with the owner set to zabbix-srv:</p> <p>RedHat</p> <pre><code># su - postgres\n# createdb -E Unicode -O zabbix-srv zabbix\n# exit\n</code></pre> <p>Ubuntu</p> <pre><code># sudo su - postgres\n# createdb -E Unicode -O zabbix-srv zabbix\n# exit\n</code></pre> <p>Once the database is created, you should verify the connection and ensure that the correct user session is active. To do this, log into the zabbix database using the zabbix-srv user:</p> <pre><code># psql -d zabbix -U zabbix-srv\n</code></pre> <p>After logging in, run the following SQL query to confirm that both the <code>session_user</code> and <code>current_user</code> are set to <code>zabbix-srv</code>:</p> <pre><code>zabbix=&gt; SELECT session_user, current_user;\n session_user | current_user\n--------------+--------------\n zabbix-srv   | zabbix-srv\n(1 row)\n</code></pre> <p>If the output matches, you are successfully connected to the database with the correct user.</p> <p>PostgreSQL indeed differs significantly from MySQL or MariaDB in several aspects, and one of the key features that sets it apart is its use of schemas. Unlike MySQL, where databases are more standalone, PostgreSQL's schema system provides a structured, multi-user environment within a single database.</p> <p>Schemas act as logical containers within a database, enabling multiple users or applications to access and manage data independently without conflicts. This feature is especially valuable in environments where several users or applications need to interact with the same database concurrently. Each user or application can have its own schema, preventing accidental interference with each other's data.</p> Note <p>PostgreSQL comes with a default schema, typically called public, but it's in general best practice to create custom schemas to better organize and separate database objects, especially in complex or multi-user environments.</p> <p>For more in-depth information, I recommend checking out the detailed guide at this URI, https://hevodata.com/learn/postgresql-schema/#schema which explains the benefits and use cases for schemas in PostgreSQL.</p> <p>To finalize the database setup for Zabbix, we need to configure schema permissions for both the <code>zabbix-srv</code> and <code>zabbix-web</code> users.</p> <p>First, we create a custom schema named <code>zabbix_server</code> and assign ownership to the <code>zabbix-srv</code> user:</p> <pre><code>zabbix=&gt; CREATE SCHEMA zabbix_server AUTHORIZATION \"zabbix-srv\";\n</code></pre> <p>Next, we set the <code>search path</code> to <code>zabbix_server</code> schema so that it's the default for the current session:</p> <pre><code>zabbix=&gt; SET search_path TO \"zabbix_server\";\n</code></pre> <p>To confirm the schema setup, you can list the existing schemas:</p> <pre><code>zabbix=&gt; \\dn\n          List of schemas\n     Name      |       Owner\n---------------+-------------------\n public        | pg_database_owner\n zabbix_server | zabbix-srv\n(2 rows)\n</code></pre> <p>At this point, the <code>zabbix-srv</code> user has full access to the schema, but the <code>zabbix-web</code> user still needs appropriate permissions to connect and interact with the database. First, we grant <code>USAGE</code> privileges on the schema to allow <code>zabbix-web</code> to connect:</p> <pre><code>zabbix=# GRANT USAGE ON SCHEMA zabbix_server TO \"zabbix-web\";\n</code></pre> <p>However, <code>zabbix-web</code> still cannot perform any operations on the tables or sequences. To allow basic data interaction without giving too many privileges, grant the following permissions:</p> <ul> <li>For tables: SELECT, INSERT, UPDATE, and DELETE.</li> <li>For sequences: SELECT and UPDATE.</li> </ul> <pre><code>zabbix=# GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA zabbix_server TO \"zabbix-web\";\n</code></pre> <pre><code>zabbix=# GRANT SELECT, UPDATE ON ALL SEQUENCES IN SCHEMA zabbix_server TO \"zabbix-web\";\n</code></pre>"},{"location":"ch01-zabbix-components/basic-installation/#populate-the-zabbix-db_1","title":"Populate the Zabbix DB","text":"<p>Now, the <code>zabbix-web</code> user has appropriate access to interact with the schema while maintaining security by limiting permissions to essential operations.</p> <p>With the users and permissions set up correctly, you can now populate the database with the Zabbix schema created and other required elements. Follow these steps:</p> <ul> <li>Execute the SQL file to populate the database. Run the following command in the <code>psql</code> shell:</li> </ul> Warning <p>Make sure you did previous steps carefully so that you have selected the correct search_path.</p> <pre><code>sql zabbix=# \\i /usr/share/zabbix/sql-scripts/postgresql/server.sql\n</code></pre> Warning <p>Depending on your hardware or VM performance, this process can take anywhere from a few seconds to several minutes. Please be patient and avoid cancelling the operation.</p> <ul> <li>Monitor the progress as the script runs. You will see output similar to:</li> </ul> <pre><code>zabbix=&gt; \\i /usr/share/zabbix/sql-scripts/postgresql/server.sql\nCREATE TABLE\nCREATE INDEX\nCREATE TABLE\nCREATE INDEX\nCREATE TABLE\n...\n...\n...\nINSERT 0 10444\nDELETE 90352\nCOMMIT\n</code></pre> <p>Once the script completes and you return to the <code>zabbix=#</code> prompt, the database should be successfully populated with all the required tables, schemas, images, and other elements needed for Zabbix.</p> Note <p>If you encounter the following error during the SQL import:  <code>vbnet psql:/usr/share/zabbix/sql-scripts/postgresql/server.sql:7: ERROR: no schema has been selected to create in</code> It indicates that the search_path setting might not have been correctly applied. This setting is crucial because it specifies the schema where the tables and other objects should be created. By correctly setting the search path, you ensure that the SQL script will create tables and other objects in the intended schema.</p> <p>To ensure that the Zabbix tables were created successfully and have the correct permissions, you can verify the table list and their ownership using the <code>psql</code> command:</p> <ul> <li>List the Tables: Use the following command to list all tables in the <code>zabbix_server</code> schema:</li> </ul> <pre><code>sql zabbix=# \\dt\n</code></pre> <p>You should see a list of tables with their schema, name, type, and owner. For example:</p> <pre><code>zabbix=&gt; \\dt\n                        List of relations\n    Schema     |            Name            | Type  |   Owner\n---------------+----------------------------+-------+------------\n zabbix_server | acknowledges               | table | zabbix-srv\n zabbix_server | actions                    | table | zabbix-srv\n zabbix_server | alerts                     | table | zabbix-srv\n zabbix_server | auditlog                   | table | zabbix-srv\n zabbix_server | autoreg_host               | table | zabbix-srv\n zabbix_server | changelog                  | table | zabbix-srv\n zabbix_server | conditions                 | table | zabbix-srv\n...\n...\n...\n zabbix_server | valuemap                   | table | zabbix-srv\n zabbix_server | valuemap_mapping           | table | zabbix-srv\n zabbix_server | widget                     | table | zabbix-srv\n zabbix_server | widget_field               | table | zabbix-srv\n(203 rows)\n</code></pre> <ul> <li>Verify Permissions: Confirm that the zabbix-srv user owns the tables and has the necessary permissions. You can check permissions for specific tables using the \\dp command:</li> </ul> <pre><code>sql zabbix=# \\dp zabbix_server.*\n</code></pre> <p>This will display the access privileges for all tables in the <code>zabbix_server</code> schema. Ensure that <code>zabbix-srv</code> has the required privileges.</p> <p>If everything looks correct, your tables are properly created and the <code>zabbix-srv</code> user has the appropriate ownership and permissions. If you need to adjust any permissions, you can do so using the GRANT commands as needed.</p> Note <p>If you prefer not to set the search path manually each time you log in as the <code>zabbix-srv</code> user, you can configure PostgreSQL to automatically use the desired search path. Run the following SQL command to set the default search path for the <code>zabbix-srv</code> role:</p> <p>sql zabbix=&gt; ALTER ROLE \"zabbix-srv\" SET search_path = \"$user\", public, zabbix_server;</p> <p>This command ensures that every time the <code>zabbix-srv</code> user connects to the database, the <code>search_path</code> is automatically set to include <code>$user</code>, <code>public</code>, and <code>zabbix_server</code>.</p> <p>If you are ready you can exit the database and return as user root.</p> <pre><code>zabbix=&gt; \\q\n</code></pre> <p>If we want our Zabbix server to be able to connect to our DB then we also need to open our firewall port.</p> <p>RedHat</p> <pre><code># firewall-cmd --add-port=5432/tcp --permanent\n# firewall-cmd --reload\n</code></pre> <p>Ubuntu</p> <pre><code># sudo ufw allow 5432/tcp\n</code></pre> Note <p>Make sure your DB is listening on the correct IP and not on 127.0.0.1. You could add the following files to your config file. This would allow MariaDB to listen on all interfaces. Best to limit it only to the needed IP.</p> <p>/etc/mysql/mariadb.cnf</p> <p>[mariadb] log_error=/var/log/mysql/mariadb.err log_warnings=3 bind-address = 0.0.0.0</p> <p>This concludes our installation of the PostgreSQL database.</p>"},{"location":"ch01-zabbix-components/basic-installation/#installing-the-zabbix-server-for-mariadbmysql","title":"Installing the Zabbix server for MariaDB/Mysql","text":"<p>Before proceeding with the installation of your Zabbix server, ensure that the server is properly configured, as outlined in the previous section System Requirements</p> <p>Another critical step at this stage if you use RedHat based systems is disabling SELinux, which can interfere with the installation and operation of Zabbix. We will revisit SELinux at the end of this chapter once our installation is finished.</p> <p>To check the current status of SELinux, you can use the following command: `sestatus``</p> <pre><code># sestatus\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   enforcing\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre> <p>As shown, the system is currently in enforcing mode. To temporarily disable SELinux, you can run the following command: <code>setenforce 0</code></p> <pre><code># setenforce 0\n# sestatus\n\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre> <p>Now, as you can see, the mode is switched to permissive. However, this change is not persistent across reboots. To make it permanent, you need to modify the SELinux configuration file located at <code>/etc/selinux/config</code>. Open the file and replace enforcing with <code>permissive</code>.</p> <p>Alternatively, you can achieve the same result more easily by running the following command:</p> <p>RedHat</p> <pre><code># sed -i 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config\n</code></pre> <p>This line will alter the configuration file for you. So when we run <code>sestatus</code> again we will see that we are in <code>permissive</code> mode and that our configuration file is also in permissive mode.</p> <pre><code># sestatus\n\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          permissive\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre>"},{"location":"ch01-zabbix-components/basic-installation/#adding-the-zabbix-repository","title":"Adding the Zabbix repository","text":"<p>From the Zabbix Download page https://www.zabbix.com/download, select the appropriate Zabbix version you wish to install. In this case, we will be using Zabbix 8.0 LTS. Additionally, ensure you choose the correct OS distribution for your environment, which will be Rocky Linux 9 or Ubuntu 24.04 in our case.</p> <p>We will be installing the Zabbix Server along with NGINX as the web server for the front-end. Make sure to download the relevant packages for your chosen configuration.</p> <p></p> <p>If you make use of a RHEL based system like Rocky then the first step is to disable the Zabbix packages provided by the EPEL repository, if it's installed on your system. To do this, edit the <code>/etc/yum.repos.d/epel.repo</code> file and add the following statement to disable the EPEL repository by default:</p> <p>RedHat</p> <pre><code>[epel]\n...\nexcludepkgs=zabbix*\n</code></pre> Tip <p>It's considered bad practice to keep the EPEL repository enabled all the time, as it may cause conflicts by unintentionally overwriting or installing unwanted packages. Instead, it's safer to enable the repository only when needed, by using the following command during installations: dnf install --enablerepo=epel  This ensures that EPEL is only enabled when explicitly required. <p>Next, we will install the Zabbix repository on our operating system. After adding the Zabbix repository, it is recommended to perform a repository cleanup to remove old cache files and ensure the repository metadata is up to date. You can do this by running:</p> <p>RedHat</p> <pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\n# dnf clean all\n</code></pre> <p>Ubuntu</p> <pre><code># sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# sudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# sudo apt update\n</code></pre> <p>This will refresh the repository metadata and prepare the system for Zabbix installation.</p> Note <p>A repository in Linux is a configuration that allows you to access and install software packages. You can think of it like an \"app store\" where you find and download software from a trusted source, in this case, the Zabbix repository. Many repositories are available, but it's important to only add those you trust. The safest practice is to stick to the repositories provided by your operating  system and only add additional ones when you're sure they are both trusted and necessary.</p> <p>For our installation, the Zabbix repository is provided by the vendor itself, making it a trusted source. Another popular and safe repository for RedHat-based systems is EPEL (Extra Packages for Enterprise Linux), which is commonly used in enterprise environments. However, always exercise caution when adding new repositories to ensure system security and stability.</p>"},{"location":"ch01-zabbix-components/basic-installation/#configuring-the-zabbix-server-for-mysqlmariadb","title":"Configuring the Zabbix server for MySQL/MariaDB","text":"<p>Now that we've added the Zabbix repository with the necessary software, we are ready to install both the Zabbix server and the web server. Keep in mind that the web server doesn't need to be installed on the same machine as the Zabbix server; they can be hosted on separate systems if desired.</p> <p>To install the Zabbix server and the web server components for MySQL/MariaDB, run the following command:</p> <p>RedHat</p> <pre><code># dnf install zabbix-server-mysql -y\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt install zabbix-server-mysql\n</code></pre> <p>After successfully installing the Zabbix server and frontend packages, we need to configure the Zabbix server to connect to the database. This requires modifying the Zabbix server configuration file. Open the <code>/etc/zabbix/zabbix_server.conf</code> file and update the following lines to match your database configuration:</p> <p>RedHat and Ubuntu</p> <pre><code>sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre> <pre><code>DBHost=&lt;database-host&gt;\nDBName=&lt;database-name&gt;\nDBUser=&lt;database-user&gt;\nDBPassword=&lt;database-password&gt;\n</code></pre> <p>Replace , , , and  with the appropriate values for your setup. This ensures that the Zabbix server can communicate with your database. <p>Ensure that there is no # (comment symbol) in front of the configuration parameters, as Zabbix will treat lines beginning with # as comments, ignoring them during execution. Additionally, double-check for duplicate configuration lines; if there are multiple lines with the same parameter, Zabbix will use the value from the last occurrence.</p> <p>For our setup, the configuration will look like this:</p> <pre><code>DBHost=&lt;ip or dns of your MariaDB server&gt;\nDBName=zabbix\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=3306\n</code></pre> <p>In this example:</p> <ul> <li>DBHost refers to the host where your database is running (use localhost if it's on the same machine).</li> <li>DBName is the name of the Zabbix database.</li> <li>DBUser is the database user.</li> <li>DBPassword is the password for the database user.</li> </ul> <p>Make sure the settings reflect your environment's database configuration.</p> Note <p>The Zabbix server configuration file offers an option to include additional configuration files for custom parameters. For a production environment, it's often best to avoid altering the original configuration file directly. Instead, you can create and include a separate configuration file for any additional or modified parameters. This approach ensures that your original configuration file remains untouched, which is particularly useful when performing upgrades or managing configurations with tools like Ansible, Puppet, or SaltStack. </p> <p>To enable this feature, remove the # from the line:</p> <pre><code># Include=/usr/local/etc/zabbix_server.conf.d/*.conf\n</code></pre> <p>Ensure the path <code>/usr/local/etc/zabbix_server.conf.d/</code> exists and create a custom configuration file in this directory. This file should be readable by the <code>zabbix</code> user. By doing so, you can add or modify parameters without modifying the default configuration file, making system management and upgrades smoother.</p> <p>With the Zabbix server configuration updated to connect to your database, you can now start and enable the Zabbix server service. Run the following command to enable the Zabbix server and ensure it starts automatically on boot:</p> <p>Redhat and Ubuntu</p> <pre><code># sudo systemctl enable zabbix-server --now\n</code></pre> <p>This command will start the Zabbix server service immediately and configure it to launch on system startup. To verify that the Zabbix server is running correctly, check the log file for any messages. You can view the latest entries in the <code>Zabbix server</code> log file using:</p> <pre><code>tail /var/log/zabbix/zabbix_server.log\n</code></pre> <p>Look for messages indicating that the server has started successfully. If there are any issues, the log file will provide details to help with troubleshooting.</p> <pre><code>12074:20250225:145333.529 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12074:20250225:145333.530 ****** Enabled features ******\n12074:20250225:145333.530 SNMP monitoring:           YES\n12074:20250225:145333.530 IPMI monitoring:           YES\n12074:20250225:145333.530 Web monitoring:            YES\n12074:20250225:145333.530 VMware monitoring:         YES\n12074:20250225:145333.530 SMTP authentication:       YES\n12074:20250225:145333.530 ODBC:                      YES\n12074:20250225:145333.530 SSH support:               YES\n12074:20250225:145333.530 IPv6 support:              YES\n12074:20250225:145333.530 TLS support:               YES\n12074:20250225:145333.530 ******************************\n12074:20250225:145333.530 using configuration file: /etc/zabbix/zabbix_server.conf\n12074:20250225:145333.545 current database version (mandatory/optional): 07020000/07020000\n12074:20250225:145333.545 required mandatory version: 07020000\n12075:20250225:145333.557 starting HA manager\n12075:20250225:145333.566 HA manager started in active mode\n12074:20250225:145333.567 server #0 started [main process]\n12076:20250225:145333.567 server #1 started [service manager #1]\n12077:20250225:145333.567 server #2 started [configuration syncer #1]\n12078:20250225:145333.718 server #3 started [alert manager #1]\n12079:20250225:145333.719 server #4 started [alerter #1]\n12080:20250225:145333.719 server #5 started [alerter #2]\n12081:20250225:145333.719 server #6 started [alerter #3]\n12082:20250225:145333.719 server #7 started [preprocessing manager #1]\n12083:20250225:145333.719 server #8 started [lld manager #1]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <pre><code>12068:20250225:145309.018 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12068:20250225:145309.018 ****** Enabled features ******\n12068:20250225:145309.018 SNMP monitoring:           YES\n12068:20250225:145309.018 IPMI monitoring:           YES\n12068:20250225:145309.018 Web monitoring:            YES\n12068:20250225:145309.018 VMware monitoring:         YES\n12068:20250225:145309.018 SMTP authentication:       YES\n12068:20250225:145309.018 ODBC:                      YES\n12068:20250225:145309.018 SSH support:               YES\n12068:20250225:145309.018 IPv6 support:              YES\n12068:20250225:145309.018 TLS support:               YES\n12068:20250225:145309.018 ******************************\n12068:20250225:145309.018 using configuration file: /etc/zabbix/zabbix_server.conf\n12068:20250225:145309.027 [Z3005] query failed: [1146] Table 'zabbix.users' doesn't exist [select userid from users limit 1]\n12068:20250225:145309.027 cannot use database \"zabbix\": database is not a Zabbix database\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <pre><code># systemctl status zabbix-server\n\u25cf zabbix-server.service - Zabbix Server\n     Loaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\n     Active: active (running) since Tue 2025-02-25 14:53:33 CET; 26min ago\n   Main PID: 12074 (zabbix_server)\n      Tasks: 77 (limit: 24744)\n     Memory: 71.5M\n        CPU: 18.535s\n     CGroup: /system.slice/zabbix-server.service\n             \u251c\u250012074 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n             \u251c\u250012075 \"/usr/sbin/zabbix_server: ha manager\"\n             \u251c\u250012076 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.027667 sec during 5.042628 sec]\"\n             \u251c\u250012077 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.051345 sec, idle 10 sec]\"\n             \u251c\u250012078 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.030391 sec during 5.031944 sec]\"\n             \u251c\u250012079 \"/usr/sbin/zabbix_server: alerter #1 started\"\n             \u251c\u250012080 \"/usr/sbin/zabbix_server: alerter #2 started\"\n             \u251c\u250012081 \"/usr/sbin/zabbix_server: alerter #3 started\"\n             \u251c\u250012082 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 0, processed 0 values, idle 5.023818 sec during 5.024830 sec]\"\n             \u251c\u250012083 \"/usr/sbin/zabbix_server: lld manager #1 [processed 0 LLD rules, idle 5.017278sec during 5.017574 sec]\"\n             \u251c\u250012084 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 21.031209 sec during 21.063879 sec]\"\n             \u251c\u250012085 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 43.195541 sec during 43.227934 sec]\"\n             \u251c\u250012086 \"/usr/sbin/zabbix_server: housekeeper [startup idle for 30 minutes]\"\n             \u251c\u250012087 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.017595 sec, idle 59 sec]\"\n             \u251c\u250012088 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000071 sec, idle 5 sec]\"\n             \u251c\u250012089 \"/usr/sbin/zabbix_server: browser poller #1 [got 0 values in 0.000066 sec, idle 5 sec]\"\n             \u251c\u250012090 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0 unsaved checks]\"\n             \u251c\u250012091 \"/usr/sbin/zabbix_server: history syncer #1 [processed 4 values, 3 triggers in 0.027382 sec, idle 1 sec]\"\n             \u251c\u250012092 \"/usr/sbin/zabbix_server: history syncer #2 [processed 0 values, 0 triggers in 0.000077 sec, idle 1 sec]\"\n             \u251c\u250012093 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000076 sec, idle 1 sec]\"\n             \u251c\u250012094 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000020 sec, idle 1 sec]\"\n             \u251c\u250012095 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.011627 sec, idle 3 sec]\"\n             \u251c\u250012096 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000081 sec, idle 5 sec]\"\n             \u251c\u250012097 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000068 sec, idle 1 sec]\"\n</code></pre> <p>This concludes our chapter on installing and configuring the Zabbix server with Mariadb. </p>"},{"location":"ch01-zabbix-components/basic-installation/#installing-the-zabbix-server-for-postgresql","title":"Installing the Zabbix server for PostgreSQL","text":"<p>Before proceeding with the installation of your Zabbix server, ensure that the server is properly configured, as outlined in the previous section System Requirements</p> <p>Another critical step at this stage if you use RedHat based systems is disabling SELinux, which can interfere with the installation and operation of Zabbix. We will revisit SELinux at the end of this chapter once our installation is finished.</p> <p>To check the current status of SELinux, you can use the following command: `sestatus``</p> <pre><code># sestatus\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   enforcing\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre> <p>As shown, the system is currently in enforcing mode. To temporarily disable SELinux, you can run the following command: <code>setenforce 0</code></p> <pre><code># setenforce 0\n# sestatus\n\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre> <p>Now, as you can see, the mode is switched to permissive. However, this change is not persistent across reboots. To make it permanent, you need to modify the SELinux configuration file located at <code>/etc/selinux/config</code>. Open the file and replace enforcing with <code>permissive</code>.</p> <p>Alternatively, you can achieve the same result more easily by running the following command:</p> <p>RedHat</p> <pre><code># sed -i 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config\n</code></pre> <p>This line will alter the configuration file for you. So when we run <code>sestatus</code> again we will see that we are in <code>permissive</code> mode and that our configuration file is also in permissive mode.</p> <pre><code># sestatus\n\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          permissive\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre>"},{"location":"ch01-zabbix-components/basic-installation/#adding-the-zabbix-repository_1","title":"Adding the Zabbix repository","text":"<p>From the Zabbix Download page https://www.zabbix.com/download, select the appropriate Zabbix version you wish to install. In this case, we will be using Zabbix 8.0 LTS. Additionally, ensure you choose the correct OS distribution for your environment, which will be Rocky Linux 9 or Ubuntu 24.04 in our case.</p> <p>We will be installing the Zabbix Server along with NGINX as the web server for the front-end. Make sure to download the relevant packages for your chosen configuration.</p> <p></p> <p>If you make use of a RHEL based system like Rocky then the first step is to disable the Zabbix packages provided by the EPEL repository, if it's installed on your system. To do this, edit the <code>/etc/yum.repos.d/epel.repo</code> file and add the following statement to disable the EPEL repository by default:</p> <p>RedHat</p> <pre><code>[epel]\n...\nexcludepkgs=zabbix*\n</code></pre> Tip <p>It's considered bad practice to keep the EPEL repository enabled all the time, as it may cause conflicts by unintentionally overwriting or installing unwanted packages. Instead, it's safer to enable the repository only when needed, by using the following command during installations: dnf install --enablerepo=epel  This ensures that EPEL is only enabled when explicitly required. <p>Next, we will install the Zabbix repository on our operating system. After adding the Zabbix repository, it is recommended to perform a repository cleanup to remove old cache files and ensure the repository metadata is up to date. You can do this by running:</p> <p>RedHat</p> <pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\n# dnf clean all\n</code></pre> <p>Ubuntu</p> <pre><code># sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# sudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# sudo apt update\n</code></pre> <p>This will refresh the repository metadata and prepare the system for Zabbix installation.</p> Note <p>A repository in Linux is a configuration that allows you to access and install software packages. You can think of it like an \"app store\" where you find and download software from a trusted source, in this case, the Zabbix repository. Many repositories are available, but it's important to only add those you trust. The safest practice is to stick to the repositories provided by your operating system and only add additional ones when you're sure they are both trusted and necessary.</p> <p>For our installation, the Zabbix repository is provided by the vendor itself, making it a trusted source. Another popular and safe repository for RedHat-based systems is EPEL (Extra Packages for Enterprise Linux), which is commonly used in enterprise environments. However, always exercise caution when adding new repositories to ensure system security and stability.</p>"},{"location":"ch01-zabbix-components/basic-installation/#configuring-the-zabbix-server-for-postgresql","title":"Configuring the Zabbix server for PostgreSQL.","text":"<p>We are ready to install both the Zabbix server and the web server. Keep in mind that the web server doesn't need to be installed on the same machine as the Zabbix server; they can be hosted on separate systems if desired.</p> <p>To install the Zabbix server and the web server components for PostgreSQL, run the following command:</p> <p>RedHat</p> <pre><code># dnf install zabbix-server-pgsql -y\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt install zabbix-server-pgsql\n</code></pre> <p>After successfully installing the Zabbix server packages, we need to configure the Zabbix server to connect to the database. This requires modifying the Zabbix server configuration file. Open the <code>/etc/zabbix/zabbix_server.conf</code> file and update the following lines to match your database configuration:</p> <p>RedHat and Ubuntu</p> <pre><code>#sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre> <pre><code>DBHost=&lt;database-host&gt;\nDBName=&lt;database-name&gt;\nDBSchema=&lt;database-schema&gt;\nDBUser=&lt;database-user&gt;\nDBPassword=&lt;database-password&gt;\n</code></pre> <p>Replace <code>database-host</code>, <code>database-name</code>, <code>database-user</code>,<code>database-schema</code> and <code>database-password</code> with the appropriate values for your setup. This ensures that the Zabbix server can communicate with your database.</p> <p>Ensure that there is no # (comment symbol) in front of the configuration parameters, as Zabbix will treat lines beginning with # as comments, ignoring them during execution. Additionally, double-check for duplicate configuration lines; if there are multiple lines with the same parameter, Zabbix will use the value from the last occurrence.</p> <p>For our setup, the configuration will look like this:</p> <pre><code>DBHost=&lt;ip or dns of your PostgreSQL server&gt;\nDBName=zabbix\nDBSchema=zabbix_server\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=5432\n</code></pre> <p>In this example:</p> <ul> <li>DBHost refers to the host where your database is running (use localhost if it's on the same machine).</li> <li>DBName is the name of the Zabbix database.</li> <li>DBUser is the database user.</li> <li>DBPassword is the password for the database user.</li> </ul> <p>Make sure the settings reflect your environment's database configuration.</p> Note <p>The Zabbix server configuration file offers an option to include additional configuration files for custom parameters. For a production environment, it's often best to avoid altering the original configuration file directly. Instead, you can create and include a separate configuration file for any additional or modified parameters. This approach ensures that your original configuration file remains untouched, which is particularly useful when performing upgrades or managing configurations with tools like Ansible, Puppet, or SaltStack.</p> <p>To enable this feature, remove the # from the line:</p> <pre><code># Include=/usr/local/etc/zabbix_server.conf.d/*.conf\n</code></pre> <p>Ensure the path <code>/usr/local/etc/zabbix_server.conf.d/</code> exists and create a custom configuration file in this directory. This file should be readable by the <code>zabbix</code> user. By doing so, you can add or modify parameters without modifying the default configuration file, making system management and upgrades smoother.</p> <p>With the Zabbix server configuration updated to connect to your database, you can now start and enable the Zabbix server service. Run the following command to enable the Zabbix server and ensure it starts automatically on boot:</p> <p>Redhat</p> <pre><code>systemctl enable zabbix-server --now\n</code></pre> <p>Ubuntu</p> <pre><code>sudo systemctl enable zabbix-server --now\n</code></pre> <p>This command will start the Zabbix server service immediately and configure it to launch on system startup. To verify that the Zabbix server is running correctly, check the log file for any messages. You can view the latest entries in the <code>Zabbix server</code> log file using:</p> <pre><code>tail /var/log/zabbix/zabbix_server.log\n</code></pre> <p>Look for messages indicating that the server has started successfully. If there are any issues, the log file will provide details to help with troubleshooting.</p> <pre><code>12074:20250225:145333.529 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12074:20250225:145333.530 ****** Enabled features ******\n12074:20250225:145333.530 SNMP monitoring:           YES\n12074:20250225:145333.530 IPMI monitoring:           YES\n12074:20250225:145333.530 Web monitoring:            YES\n12074:20250225:145333.530 VMware monitoring:         YES\n12074:20250225:145333.530 SMTP authentication:       YES\n12074:20250225:145333.530 ODBC:                      YES\n12074:20250225:145333.530 SSH support:               YES\n12074:20250225:145333.530 IPv6 support:              YES\n12074:20250225:145333.530 TLS support:               YES\n12074:20250225:145333.530 ******************************\n12074:20250225:145333.530 using configuration file: /etc/zabbix/zabbix_server.conf\n12074:20250225:145333.545 current database version (mandatory/optional): 07020000/07020000\n12074:20250225:145333.545 required mandatory version: 07020000\n12075:20250225:145333.557 starting HA manager\n12075:20250225:145333.566 HA manager started in active mode\n12074:20250225:145333.567 server #0 started [main process]\n12076:20250225:145333.567 server #1 started [service manager #1]\n12077:20250225:145333.567 server #2 started [configuration syncer #1]\n12078:20250225:145333.718 server #3 started [alert manager #1]\n12079:20250225:145333.719 server #4 started [alerter #1]\n12080:20250225:145333.719 server #5 started [alerter #2]\n12081:20250225:145333.719 server #6 started [alerter #3]\n12082:20250225:145333.719 server #7 started [preprocessing manager #1]\n12083:20250225:145333.719 server #8 started [lld manager #1]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <pre><code>12068:20250225:145309.018 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12068:20250225:145309.018 ****** Enabled features ******\n12068:20250225:145309.018 SNMP monitoring:           YES\n12068:20250225:145309.018 IPMI monitoring:           YES\n12068:20250225:145309.018 Web monitoring:            YES\n12068:20250225:145309.018 VMware monitoring:         YES\n12068:20250225:145309.018 SMTP authentication:       YES\n12068:20250225:145309.018 ODBC:                      YES\n12068:20250225:145309.018 SSH support:               YES\n12068:20250225:145309.018 IPv6 support:              YES\n12068:20250225:145309.018 TLS support:               YES\n12068:20250225:145309.018 ******************************\n12068:20250225:145309.018 using configuration file: /etc/zabbix/zabbix_server.conf\n12068:20250225:145309.027 [Z3005] query failed: [1146] Table 'zabbix.users' doesn't exist [select userid from users limit 1]\n12068:20250225:145309.027 cannot use database \"zabbix\": database is not a Zabbix database\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <pre><code># systemctl status zabbix-server\n\u25cf zabbix-server.service - Zabbix Server\n     Loaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\n     Active: active (running) since Tue 2025-02-25 14:53:33 CET; 26min ago\n   Main PID: 12074 (zabbix_server)\n      Tasks: 77 (limit: 24744)\n     Memory: 71.5M\n        CPU: 18.535s\n     CGroup: /system.slice/zabbix-server.service\n             \u251c\u250012074 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n             \u251c\u250012075 \"/usr/sbin/zabbix_server: ha manager\"\n             \u251c\u250012076 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.027667 sec during 5.042628 sec]\"\n             \u251c\u250012077 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.051345 sec, idle 10 sec]\"\n             \u251c\u250012078 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.030391 sec during 5.031944 sec]\"\n             \u251c\u250012079 \"/usr/sbin/zabbix_server: alerter #1 started\"\n             \u251c\u250012080 \"/usr/sbin/zabbix_server: alerter #2 started\"\n             \u251c\u250012081 \"/usr/sbin/zabbix_server: alerter #3 started\"\n             \u251c\u250012082 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 0, processed 0 values, idle 5.023818 sec during 5.024830 sec]\"\n             \u251c\u250012083 \"/usr/sbin/zabbix_server: lld manager #1 [processed 0 LLD rules, idle 5.017278sec during 5.017574 sec]\"\n             \u251c\u250012084 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 21.031209 sec during 21.063879 sec]\"\n             \u251c\u250012085 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 43.195541 sec during 43.227934 sec]\"\n             \u251c\u250012086 \"/usr/sbin/zabbix_server: housekeeper [startup idle for 30 minutes]\"\n             \u251c\u250012087 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.017595 sec, idle 59 sec]\"\n             \u251c\u250012088 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000071 sec, idle 5 sec]\"\n             \u251c\u250012089 \"/usr/sbin/zabbix_server: browser poller #1 [got 0 values in 0.000066 sec, idle 5 sec]\"\n             \u251c\u250012090 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0 unsaved checks]\"\n             \u251c\u250012091 \"/usr/sbin/zabbix_server: history syncer #1 [processed 4 values, 3 triggers in 0.027382 sec, idle 1 sec]\"\n             \u251c\u250012092 \"/usr/sbin/zabbix_server: history syncer #2 [processed 0 values, 0 triggers in 0.000077 sec, idle 1 sec]\"\n             \u251c\u250012093 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000076 sec, idle 1 sec]\"\n             \u251c\u250012094 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000020 sec, idle 1 sec]\"\n             \u251c\u250012095 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.011627 sec, idle 3 sec]\"\n             \u251c\u250012096 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000081 sec, idle 5 sec]\"\n             \u251c\u250012097 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000068 sec, idle 1 sec]\"\n</code></pre> <p>This concludes our chapter on installing and configuring the Zabbix server with PostgreSQL.</p>"},{"location":"ch01-zabbix-components/basic-installation/#installing-the-frontend","title":"Installing the frontend","text":"<p>Before configuring the front-end, you need to install the necessary packages. If the Zabbix front-end is hosted on the same server as the Zabbix server, you can install the packages on the same server as is in our case. It's also perfectly possible to install the front-end on another server. In that case you only need to specify the  correct IP addresses and open the correct firewall ports.</p>"},{"location":"ch01-zabbix-components/basic-installation/#installing-the-frontend-with-nginx","title":"Installing the frontend with NGINX","text":"<p>RedHat </p> <pre><code># dnf install zabbix-nginx-conf zabbix-web-mysql -y\nor if you used PostgreSQL\n# dnf install zabbix-nginx-conf zabbix-web-pgsql -y\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt install zabbix-frontend-php php8.3-mysql zabbix-nginx-conf\nor if you use PostgreSQL\n# sudo apt install zabbix-frontend-php php8.3-pgsql zabbix-nginx-conf\n</code></pre> <p>This command will install the front-end packages along with the required dependencies for Nginx. If you are installing the front-end on a different server, make sure to execute this command on that specific machine.</p> <p>If you don't remember how to add the repository, have a look at the topic Adding the zabbix repository</p> <p>First thing we have to do is alter the Nginx configuration file so that we don't use the standard config.</p> <p>RedHat</p> <pre><code># vi /etc/nginx/nginx.conf\n</code></pre> <p>In this configuration file look for the following block that starts with :</p> <pre><code>   server {\n        listen       80;\n        listen       [::]:80;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n</code></pre> <p>Then, comment out the following server block within the configuration file:</p> <pre><code>    server {\n#        listen       80;\n#        listen       [::]:80;\n#        server_name  _;\n#        root         /usr/share/nginx/html;\n</code></pre> <p>The Zabbix configuration file must now be modified to reflect the current environment. Open the following file for editing:</p> <pre><code>vi /etc/nginx/conf.d/zabbix.conf\n</code></pre> <p>And alter the following lines:</p> <pre><code>server {\n        listen          8080;\n        server_name     example.com;\n\n        root    /usr/share/zabbix;\n\n        index   index.php;\n</code></pre> <p>Replace the first 2 lines with the correct port and domain for your front-end in case you don't have a domain you can replace <code>servername</code> with <code>_;</code> like in the example below:</p> <pre><code>server {\n#        listen          8080;\n#        server_name     example.com;\n        listen          80;\n        server_name     _;\n\n        root    /usr/share/zabbix;\n\n        index   index.php;\n</code></pre> <p>The web server and PHP-FPM service are now ready for activation and persistent startup. Execute the following commands to enable and start them immediately:</p> <p>Ubuntu</p> <pre><code># sudo vi /etc/zabbix/nginx.conf\n</code></pre> <p>replace the Following lines:</p> <pre><code>server {\n#        listen          8080;\n#        server_name     example.com;\n</code></pre> <p>with :</p> <pre><code>server {\n        listen          80;\n        server_name     xxx.xxx.xxx.xxx;\n\n</code></pre> <p>where xxx.xxx.xxx.xxx is your IP or DNS name.</p> <p>RedHat</p> <pre><code>systemctl enable php-fpm --now\nsystemctl enable nginx --now\n</code></pre> <p>Ubuntu</p> <pre><code>sudo systemctl enable nginx php8.3-fpm\nsudo systemctl restart nginx php8.3-fpm\n</code></pre> <p>Let's verify if the service is properly started and enabled so that it survives our reboot next time.</p> <p>RedHat and Ubuntu</p> <pre><code># systemctl status nginx\n\n\u25cf nginx.service - The nginx HTTP and reverse proxy server\n     Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; preset: disabled)\n    Drop-In: /usr/lib/systemd/system/nginx.service.d\n             \u2514\u2500php-fpm.conf\n     Active: active (running) since Mon 2023-11-20 11:42:18 CET; 30min ago\n   Main PID: 1206 (nginx)\n      Tasks: 2 (limit: 12344)\n     Memory: 4.8M\n        CPU: 38ms\n     CGroup: /system.slice/nginx.service\n             \u251c\u25001206 \"nginx: master process /usr/sbin/nginx\"\n             \u2514\u25001207 \"nginx: worker process\"\n\nNov 20 11:42:18 zabbix-srv systemd[1]: Starting The nginx HTTP and reverse proxy server...\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: configuration file /etc/nginx/nginx.conf test is successful\nNov 20 11:42:18 zabbix-srv systemd[1]: Started The nginx HTTP and reverse proxy server.\n\n</code></pre> <p>With the service operational and configured for automatic startup, the final preparatory step involves adjusting the firewall to permit inbound HTTP traffic. Execute the following commands:</p> <p>RedHat</p> <pre><code>firewall-cmd --add-service=http --permanent\nfirewall-cmd --reload\n</code></pre> <p>Ubuntu</p> <pre><code># sudo ufw allow 80/tcp\n</code></pre> <p>Open your browser and go to the url or ip of your front-end :</p> <pre><code>http://&lt;ip or dns of the zabbix frontend server&gt;/\n</code></pre> <p>If all goes well you should be greeted with a Zabbix welcome page. In case you have an error check the configuration again or have a look at the nginx log file :</p> <pre><code>/var/log/nginx/error.log\n</code></pre> <p>or run the following command :</p> <pre><code>journalctl -xe\n</code></pre> <p>This should help you in locating the errors you made.</p> <p>Upon accessing the appropriate URL, a page resembling the one illustrated below should appear:</p> <p></p> <p>The Zabbix frontend presents a limited array of available localizations, as shown.</p> <p></p> <p>What if we want to install Chinese as language or another language from the list? Run the next command to get a list of all locales available for your OS.</p> <p>RedHat</p> <pre><code>dnf list glibc-langpack-*\n</code></pre> <p>Ubuntu</p> <pre><code>apt-cache search language-pack\n</code></pre> <p>This will give you on Redhat based systems a list like:</p> <pre><code>Installed Packages\nglibc-langpack-en.x86_64\nAvailable Packages\nglibc-langpack-aa.x86_64\n...\n\nglibc-langpack-zu.x86_64\n\n\nOn Ubuntu it will look like \nlanguage-pack-kab - translation updates for language Kabyle\nlanguage-pack-kab-base - translations for language Kabyle\nlanguage-pack-kn - translation updates for language Kannada\nlanguage-pack-kn-base - translations for language Kannada\n...\n\nlanguage-pack-ko - translation updates for language Korean\nlanguage-pack-ko-base - translations for language Korean\nlanguage-pack-ku - translation updates for language Kurdish\nlanguage-pack-ku-base - translations for language Kurdish\nlanguage-pack-lt - translation updates for language Lithuanian\n</code></pre> <p>Let's search for our Chinese locale to see if it is available. As you can see the code starts with zh.</p> <p>RedHat</p> <pre><code># dnf list glibc-langpack-* | grep zh\n\nglibc-langpack-zh.x86_64\nglibc-langpack-lzh.x86_64\n</code></pre> <p>Ubuntu</p> <pre><code>apt-cache search language-pack | grep -i zh\n</code></pre> <p>The command outputs two lines; however, given the identified language code, 'zh_CN,' only the first package requires installation.</p> <p>RedHat</p> <pre><code># dnf install glibc-langpack-zh.x86_64 -y\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt install language-pack-zh-hans\n# sudo systemctl restart nginx php8.3-fpm\n</code></pre> <p>When we return now to our front-end we are able to select the Chinese language, after a reload of our browser.</p> <p></p> Note <p>If your preferred language is not available in the Zabbix front-end, don't worry it simply means that the translation is either incomplete or not yet available. Zabbix is an open-source project that relies on community contributions for translations, so you can help improve it by contributing your own translations.</p> <p>Visit the translation page at https://translate.zabbix.com/ to assist with the translation efforts. Once your translation is complete and reviewed, it will be included in the next minor patch version of Zabbix. Your contributions help make Zabbix more accessible and improve the overall user experience for everyone.</p> <p>When you're satisfied with the available translations, click <code>Next</code>. You will  then be taken to a screen to verify that all prerequisites are satisfied. If any prerequisites are not fulfilled, address those issues first. However, if everything is in order, you should be able to proceed by clicking <code>Next</code>.</p> <p></p> <p>On the next page, you'll configure the database connection parameters:</p> <ol> <li><code>Select the Database Type</code>: Choose either MySQL or PostgreSQL depending on your setup.</li> <li><code>Enter the Database Host</code>: Provide the IP address or DNS name of your database    server. Use port 3306 for MariaDB/MySQL or 5432 for PostgreSQL.</li> <li><code>Enter the Database Name</code>: Specify the name of your database. In our case, it    is zabbix. If you are using PostgreSQL, you will also need to provide the schema    name, which is zabbix_server in our case.</li> <li><code>Enter the Database User</code>: Input the database user created for the web front-end,    such as zabbix-web. Enter the corresponding password for this user.</li> </ol> <p>Ensure that the <code>Database TLS encryption</code> option is not selected, and then click <code>Next step</code> to proceed.</p> <p></p> <p>You're almost finished with the setup! The final steps involve:</p> <ol> <li><code>Assigning an Instance Name</code>: Choose a descriptive name for your Zabbix instance.</li> <li><code>Selecting the Timezone</code>: Choose the timezone that matches your location or your preferred time zone for the Zabbix interface.</li> <li><code>Setting the Default Time Format</code>: Select the default time format you prefer to use.</li> </ol> <p>Once these settings are configured, you can complete the setup and proceed with any final configuration steps as needed.</p> Note <p>It's a good practice to set your Zabbix server to the UTC timezone, especially when managing systems across multiple timezones. Using UTC helps ensure consistency in time-sensitive actions and events, as the server\u2019s timezone is often used for calculating and displaying time-related information.</p> <p></p> <p>After clicking <code>Next step</code> again, you'll be taken to a page confirming that the configuration was successful. Click <code>Finish</code> to complete the setup process.</p> <p></p> <p>We are now ready to login :</p> <p></p> <p>Login : Admin Password : zabbix</p> <p>This concludes our topic on setting up the Zabbix server. If you're interested in securing your front-end, I recommend checking out the topic Securing Zabbix for additional guidance and best practices.</p> Note <p>If you are not able to safe your configuration at the end make sure SeLinux is disabled. It is possible that it will block access to certain files or even the database.</p>"},{"location":"ch01-zabbix-components/basic-installation/#conclusion","title":"Conclusion","text":"<p>With this, we conclude our journey through setting up Zabbix and configuring it with MySQL or PostgreSQL on RHEL-based systems and Ubuntu. We have walked through the essential steps of preparing the environment, installing the necessary components, and ensuring a fully functional Zabbix server. From database selection to web frontend configuration with Nginx, each decision has been aimed at creating a robust and efficient monitoring solution.</p> <p>At this stage, your Zabbix instance is operational, providing the foundation for advanced monitoring and alerting. In the upcoming chapters, we will delve into fine-tuning Zabbix, optimizing performance, and exploring key features that transform it into a powerful observability platform.</p> <p>Now that your Zabbix environment is up and running, let\u2019s take it to the next level.</p>"},{"location":"ch01-zabbix-components/basic-installation/#questions","title":"Questions","text":"<ol> <li>Should I choose MySQL or PostgreSQL as the database back-end? Why?</li> <li>What version of Zabbix should I install for compatibility and stability?</li> <li>What port does my DB use ?</li> <li>What Zabbix logs should I check for troubleshooting common issues?</li> </ol>"},{"location":"ch01-zabbix-components/basic-installation/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.zabbix.com/download</li> <li>https://www.zabbix.com/documentation/current/en/manual</li> <li>https://www.zabbix.com/documentation/current/en/manual/installation/requirements</li> <li>https://www.zabbix.com/documentation/current/en/manual/installation/install_from_packages</li> </ul>"},{"location":"ch01-zabbix-components/chapter/","title":"Zabbix components, basic functions and installation","text":"<p>In this chapter, we expand on the foundational knowledge from the \"Getting Started\" section to provide a comprehensive guide for both beginners who are installing Zabbix for the first time and advanced users who seek to optimize their setup. We\u2019ll not only cover the essential steps for a basic installation but also delve into the finer details of Zabbix architecture, components, and best practices.</p> <p>We\u2019ll start by walking through the installation process, ensuring you have a solid foundation to build on. From there, we'll move into the core components of Zabbix, what each one does, how they interact, and why they are crucial to your monitoring solution. You'll learn about subprocesses, their roles, and how they contribute to Zabbix efficiency and reliability.</p> <p>Additionally, we\u2019ll explore good architectural choices that can make or break your monitoring setup. Whether you're managing a small network or a large-scale infrastructure, making the right design decisions early on will pay dividends in scalability, performance, and maintenance.</p> <p>This chapter is designed to cater to a wide range of readers. If you're simply looking to get Zabbix up and running, you'll find clear, step-by-step instructions. For those wanting to dive deeper, we'll provide detailed insights into how Zabbix functions under the hood, helping you make informed choices that align with your needs and future growth plans.</p> <p>By the end of this chapter, you will have not only a working Zabbix installation but also a thorough understanding of its components and architecture, empowering you to leverage Zabbix to its fullest potential, regardless of the complexity of your environment.</p> <p>Let\u2019s embark on this detailed journey into Zabbix and equip ourselves with the knowledge to both start and optimize a powerful monitoring solution.</p>"},{"location":"ch01-zabbix-components/ha-setup/","title":"HA Setup","text":"<p>In this section, we will set up Zabbix in a High Availability (HA) configuration. This feature, introduced in Zabbix 6, is a crucial enhancement that ensures continued monitoring even if a Zabbix server fails. With HA, when one Zabbix server goes down, another can take over seamlessly.</p> <p>For this guide, we will use two Zabbix servers and one database, but the setup allows for adding more zabbix servers if necessary.</p> <p></p> <p>It's important to note that Zabbix HA setup is straightforward, providing redundancy without complex features like load balancing.</p> <p>Just as in our basic configuration, we will document key details for the servers in this HA setup. Below is the list of servers and some place to add their respective IP addresses for your convenience :</p> Server IP Address Zabbix Server 1 Zabbix Server 2 Database Virtual IP Note <p>Our database (DB) in this setup is not configured for HA. Since it's not a Zabbix component, you will need to implement your own solution for database HA, such as a HA SAN or a database cluster setup. A DB cluster configuration is out of the scope of this guide and unrelated to Zabbix, so it will not be covered here.</p>"},{"location":"ch01-zabbix-components/ha-setup/#installing-the-database","title":"Installing the Database","text":"<p>Refer to the Basic Installation chapter for detailed instructions on setting up the database. That chapter provides step-by-step guidance on installing either a PostgreSQL or MariaDB database on a dedicated node running Ubuntu or Rocky Linux. The same installation steps apply when configuring the database for this setup.</p>"},{"location":"ch01-zabbix-components/ha-setup/#installing-the-zabbix-cluster","title":"Installing the Zabbix cluster","text":"<p>Setting up a Zabbix cluster involves configuring multiple Zabbix servers to work together, providing high availability. While the process is similar to setting up a single Zabbix server, there are additional configuration steps required to enable HA (High Availability).</p> <p>Add the Zabbix Repositories to your servers.</p> <p>First, add the Zabbix repository to both of your Zabbix servers:</p> <p>Redhat</p> <pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\n# dnf clean all\n</code></pre> <p>Ubuntu</p> <pre><code># wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# apt update\n</code></pre> <p>Once this is done we can install the zabbix server packages.</p> <p>Redhat</p> <pre><code># dnf install zabbix-server-pgsql -y\nor if your database is MariaDB\n# dnf install zabbix-server-mysql -y\n</code></pre> <p>Ubuntu</p> <pre><code># apt install zabbix-server-pgsql -y\nor if your databqse is MariaDB\n# apt install zabbix-server-mysql -y\n</code></pre>"},{"location":"ch01-zabbix-components/ha-setup/#configuring-zabbix-server-1","title":"Configuring Zabbix Server 1","text":"<p>Edit the Zabbix server configuration file,</p> <pre><code># vi /etc/zabbix/zabbix_server.conf\n</code></pre> <p>Update the following lines to connect to the database:</p> <pre><code>DBHost=&lt;zabbix db ip&gt;\nDBName=&lt;name of the zabbix DB&gt;\nDBUser=&lt;name of the db user&gt;\nDBSchema=&lt;db schema for the PostgreSQL DB&gt;\nDBPassword=&lt;your secret password&gt;\n</code></pre> <p>Configure the HA parameters for this server:</p> <pre><code>HANodeName=zabbix1 (or choose a name you prefer)\n</code></pre> <p>Specify the frontend node address for failover scenarios:</p> <pre><code>NodeAddress=&lt;Zabbix server 1 ip&gt;:10051\n</code></pre>"},{"location":"ch01-zabbix-components/ha-setup/#configuring-zabbix-server-2","title":"Configuring Zabbix Server 2","text":"<p>Repeat the configuration steps for the second Zabbix server. Adjust the <code>HANodeName</code> and <code>NodeAddress</code> as necessary for this server.</p>"},{"location":"ch01-zabbix-components/ha-setup/#starting-zabbix-server","title":"Starting Zabbix Server","text":"<p>After configuring both servers, enable and start the zabbix-server service on each:</p> <pre><code># systemctl enable zabbix-server --now\n</code></pre>"},{"location":"ch01-zabbix-components/ha-setup/#verifying-the-configuration","title":"Verifying the Configuration","text":"<p>Check the log files on both servers to ensure they have started correctly and are operating in their respective HA modes.</p> <p>On the first server:</p> <pre><code># grep HA /var/log/zabbix/zabbix_server.log\n</code></pre> <p>You should see:</p> <pre><code>22597:20240309:155230.353 starting HA manager\n22597:20240309:155230.362 HA manager started in active mode\n</code></pre> <p>On the second server (and any additional nodes):</p> <pre><code># grep HA /var/log/zabbix/zabbix_server.log\n</code></pre> <p>You should see:</p> <pre><code>22304:20240309:155331.163 starting HA manager\n22304:20240309:155331.174 HA manager started in standby mode\n</code></pre> <p>Your Zabbix cluster should now be set up with high availability, ensuring continuous monitoring even if one of the servers fails.</p>"},{"location":"ch01-zabbix-components/ha-setup/#installing-the-frontend","title":"Installing the frontend","text":"<p>Todo</p>"},{"location":"ch01-zabbix-components/securing-zabbix/","title":"Security","text":""},{"location":"ch02-zabbix-installation/chapter/","title":"Getting started with the Zabbix installation","text":"<p>We begin this chapter with a deep dive into the Zabbix frontend, the central hub where all monitoring and configuration tasks come together. Alongside the basic introduction to navigating the frontend, this chapter also covers user and group setup, focusing on creating a secure and efficient user management system.</p> <p>We'll walk through setting up internal authentication with best practices for security, including dual-factor authentication. For those needing advanced integration, we'll explore options like SAML, LDAP, and other external authentication methods.</p> <p>This chapter strikes a balance between a straightforward overview \u201cthis is the frontend\u201d and a more in depth look at the advanced choices you can make to enhance your system's security and manageability. Whether you're just getting started or looking to implement robust security measures, there's something here for everyone.</p> <p>By the end, you'll be well equipped to navigate the Zabbix frontend with confidence and set up a secure, scalable user management system tailored to your organization's needs.</p>"},{"location":"ch02-zabbix-installation/external-authentication/","title":"External authentication","text":""},{"location":"ch02-zabbix-installation/external-authentication/#http","title":"HTTP","text":""},{"location":"ch02-zabbix-installation/external-authentication/#ldap-ad","title":"LDAP / AD","text":""},{"location":"ch02-zabbix-installation/external-authentication/#saml","title":"SAML","text":""},{"location":"ch02-zabbix-installation/external-authentication/#google","title":"Google","text":""},{"location":"ch02-zabbix-installation/external-authentication/#ms-cloud","title":"MS Cloud","text":""},{"location":"ch02-zabbix-installation/external-authentication/#okta","title":"Okta","text":""},{"location":"ch02-zabbix-installation/frontend/","title":"Frontend explained","text":""},{"location":"ch02-zabbix-installation/host-groups/","title":"Host groups","text":""},{"location":"ch02-zabbix-installation/user-groups/","title":"User groups","text":""},{"location":"ch03-zabbix-proxies/active-proxies/","title":"Active proxies","text":""},{"location":"ch03-zabbix-proxies/chapter/","title":"Proxies and the Web services component","text":"<p>Proxies are often regarded as an advanced topic in Zabbix, but in reality, they are a fundamental part of many installations and one of the first components we set up for numerous customers. In this chapter, we'll make proxies the third subject we cover, encouraging you to consider them from the very beginning of your Zabbix journey.</p> <p>We'll start with a basic proxy setup, providing straightforward steps to get you up and running quickly. Then, we'll take a deep dive into the mechanics of proxies how they operate within the Zabbix ecosystem, their benefits, and the critical role they play in distributing monitoring load and enhancing system scalability.</p> <p>Understanding proxies from the start can significantly improve your architecture, especially in distributed or large scale environments. Whether you're new to Zabbix or looking to refine your existing setup, this chapter will offer valuable insights into why proxies should be an integral part of your monitoring strategy from the start.</p> <p>By the end, you'll not only know how to set up a basic proxy but also have a clear understanding of their underlying workings and strategic advantages, ensuring you make informed decisions as you scale your Zabbix installation.</p>"},{"location":"ch03-zabbix-proxies/passive-proxies/","title":"Passive Proxies","text":""},{"location":"ch03-zabbix-proxies/web-services/","title":"Web services","text":""},{"location":"ch04-zabbix-collecting-data/chapter/","title":"Collecting data with your Zabbix environment","text":"<p>In this chapter, we'll take a detailed journey through Zabbix data flow, showing how to progress from an empty setup to a fully functioning system capable of sending timely notifications. We\u2019ll break down each step, giving you a clear understanding of how data moves through Zabbix.</p> <p>We'll then explore the various protocols used in Zabbix, how they function, their compatibility with different components, and how to configure them effectively. This will provide you with a comprehensive overview of the communication backbone that powers Zabbix monitoring capabilities.</p> <p>Next, we'll cover the essentials like hosts, host groups, host interfaces, and items, ensuring you understand their roles and how to set them up correctly. </p> <p>For now, we'll hold off on custom scripts and external check items, focusing instead on the core elements. When we touch on active agents, we'll reference the chapter on auto-registration, guiding you to more detailed discussions on that topic later.</p> <p>By the end of this chapter, you'll have a strong grasp of Zabbix data flow and the protocols that enable seamless monitoring and notifications, preparing you for more advanced configurations and integrations.</p>"},{"location":"ch04-zabbix-collecting-data/dataflow/","title":"Dataflow","text":""},{"location":"ch04-zabbix-collecting-data/hosts/","title":"Hosts","text":""},{"location":"ch04-zabbix-collecting-data/hosts/#host-interfaces","title":"Host Interfaces","text":""},{"location":"ch04-zabbix-collecting-data/hosts/#zbx","title":"ZBX","text":""},{"location":"ch04-zabbix-collecting-data/hosts/#snmp","title":"SNMP","text":""},{"location":"ch04-zabbix-collecting-data/hosts/#ipmi","title":"IPMI","text":""},{"location":"ch04-zabbix-collecting-data/hosts/#jmx","title":"JMX","text":""},{"location":"ch04-zabbix-collecting-data/protocols/","title":"Protocols","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#zabbix-agent","title":"Zabbix Agent","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#zabbix-agent-active","title":"Zabbix Agent (Active)","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#simple-check","title":"Simple check","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#snmp-agent","title":"SNMP Agent","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#snmp-trap","title":"SNMP trap","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#zabbix-internal","title":"Zabbix Internal","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#zabbix-trapper","title":"Zabbix trapper","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#external-check","title":"External check","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#database-monitor","title":"Database monitor","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#http-agent","title":"HTTP Agent","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#ipmi-agent","title":"IPMI Agent","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#ssh-telnet-agent","title":"SSH / Telnet Agent","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#jmx-agent","title":"JMX Agent","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#calculated","title":"Calculated","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#dependent-item","title":"Dependent item","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#script","title":"Script","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#browser","title":"Browser","text":""},{"location":"ch05-zabbix-triggers/advanced-triggers/","title":"Advanced triggers","text":""},{"location":"ch05-zabbix-triggers/chapter/","title":"Setting up triggers","text":"<p>In this chapter, we'll explore triggers in depth, starting with the basics of setting up step triggers and progressively moving into advanced trigger configurations. You'll gain a thorough understanding of how triggers work, ensuring you can leverage them effectively to monitor your infrastructure.</p> <p>We'll take a deep dive into the mechanics of triggers, examining how they evaluate conditions and generate alerts. This section will also address the important topic of monitoring and alerting fatigue, providing strategies to fine-tune your triggers to reduce unnecessary alerts while maintaining optimal system oversight.</p> <p>By the end, you'll have the knowledge to set up both simple and complex triggers, helping you maintain a well balanced monitoring system that minimizes noise and focuses on what truly matters.</p>"},{"location":"ch05-zabbix-triggers/triggers/","title":"Triggers","text":""},{"location":"ch06-zabbix-templates/chapter/","title":"Building and using templates","text":"<p>A great way to guide users towards a deeper understanding of Zabbix is by initially holding off on templates and gradually introducing them much like in formal training. In this chapter, we'll start by explaining the basic usage of default templates and how to find new ones, helping you get up and running with minimal effort.</p> <p>Once you're comfortable with default templates, we\u2019ll dive into building your own templates, offering detailed instructions on customization and best practices. We\u2019ll also cover how to share your templates within the Zabbix community, fostering collaboration and knowledge exchange.</p> <p>To round off, we'll feature Tags and Macros, explaining their roles within templates and why they're most effective when understood in the context of template usage. This structured approach will ensure you grasp the full potential of templates and their associated features in Zabbix.</p> <p>By the end of this chapter, you'll be well versed in both using and creating templates, equipped to enhance your monitoring setup and contribute to the broader Zabbix ecosystem.</p>"},{"location":"ch07-zabbix-alerts/chapter/","title":"Sending out alerts with Zabbix","text":"<p>After delving into templates, it's time to return to the data flow and bring everything together by exploring integrations with powerful external services. In this chapter, we\u2019ll complete the data flow journey, showing how to extend Zabbix capabilities through seamless connections with third-party tools and platforms.</p> <p>We'll guide you through setting up integrations that enhance your monitoring system, covering various use cases from alerting to data visualization and automation. By integrating Zabbix with external services, you'll unlock new levels of functionality, making your monitoring setup more dynamic and adaptable.</p> <p>By the end, you'll have a well-rounded understanding of how to fully utilize Zabbix data flow, augmented by strategic integrations that add value to your infrastructure management.</p>"},{"location":"ch08-zabbix-lld/chapter/","title":"Using Low level discovery to automate","text":"<p>In this chapter, we'll dive into Low-Level Discovery (LLD), covering everything there is to know about this powerful feature in Zabbix. LLD automates the creation of hosts, items, triggers, and more, simplifying the management of large and dynamic environments.</p> <p>We'll also explain how to work with custom JSON in the context of LLD, showing you how to tailor discovery rules to fit your unique needs. By mastering these techniques, you'll be able to create highly adaptable monitoring setups that respond to changes in your infrastructure with minimal manual intervention.</p> <p>By the end of this chapter, you'll have a deep understanding of LLD, from basic concepts to advanced customization, enabling you to leverage its full potential in your Zabbix deployment.</p>"},{"location":"ch09-zabbix-extending/chapter/","title":"Leveraging custom items for extending the Zabbix environment","text":"<p>In this chapter, we'll take a deep dive into extending Zabbix functionality beyond its default item options. We'll cover the script item, external checks, remote commands, user parameters, and other advanced features that allow you to customize and expand your monitoring capabilities.</p> <p>You'll learn how to use these tools to integrate custom logic, monitor external applications, and automate tasks, making Zabbix an even more powerful and flexible solution tailored to your specific needs. </p> <p>By the end, you'll have the skills to push Zabbix beyond its default configuration, unlocking new possibilities for complex and unique monitoring scenarios.</p>"},{"location":"ch10-zabbix-discovery/chapter/","title":"Automating Your Monitoring with Auto Discovery and Active Agent Auto Registration","text":"<p>In this chapter, we'll explore two powerful automation features in Zabbix: auto discovery and active agent auto-registration. These tools are essential for scaling your monitoring efforts by minimizing manual configuration and ensuring new devices and services are seamlessly integrated into your Zabbix environment.</p> <p>We'll begin with auto discovery, which enables Zabbix to automatically detect and monitor new hosts and services within your network. You'll learn how to configure discovery rules, actions, and conditions to automate the onboarding process, making your monitoring more dynamic and adaptive to changes in your infrastructure.</p> <p>Next, we'll dive into active agent auto registration, which simplifies the management of Zabbix agents, especially in large or rapidly changing environments. We'll cover how to set up auto-registration rules that allow agents to register themselves with the Zabbix server, reducing administrative overhead and ensuring all relevant data is captured efficiently.</p> <p>By the end of this chapter, you'll have a thorough understanding of how to leverage auto-discovery and auto-registration to create a more automated, scalable, and efficient monitoring system.</p>"},{"location":"ch11-zabbix-visualisation/chapter/","title":"Graphs, Dashboards, Reports, Maps and other visualisation","text":"<p>In this chapter, we delve into the heart of Zabbix's visualization capabilities, where data comes to life through intuitive and powerful visual tools. From dynamic graphs that track your system's performance to comprehensive dashboards that provide at-a-glance insights, Zabbix offers a rich set of visualization features to help you understand and manage your infrastructure.</p> <p>We'll start by exploring graphs, which allow you to monitor metrics over time, helping you spot trends and anomalies with ease. Next, we'll move on to dashboards, where you can aggregate multiple widgets into a single view for a more holistic understanding of your network's health.</p> <p>Then, we'll discuss reports an essential feature for summarizing and sharing insights with your team or stakeholders. Finally, we'll cover maps, a unique visualization tool that lets you create interactive representations of your network topology, making it easier to pinpoint issues and understand relationships between different components.</p> <p>By the end of this chapter, you'll have a comprehensive understanding of how to leverage Zabbix's visualization tools to monitor, analyse, and communicate the state of your IT environment effectively.  Whether you're a seasoned administrator or just starting with Zabbix, mastering these visual tools will enhance your ability to manage complex infrastructures and ensure optimal performance.</p> <p>Let's dive into the world of Zabbix visualizations and unlock the full potential of your monitoring setup.</p>"},{"location":"ch12-zabbix-api/chapter/","title":"Zabbix API","text":"<p>The Zabbix API is a crucial part for anyone looking to expand the capabilities of their Zabbix environment, automate time-consuming tasks and get information for usage in other systems. In this chapter we will go over various of these capabilities to expand our knowledge of the Zabbix API.</p>"},{"location":"ch13-zabbix-real-world-examples/chapter/","title":"Zabbix real world examples","text":"<p>In this book we have learned a lot about our Zabbix environment, but most of it is building the foundation to start doing it on your own. From time to time you will encounter an implementation in a Zabbix environment that uses out of the box thinking or is just so simple you can't believe you never thought of it.</p> <p>This chapter aims to provide you a collection of interesting things people have built and things you absolutely have to know exist. </p>"},{"location":"fr/","title":"About French","text":""},{"location":"fr/ch01-zabbix-components/chapter/","title":"French ch1 index","text":""},{"location":"fr/ch03-zabbix-proxies/chapter/","title":"proxies","text":""},{"location":"de/","title":"Welcome","text":"<p>About German</p>"},{"location":"de/ch01-zabbix-components/chapter/","title":"About us German","text":""},{"location":"de/ch03-zabbix-proxies/chapter/","title":"proxies","text":""},{"location":"it/","title":"Welcome Italian","text":""},{"location":"it/ch01-zabbix-components/chapter/","title":"About Us Italian","text":""},{"location":"it/ch03-zabbix-proxies/chapter/","title":"proxies","text":""},{"location":"nl/","title":"Welkom","text":"<p>Dit boek is geboren uit een eenvoudig verlangen: iets teruggeven aan de community. Na jarenlang met Zabbix te hebben gewerkt, en het schrijven van vele andere publicaties over het product, voelden Patrik en Nathan een sterke drang om hun kennis te delen op een manier die toegankelijk was voor iedereen. Zo ontstond het initi\u00eble idee van een gratis, online Zabbix-bron \u2013 een door de gemeenschap gedreven project gericht op het versterken van gebruikers.</p> <p>Naarmate de online bron groeide, groeide ook de visie. We erkenden het potentieel om iets nog impactvoller te cre\u00ebren. Dit leidde tot de oprichting van een stichting, toegewijd aan het waarborgen van de duurzaamheid en groei van deze gemeenschapsinspanning op lange termijn. Dit boek, een tastbare culminatie van die visie, vertegenwoordigt de volgende stap. Alle winst die uit de verkoop ervan wordt gegenereerd, zal opnieuw in de gemeenschap worden ge\u00efnvesteerd, waardoor we de bronnen en ondersteuning die we bieden verder kunnen uitbreiden en verbeteren. Dit is meer dan alleen een boek; het is een bewijs van de kracht van gedeelde kennis en een toewijding aan het bevorderen van een bloeiende Zabbix-gemeenschap.</p>"},{"location":"nl/#licentie","title":"Licentie","text":"<p>Let op: De Engelse versie is het primaire brondocument. Vertalingen worden voor het gemak verstrekt, maar deze versie wordt als de meest nauwkeurige beschouwd.</p> <p>Bekijk alstublieft onze meest recente licentie voordat u begint: Licentie op Github.</p> <p>Het Zabbix Boek is een vrij toegankelijke bron die is ontworpen om gebruikers te helpen Zabbix te begrijpen en te beheersen. Bijdragen worden sterk aangemoedigd om de inhoud te verbeteren en uit te breiden. Het boek wordt echter verspreid onder de Creative Commons Attribution-NonCommercial-ShareAlike 4.0 (CC BY-NC-SA 4.0) licentie, wat betekent dat het alleen gratis is voor niet-commercieel gebruik.</p> <p>Bijdragers moeten zich ervan bewust zijn dat:</p> <ul> <li>Door bij te dragen aan dit werk, u onherroepelijk alle rechten, titels en belangen in uw bijdragen overdraagt aan De Monitoring Penmasters Stichting, inclusief alle bijbehorende intellectuele eigendomsrechten, voor zover toegestaan door de wet.</li> <li>De Monitoring Penmasters Stichting behoudt zich het recht voor om bijgedragen materiaal in elke vorm te gebruiken, te reproduceren, te wijzigen, te verspreiden en commercieel te exploiteren, inclusief maar niet beperkt tot de publicatie van fysieke en digitale boeken. </li> <li>Alle bijdragers moeten een Akte van Overdracht van Intellectuele Eigendomsrechten ondertekenen voordat ze bijdragen leveren, om de correcte overdracht van rechten en de behandeling van de inhoud door De  Monitoring Penmasters Stichting te waarborgen. Bijdragen zonder een ondertekende Akte van Overdracht van Intellectuele Eigendomsrechten kunnen niet worden geaccepteerd.</li> <li>Alle gegenereerde winst zal door De Monitoring Penmasters Stichting worden gebruikt om operationele kosten te dekken en om andere open-source projecten te sponsoren, zoals bepaald door de stichting. </li> </ul> <p>Uw bijdragen zijn van onschatbare waarde en zullen helpen om Het Zabbix Boek een nog grotere bron voor de hele gemeenschap te maken!</p> <p>Shield: [![CC BY-NC-SA 4.0][cc-by-nc-sa-shield]][cc-by-nc-sa]</p> <p>[Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License][cc-by-nc-sa].</p> <p>[![CC BY-NC-SA 4.0][cc-by-nc-sa-image]][cc-by-nc-sa]</p>"},{"location":"nl/ch01-zabbix-components/chapter/","title":"Zabbix-componenten, basisfuncties en installatie","text":"<p>In dit hoofdstuk breiden we de basiskennis uit het gedeelte 'Aan de slag' uit om een uitgebreide gids te bieden voor zowel beginners die Zabbix voor het eerst installeren als gevorderde gebruikers die hun installatie willen optimaliseren. We behandelen niet alleen de essenti\u00eble stappen voor een basisinstallatie, maar duiken ook in de fijnere details van de architectuur, componenten en best practices van Zabbix.</p> <p>We beginnen met het doorlopen van het installatieproces, zodat u een solide basis hebt om op voort te bouwen. Vanaf daar gaan we verder met de kerncomponenten van Zabbix, wat elk onderdeel doet, hoe ze met elkaar interacteren en waarom ze cruciaal zijn voor uw monitoringoplossing. U leert over subprocessen, hun rollen en hoe ze bijdragen aan de effici\u00ebntie en betrouwbaarheid van Zabbix.</p> <p>Daarnaast onderzoeken we goede architectuurkeuzes die uw monitoringinstallatie kunnen maken of breken. Of u nu een klein netwerk of een grootschalige infrastructuur beheert, het vroegtijdig nemen van de juiste ontwerpbeslissingen levert dividenden op in schaalbaarheid, prestaties en onderhoud.</p> <p>Dit hoofdstuk is ontworpen om een breed scala aan lezers te bedienen. Als u Zabbix gewoon aan de praat wilt krijgen, vindt u duidelijke, stapsgewijze instructies. Voor degenen die dieper willen duiken, bieden we gedetailleerde inzichten in hoe Zabbix onder de motorkap functioneert, zodat u weloverwogen keuzes kunt maken die aansluiten bij uw behoeften en toekomstige groeiplannen.</p> <p>Aan het einde van dit hoofdstuk hebt u niet alleen een werkende Zabbix-installatie, maar ook een grondig begrip van de componenten en architectuur, waardoor u Zabbix optimaal kunt benutten, ongeacht de complexiteit van uw omgeving.</p> <p>Laten we beginnen aan deze gedetailleerde reis naar Zabbix en onszelf uitrusten met de kennis om zowel een krachtige monitoringoplossing te starten als te optimaliseren.</p>"},{"location":"nl/ch03-zabbix-proxies/chapter/","title":"proxies","text":""},{"location":"pt/","title":"Welcome Portuguese","text":""},{"location":"pt/ch01-zabbix-components/chapter/","title":"Chapter","text":"<p>About Us Portuguese</p>"},{"location":"es/","title":"Welcome Spanish","text":""},{"location":"es/ch01-zabbix-components/chapter/","title":"About Us Spanish","text":""},{"location":"th/","title":"Welcome / \u0e22\u0e34\u0e19\u0e14\u0e35\u0e15\u0e49\u0e2d\u0e19\u0e23\u0e31\u0e1a","text":"<p>\u0e2b\u0e19\u0e31\u0e07\u0e2a\u0e37\u0e2d\u0e40\u0e25\u0e48\u0e21\u0e19\u0e35\u0e49\u0e08\u0e31\u0e14\u0e17\u0e33\u0e02\u0e36\u0e49\u0e19\u0e14\u0e49\u0e27\u0e22\u0e04\u0e27\u0e32\u0e21\u0e15\u0e31\u0e49\u0e07\u0e43\u0e08 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e15\u0e2d\u0e1a\u0e41\u0e17\u0e19 \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e17\u0e33\u0e07\u0e32\u0e19\u0e01\u0e31\u0e1a Zabbix \u0e21\u0e32\u0e2b\u0e25\u0e32\u0e22\u0e1b\u0e35 </p> <p>\u0e41\u0e25\u0e30 \u0e44\u0e14\u0e49\u0e40\u0e02\u0e35\u0e22\u0e19\u0e2a\u0e34\u0e48\u0e07\u0e1e\u0e34\u0e21\u0e1e\u0e4c\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e2b\u0e25\u0e32\u0e01\u0e2b\u0e25\u0e32\u0e22 Platform \u0e19\u0e35\u0e49 \u0e01\u0e23\u0e30\u0e1c\u0e21 Mr. Patrik \u0e41\u0e25\u0e30 Mr. Nathan \u0e08\u0e36\u0e07\u0e15\u0e31\u0e14\u0e2a\u0e34\u0e19\u0e43\u0e08\u0e40\u0e02\u0e35\u0e22\u0e19\u0e2b\u0e19\u0e31\u0e07\u0e2a\u0e37\u0e2d\u0e40\u0e25\u0e48\u0e21\u0e19\u0e35\u0e49\u0e02\u0e36\u0e49\u0e19\u0e21\u0e32 \u0e14\u0e49\u0e27\u0e22\u0e08\u0e38\u0e14\u0e1b\u0e23\u0e30\u0e2a\u0e07\u0e04\u0e4c\u0e17\u0e35\u0e48\u0e08\u0e30\u0e41\u0e1a\u0e48\u0e07\u0e1b\u0e31\u0e19\u0e04\u0e27\u0e32\u0e21\u0e23\u0e39\u0e49\u0e41\u0e25\u0e30\u0e0a\u0e48\u0e27\u0e22\u0e40\u0e2b\u0e25\u0e37\u0e2d\u0e1c\u0e39\u0e49\u0e2d\u0e48\u0e32\u0e19\u0e17\u0e38\u0e01\u0e17\u0e48\u0e32\u0e19\u0e44\u0e14\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e02\u0e49\u0e32\u0e16\u0e36\u0e07\u0e44\u0e14\u0e49\u0e07\u0e48\u0e32\u0e22 \u0e41\u0e25\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e08\u0e38\u0e14\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e41\u0e19\u0e27\u0e04\u0e34\u0e14\u0e02\u0e2d\u0e07\u0e1e\u0e27\u0e01\u0e40\u0e23\u0e32\u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e41\u0e2b\u0e25\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 Zabbix \u0e2d\u0e2d\u0e19\u0e44\u0e25\u0e19\u0e4c\u0e1f\u0e23\u0e35 - \u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23\u0e17\u0e35\u0e48\u0e02\u0e31\u0e1a\u0e40\u0e04\u0e25\u0e37\u0e48\u0e2d\u0e19\u0e42\u0e14\u0e22\u0e0a\u0e38\u0e21\u0e0a\u0e19\u0e41\u0e25\u0e30\u0e21\u0e38\u0e48\u0e07\u0e21\u0e31\u0e48\u0e19\u0e40\u0e2a\u0e23\u0e34\u0e21\u0e28\u0e31\u0e01\u0e22\u0e20\u0e32\u0e1e\u0e43\u0e2b\u0e49\u0e01\u0e31\u0e1a\u0e1c\u0e39\u0e49\u0e43\u0e0a\u0e49</p> <p>\u0e43\u0e19\u0e02\u0e13\u0e30\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19\u0e41\u0e2b\u0e25\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2d\u0e2d\u0e19\u0e44\u0e25\u0e19\u0e4c\u0e43\u0e19\u0e1b\u0e31\u0e08\u0e08\u0e38\u0e1a\u0e31\u0e19\u0e44\u0e14\u0e49\u0e40\u0e15\u0e34\u0e21\u0e42\u0e15\u0e41\u0e25\u0e30\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e01\u0e49\u0e32\u0e27\u0e44\u0e01\u0e25\u0e44\u0e1b\u0e21\u0e32\u0e01\u0e02\u0e36\u0e49\u0e19 \u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23\u0e01\u0e47\u0e15\u0e32\u0e21 \u0e40\u0e23\u0e32\u0e40\u0e2b\u0e47\u0e19\u0e28\u0e31\u0e01\u0e22\u0e20\u0e32\u0e1e\u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e34\u0e48\u0e07\u0e17\u0e35\u0e48\u0e17\u0e23\u0e07\u0e1e\u0e25\u0e31\u0e07\u0e43\u0e19\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19 \u0e40\u0e23\u0e32\u0e08\u0e36\u0e07\u0e01\u0e48\u0e2d\u0e15\u0e31\u0e49\u0e07\u0e21\u0e39\u0e25\u0e19\u0e34\u0e18\u0e34\u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23\u0e19\u0e35\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e15\u0e34\u0e1a\u0e42\u0e15\u0e41\u0e25\u0e30\u0e14\u0e33\u0e40\u0e19\u0e34\u0e19\u0e15\u0e48\u0e2d\u0e44\u0e1b\u0e44\u0e14\u0e49\u0e43\u0e19\u0e23\u0e30\u0e22\u0e30\u0e22\u0e32\u0e27 \u0e2b\u0e19\u0e31\u0e07\u0e2a\u0e37\u0e2d\u0e40\u0e25\u0e48\u0e21\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e02\u0e2d\u0e07\u0e27\u0e34\u0e2a\u0e31\u0e22\u0e17\u0e31\u0e28\u0e19\u0e4c \u0e41\u0e25\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e49\u0e32\u0e27\u0e2a\u0e33\u0e04\u0e31\u0e0d\u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e14\u0e34\u0e19\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e2d\u0e44\u0e1b \u0e23\u0e32\u0e22\u0e44\u0e14\u0e49\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e08\u0e32\u0e01\u0e01\u0e32\u0e23\u0e08\u0e33\u0e2b\u0e19\u0e48\u0e32\u0e22\u0e2b\u0e19\u0e31\u0e07\u0e2a\u0e37\u0e2d\u0e08\u0e30\u0e16\u0e39\u0e01\u0e19\u0e33\u0e01\u0e25\u0e31\u0e1a\u0e44\u0e1b\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e0a\u0e38\u0e21\u0e0a\u0e19 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e02\u0e22\u0e32\u0e22\u0e41\u0e25\u0e30\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e17\u0e23\u0e31\u0e1e\u0e22\u0e32\u0e01\u0e23 \u0e23\u0e27\u0e21\u0e16\u0e36\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e21\u0e2d\u0e1a\u0e43\u0e2b\u0e49 \u0e19\u0e35\u0e48\u0e44\u0e21\u0e48\u0e43\u0e0a\u0e48\u0e41\u0e04\u0e48\u0e2b\u0e19\u0e31\u0e07\u0e2a\u0e37\u0e2d\u0e18\u0e23\u0e23\u0e21\u0e14\u0e32 \u0e41\u0e15\u0e48\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e31\u0e0d\u0e25\u0e31\u0e01\u0e29\u0e13\u0e4c\u0e02\u0e2d\u0e07\u0e1e\u0e25\u0e31\u0e07\u0e41\u0e2b\u0e48\u0e07\u0e01\u0e32\u0e23\u0e41\u0e1a\u0e48\u0e07\u0e1b\u0e31\u0e19\u0e41\u0e0a\u0e23\u0e4c\u0e04\u0e27\u0e32\u0e21\u0e23\u0e39\u0e49\u0e43\u0e2b\u0e49 \u0e41\u0e25\u0e30\u0e04\u0e27\u0e32\u0e21\u0e21\u0e38\u0e48\u0e07\u0e21\u0e31\u0e48\u0e19\u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e0a\u0e38\u0e21\u0e0a\u0e19 Zabbix \u0e17\u0e35\u0e48\u0e41\u0e02\u0e47\u0e07\u0e41\u0e01\u0e23\u0e48\u0e07\u0e41\u0e25\u0e30\u0e40\u0e15\u0e34\u0e1a\u0e42\u0e15\u0e22\u0e34\u0e48\u0e07\u0e02\u0e36\u0e49\u0e19</p>"},{"location":"th/#license","title":"\u0e43\u0e1a\u0e2d\u0e19\u0e38\u0e0d\u0e32\u0e15 (License)","text":"<p>\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e2b\u0e15\u0e38: \u0e40\u0e2d\u0e01\u0e2a\u0e32\u0e23\u0e15\u0e49\u0e19\u0e09\u0e1a\u0e31\u0e1a\u0e08\u0e31\u0e14\u0e17\u0e33\u0e02\u0e36\u0e49\u0e19\u0e40\u0e1b\u0e47\u0e19\u0e20\u0e32\u0e29\u0e32\u0e2d\u0e31\u0e07\u0e01\u0e24\u0e29 \u0e2a\u0e48\u0e27\u0e19\u0e09\u0e1a\u0e31\u0e1a\u0e41\u0e1b\u0e25\u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22\u0e21\u0e35\u0e44\u0e27\u0e49\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e2a\u0e30\u0e14\u0e27\u0e01 \u0e01\u0e23\u0e30\u0e0a\u0e31\u0e1a \u0e41\u0e25\u0e30\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08\u0e07\u0e48\u0e32\u0e22 \u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23\u0e01\u0e47\u0e15\u0e32\u0e21 \u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e0a\u0e31\u0e19\u0e20\u0e32\u0e29\u0e32\u0e2d\u0e31\u0e07\u0e01\u0e24\u0e29\u0e22\u0e31\u0e07\u0e04\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e19\u0e09\u0e1a\u0e31\u0e1a\u0e17\u0e35\u0e48\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07\u0e41\u0e25\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e17\u0e32\u0e07\u0e01\u0e32\u0e23\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14</p> <p>\u0e01\u0e48\u0e2d\u0e19\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19 \u0e42\u0e1b\u0e23\u0e14\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a \u0e43\u0e1a\u0e2d\u0e19\u0e38\u0e0d\u0e32\u0e15\u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e0a\u0e31\u0e19\u0e25\u0e48\u0e32\u0e2a\u0e38\u0e14 \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e44\u0e14\u0e49\u0e17\u0e35\u0e48 License on Github</p> <p>The Zabbix Book \u0e40\u0e1b\u0e47\u0e19\u0e41\u0e2b\u0e25\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e1b\u0e34\u0e14\u0e17\u0e35\u0e48\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e02\u0e36\u0e49\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e0a\u0e48\u0e27\u0e22\u0e43\u0e2b\u0e49\u0e1c\u0e39\u0e49\u0e2d\u0e48\u0e32\u0e19\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08\u0e41\u0e25\u0e30\u0e40\u0e0a\u0e35\u0e48\u0e22\u0e27\u0e0a\u0e32\u0e0d\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Zabbix \u0e44\u0e14\u0e49\u0e14\u0e35\u0e22\u0e34\u0e48\u0e07\u0e02\u0e36\u0e49\u0e19\u0e44\u0e1b \u0e40\u0e23\u0e32\u0e02\u0e2d\u0e40\u0e0a\u0e34\u0e0d\u0e0a\u0e27\u0e19\u0e43\u0e2b\u0e49\u0e17\u0e38\u0e01\u0e04\u0e19\u0e23\u0e48\u0e27\u0e21\u0e41\u0e1a\u0e48\u0e07\u0e1b\u0e31\u0e19\u0e2d\u0e07\u0e04\u0e4c\u0e04\u0e27\u0e32\u0e21\u0e23\u0e39\u0e49 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e41\u0e25\u0e30\u0e02\u0e22\u0e32\u0e22\u0e40\u0e19\u0e37\u0e49\u0e2d\u0e2b\u0e32\u0e43\u0e2b\u0e49\u0e2a\u0e21\u0e1a\u0e39\u0e23\u0e13\u0e4c\u0e22\u0e34\u0e48\u0e07\u0e02\u0e36\u0e49\u0e19</p> <p>\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23\u0e01\u0e47\u0e15\u0e32\u0e21 \u0e2b\u0e19\u0e31\u0e07\u0e2a\u0e37\u0e2d\u0e40\u0e25\u0e48\u0e21\u0e19\u0e35\u0e49\u0e40\u0e1c\u0e22\u0e41\u0e1e\u0e23\u0e48\u0e20\u0e32\u0e22\u0e43\u0e15\u0e49 \u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e2d\u0e19\u0e38\u0e0d\u0e32\u0e15 Creative Commons Attribution-NonCommercial-ShareAlike 4.0 (CC BY-NC-SA 4.0) \u0e0b\u0e36\u0e48\u0e07\u0e2b\u0e21\u0e32\u0e22\u0e04\u0e27\u0e32\u0e21\u0e27\u0e48\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49\u0e1f\u0e23\u0e35 \u0e41\u0e15\u0e48\u0e08\u0e33\u0e01\u0e31\u0e14\u0e40\u0e09\u0e1e\u0e32\u0e30\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e41\u0e2a\u0e27\u0e07\u0e2b\u0e32\u0e1c\u0e25\u0e01\u0e33\u0e44\u0e23\u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19</p> <p>\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e23\u0e17\u0e23\u0e32\u0e1a\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e1c\u0e39\u0e49\u0e23\u0e48\u0e27\u0e21\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e23\u0e23\u0e04\u0e4c\u0e1c\u0e25\u0e07\u0e32\u0e19 : </p> <ul> <li>\u0e01\u0e32\u0e23\u0e2a\u0e48\u0e07\u0e1c\u0e25\u0e07\u0e32\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e23\u0e48\u0e27\u0e21\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e40\u0e19\u0e37\u0e49\u0e2d\u0e2b\u0e32\u0e16\u0e37\u0e2d\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e42\u0e2d\u0e19\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e4c\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e16\u0e32\u0e27\u0e23\u0e43\u0e2b\u0e49\u0e01\u0e31\u0e1a The Monitoring Penmasters Foundation   \u0e0b\u0e36\u0e48\u0e07\u0e23\u0e27\u0e21\u0e16\u0e36\u0e07\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e4c\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e43\u0e19\u0e17\u0e23\u0e31\u0e1e\u0e22\u0e4c\u0e2a\u0e34\u0e19\u0e17\u0e32\u0e07\u0e1b\u0e31\u0e0d\u0e0d\u0e32\u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07 \u0e15\u0e32\u0e21\u0e02\u0e2d\u0e1a\u0e40\u0e02\u0e15\u0e17\u0e35\u0e48\u0e01\u0e0e\u0e2b\u0e21\u0e32\u0e22\u0e2d\u0e19\u0e38\u0e0d\u0e32\u0e15\u0e2a\u0e39\u0e07\u0e2a\u0e38\u0e14</li> <li>The Monitoring Penmasters Foundation \u0e21\u0e35\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e4c\u0e43\u0e19\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49 \u0e17\u0e33\u0e0b\u0e49\u0e33 \u0e14\u0e31\u0e14\u0e41\u0e1b\u0e25\u0e07 \u0e40\u0e1c\u0e22\u0e41\u0e1e\u0e23\u0e48 \u0e41\u0e25\u0e30\u0e19\u0e33\u0e40\u0e19\u0e37\u0e49\u0e2d\u0e2b\u0e32\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e44\u0e1b\u0e43\u0e0a\u0e49\u0e43\u0e19\u0e40\u0e0a\u0e34\u0e07\u0e1e\u0e32\u0e13\u0e34\u0e0a\u0e22\u0e4c\u0e44\u0e14\u0e49\u0e43\u0e19\u0e17\u0e38\u0e01\u0e23\u0e39\u0e1b\u0e41\u0e1a\u0e1a   \u0e44\u0e21\u0e48\u0e27\u0e48\u0e32\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e2b\u0e19\u0e31\u0e07\u0e2a\u0e37\u0e2d\u0e09\u0e1a\u0e31\u0e1a\u0e1e\u0e34\u0e21\u0e1e\u0e4c\u0e2b\u0e23\u0e37\u0e2d\u0e14\u0e34\u0e08\u0e34\u0e17\u0e31\u0e25</li> <li>\u0e1c\u0e39\u0e49\u0e23\u0e48\u0e27\u0e21\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e23\u0e23\u0e04\u0e4c\u0e17\u0e38\u0e01\u0e17\u0e48\u0e32\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e25\u0e07\u0e19\u0e32\u0e21\u0e43\u0e19 \u0e2b\u0e19\u0e31\u0e07\u0e2a\u0e37\u0e2d\u0e42\u0e2d\u0e19\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e4c\u0e43\u0e19\u0e17\u0e23\u0e31\u0e1e\u0e22\u0e4c\u0e2a\u0e34\u0e19\u0e17\u0e32\u0e07\u0e1b\u0e31\u0e0d\u0e0d\u0e32 (Deed of Transfer of Intellectual Property Rights)   \u0e01\u0e48\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e48\u0e07\u0e1c\u0e25\u0e07\u0e32\u0e19 \u0e2b\u0e32\u0e01\u0e44\u0e21\u0e48\u0e21\u0e35\u0e40\u0e2d\u0e01\u0e2a\u0e32\u0e23\u0e19\u0e35\u0e49 \u0e17\u0e32\u0e07\u0e21\u0e39\u0e25\u0e19\u0e34\u0e18\u0e34\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e23\u0e31\u0e1a\u0e40\u0e19\u0e37\u0e49\u0e2d\u0e2b\u0e32\u0e14\u0e31\u0e07\u0e01\u0e25\u0e48\u0e32\u0e27\u0e44\u0e14\u0e49</li> <li>\u0e23\u0e32\u0e22\u0e44\u0e14\u0e49\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e08\u0e32\u0e01\u0e2b\u0e19\u0e31\u0e07\u0e2a\u0e37\u0e2d\u0e08\u0e30\u0e16\u0e39\u0e01\u0e19\u0e33\u0e44\u0e1b\u0e43\u0e0a\u0e49\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e04\u0e48\u0e32\u0e43\u0e0a\u0e49\u0e08\u0e48\u0e32\u0e22\u0e43\u0e19\u0e01\u0e32\u0e23\u0e14\u0e33\u0e40\u0e19\u0e34\u0e19\u0e07\u0e32\u0e19\u0e02\u0e2d\u0e07 The Monitoring Penmasters Foundation   \u0e41\u0e25\u0e30\u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23\u0e0b\u0e2d\u0e1f\u0e15\u0e4c\u0e41\u0e27\u0e23\u0e4c\u0e42\u0e2d\u0e40\u0e1e\u0e48\u0e19\u0e0b\u0e2d\u0e23\u0e4c\u0e2a\u0e2d\u0e37\u0e48\u0e19 \u0e46 \u0e15\u0e32\u0e21\u0e17\u0e35\u0e48\u0e21\u0e39\u0e25\u0e19\u0e34\u0e18\u0e34\u0e1e\u0e34\u0e08\u0e32\u0e23\u0e13\u0e32</li> </ul> <p>\u0e01\u0e32\u0e23\u0e21\u0e35\u0e2a\u0e48\u0e27\u0e19\u0e23\u0e48\u0e27\u0e21\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e34\u0e48\u0e07\u0e25\u0e49\u0e33\u0e04\u0e48\u0e32 \u0e41\u0e25\u0e30\u0e08\u0e30\u0e0a\u0e48\u0e27\u0e22\u0e43\u0e2b\u0e49 The Zabbix Book \u0e40\u0e1b\u0e47\u0e19\u0e41\u0e2b\u0e25\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e17\u0e23\u0e07\u0e1e\u0e25\u0e31\u0e07\u0e22\u0e34\u0e48\u0e07\u0e02\u0e36\u0e49\u0e19 \u0e41\u0e25\u0e30\u0e40\u0e15\u0e34\u0e1a\u0e42\u0e15\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e1c\u0e39\u0e49\u0e2d\u0e48\u0e32\u0e19\u0e41\u0e25\u0e30\u0e17\u0e38\u0e01\u0e04\u0e19\u0e43\u0e19\u0e0a\u0e38\u0e21\u0e0a\u0e19!</p> <p>\u0e2a\u0e31\u0e0d\u0e25\u0e31\u0e01\u0e29\u0e13\u0e4c: </p> <p>Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.</p> <p></p>"},{"location":"th/ch01-zabbix-components/chapter/","title":"About us Thai","text":""},{"location":"zh/","title":"Welcome Chinese","text":""},{"location":"zh/ch01-zabbix-components/chapter/","title":"About Us Chinese","text":""},{"location":"","title":"Welcome","text":"<p>This book is born from a simple desire: to give back. After years of working with Zabbix, and authoring previous many other publications about the platform, Patrik and Nathan felt a strong pull to share their knowledge in a way that was accessible to everyone. That's how the initial idea of a free, online Zabbix resource was conceived \u2013 a community-driven project dedicated to empowering users.</p> <p>As the online resource grew, so did the vision. We recognized the potential to create something even more impactful. This led to the formation of a foundation, dedicated to ensuring the long-term sustainability and growth of this community effort. This book, a tangible culmination of that vision, represents the next step. All profits generated from its sales will be reinvested back into the community, enabling us to further expand and enhance the resources and support we offer. This is more than just a book; it's a testament to the power of shared knowledge and a commitment to fostering a thriving Zabbix community.\"</p>"},{"location":"#license","title":"License","text":"<p>Please note: The english version is the primary source document. Translations are provided for convenience, but this version is considered the most accurate.</p> <p>Please before you start take a look at our most updated license : License on Github.</p> <p>The Zabbix Book is a freely accessible resource designed to help users understand and master Zabbix. Contributions are highly encouraged to improve and expand its content. However, the book is distributed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 (CC BY-NC-SA 4.0) license, meaning it is free for non-commercial use only.</p> <p>Contributors should be aware that:</p> <ul> <li>By contributing to this work, you irrevocably assign and transfer all rights, title, and interest in your contributions to The Monitoring Penmasters Foundation, including any associated intellectual property rights, to the fullest extent permitted by law.</li> <li>The Monitoring Penmasters Foundation reserves the right to use, reproduce, modify, distribute, and commercially exploit any contributed material in any form, including but not limited to the publication of physical and digital books.</li> <li>All contributors must sign a Deed of Transfer of Intellectual Property Rights before making any contributions, ensuring the proper transfer of rights and handling of the content by The Monitoring Penmasters Foundation. Any contributions without a signed Deed of Transfer of Intellectual Property Rights cannot be accepted.</li> <li>All profits generated will be used by The Monitoring Penmasters Foundation to cover operational expenses and to sponsor other open-source projects, as determined by the foundation.</li> </ul> <p>Your contributions are invaluable and will help make The Zabbix Book an even greater resource for the entire community!</p> <p>Shield: </p> <p>Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.</p> <p></p>"},{"location":"Guidelines/","title":"Guidelines","text":""},{"location":"Guidelines/#how-to-contribute","title":"How to contribute","text":"<ul> <li>Sign the deed of transfer preferable electronically</li> <li>Clone this project to your Github account</li> <li> <p>Clone the repository to you pc</p> </li> <li> <p>Install the needed software for Mkdocs to work,   check the file in the root folder how-to-install-mkdocs.md</p> </li> <li>Create a new branch to make your changes<ul> <li>git branch \"&lt;your branch name&gt;\"</li> <li>git checkout \"&lt;your branch name&gt;\"</li> </ul> </li> <li>Make the changes you want and commit them<ul> <li>git add \"files you changed\"</li> <li>git commit -m \"add useful commit info\"</li> </ul> </li> <li>Return back to the main branch<ul> <li>git checkout main</li> </ul> </li> <li>Make sure you have the latest changes merged from main<ul> <li>git pull origin main</li> </ul> </li> <li>Merge your branch into the main branch<ul> <li>git merge \"&lt;your branch name&gt;\"</li> <li>git push</li> </ul> </li> <li>cleanup your branch<ul> <li>git branch -d \"&lt;your branch name&gt;\"</li> </ul> </li> <li>Create a pull requests so that we can merge it :)</li> </ul>"},{"location":"ch00-getting-started/Requirements/","title":"System Requirements","text":""},{"location":"ch00-getting-started/Requirements/#requirements","title":"Requirements","text":"<p>Zabbix has specific hardware and software requirements that must be met, and these requirements may change over time. They also depend on the size of your setup and the software stack you select. Before purchasing hardware or installing a database version, it's essential to consult the Zabbix documentation for the most up-to-date requirements for the version you plan to install. You can find the latest requirements https://www.zabbix.com/documentation/current/en/manual/installation/requirements. Make sure to select the correct Zabbix version from the list.</p> <p>For smaller or test setups, Zabbix can comfortably run on a system with 2 CPUs and 8 GB of RAM. However, your setup size, the number of items you monitor, the triggers you create, and how long you plan to retain data will impact resource requirements. In today's virtualised environments, my advice is to start small and scale up as needed.</p> <p>You can install all components (Zabbix server, database, web server) on a single machine or distribute them across multiple servers. For simplicity, take note of the server details:</p> Component IP Address Zabbix Server Database Server Web Server Tip <p>Zabbix package names often use dashes (<code>-</code>) in their names, such as <code>zabbix-get</code> or <code>zabbix-sender</code>, but the binaries themselves may use underscores (<code>_</code>), like <code>zabbix_sender</code> or <code>zabbix_server</code>. This naming discrepancy can sometimes be confusing, particularly if you are using packages from non-official Zabbix repositories. Always check if a binary uses a dash or an underscore when troubleshooting.</p>"},{"location":"ch00-getting-started/Requirements/#basic-os-configuration","title":"Basic OS Configuration","text":"<p>Operating systems, so many choices, each with its own advantages and loyal user base. While Zabbix can be installed on a wide range of platforms, documenting the process for every available OS would be impractical. To keep this book focused and efficient, we have chosen to cover only the most widely used options: Ubuntu and Red Hat based distributions.</p> <p>Since not everyone has access to a Red Hat Enterprise Linux (RHEL) subscription even though a developer account provides limited access we have opted for Rocky Linux as a readily available alternative. For this book, we will be using Rocky Linux 9.x and Ubuntu LTS 24.04.x.</p> <ul> <li>https://rockylinux.org/</li> <li>https://ubuntu.com/</li> </ul>"},{"location":"ch00-getting-started/Requirements/#firewall","title":"Firewall","text":"<p>Before installing Zabbix, it's essential to properly prepare the operating system. The first step is to ensure that the firewall is installed and configured.</p> <p>To install and enable the firewall, run the following command:</p> <p>RedHat</p> <pre><code># dnf install firewalld\n# systemctl enable firewalld --now\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt install ufw -y\n# sudo ufw enable\n</code></pre> <p>Once installed, you can configure the necessary ports. For Zabbix, we need to allow access to port <code>10051/tcp</code>, which is where the Zabbix trapper listens for incoming data. Use the following command to open this port in the firewall:</p> <p>RedHat</p> <pre><code># firewall-cmd --add-service=zabbix-server --permanent\n</code></pre> <p>Ubuntu</p> <pre><code># sudo ufw allow 10051/tcp\n</code></pre> <p>If the service is not recognized, you can manually specify the port:</p> <pre><code># firewall-cmd --add-port=10051/tcp --permanent\n</code></pre> <p>firewalld</p> <p>\"Firewalld is the replacement for iptables in RHEL-based systems and allows changes to take effect immediately without needing to restart the service. If your distribution does not use Firewalld, refer to your OS documentation for the appropriate firewall configuration steps.\" Ubuntu makes use of UFW and is merely a frontend for iptables.</p> <p>Another option is to add individual firewall zones for example</p> <pre><code># firewall-cmd --new-zone=postgresql-access --permanent\n</code></pre> <p>You can verify if the zone was created by running :</p> <pre><code># firewall-cmd --get-zones\n    block dmz drop external home internal nm-shared postgresql-access public\n    trusted work\n</code></pre> <p>Using zones in firewalld to configure firewall rules for PostgreSQL provides several advantages in terms of security, flexibility, and ease of management. Here\u2019s why zones are beneficial:</p> <ul> <li>Granular Access Control</li> <li>firewalld zones allow different levels of trust for different network interfaces     and IP ranges. You can define which systems are allowed to connect to PostgreSQL     based on their trust level.</li> <li>Simplified Rule management</li> <li>Instead of manually defining complex iptables rules, zones provide an organized     way to group and manage firewall rules based on usage scenarios.</li> <li>Enhanced security</li> <li>By restricting PostgreSQL access to a specific zone, you prevent unauthorized     connections from other interfaces or networks.</li> <li>Dynamic configuration</li> <li>firewalld supports runtime and permanent rule configurations, allowing changes     without disrupting existing connections.</li> <li>Multi-Interface support</li> <li>If the server has multiple network interfaces, zones allow different security     policies for each interface.</li> </ul> <p>Bringing everything together it would look like this:</p> <pre><code>firewall-cmd --new-zone=db_zone --permanent\nfirewall-cmd --zone=db_zone --add-service=postgresql --permanent\nfirewall-cmd --zone=db_zone --add-source=xxx.xxx.xxx.xxx/32 --permanent\nfirewall-cmd --reload\n</code></pre> <p>Where our <code>source IP</code> is the only IP that is allowed to connect to our DB.</p>"},{"location":"ch00-getting-started/Requirements/#time-server","title":"Time Server","text":"<p>Another crucial step is configuring the time server and syncing the Zabbix server using an NTP client. Accurate time synchronization is vital for Zabbix, both for the server and the devices it monitors. If one of the hosts has an incorrect time zone, it could lead to confusion, such as investigating an issue in Zabbix that appears to have happened hours earlier than it actually did.</p> <p>To install and enable chrony, our NTP client, use the following command:</p> <p>RedHat</p> <pre><code># dnf install chrony\n# systemctl enable chronyd --now\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt install chrony -y\n</code></pre> <p>Once installed, you can verify that Chrony is enabled and running by checking its status:</p> <p>RedHat</p> <pre><code># systemctl status chronyd\n</code></pre> <p>dnf</p> <p>\"dnf is a package manager used in Red Hat-based systems. If you're using another distribution, replace <code>dnf</code> with your appropriate package manager, such as <code>zyper</code>, <code>apt</code>, or <code>yum</code>. Chrony is a modern replacement for <code>ntpd</code>, offering faster and more accurate time synchronization. If your OS does not support Chrony, consider using <code>ntpd</code> instead.\"</p> <p>Once Chrony is installed, the next step is to ensure the correct time zone is set. You can view your current time configuration using the <code>timedatectl</code> command:</p> <pre><code># timedatectl\n               Local time: Thu 2023-11-16 15:09:14 UTC\n           Universal time: Thu 2023-11-16 15:09:14 UTC\n                 RTC time: Thu 2023-11-16 15:09:15\n                Time zone: UTC (UTC, +0000)\nSystem clock synchronized: yes\n              NTP service: active\n          RTC in local TZ: no\n</code></pre> <p>Ensure that the Chrony service is active (refer to the previous steps if needed). To set the correct time zone, first, you can list all available time zones with the following command:</p> <pre><code># timedatectl list-timezones\n</code></pre> <p>This will display a list of time zones, from which you can select the one closest to your location, for example:</p> <pre><code>Africa/Abidjan\nAfrica/Accra\n...\nPacific/Tongatapu\nPacific/Wake\nPacific/Wallis\nUTC\n</code></pre> <p>Once you've identified your time zone, configure it using the following command:</p> <pre><code># timedatectl set-timezone Europe/Brussels\n</code></pre> <p>To verify that the time zone has been configured correctly, use the <code>timedatectl</code> command again:</p> <pre><code># timedatectl\n               Local time: Thu 2023-11-16 16:13:35 CET\n           Universal time: Thu 2023-11-16 15:13:35 UTC\n                 RTC time: Thu 2023-11-16 15:13:36\n                Time zone: Europe/Brussels (CET, +0100)\nSystem clock synchronized: yes\n              NTP service: active\n          RTC in local TZ: no\n</code></pre> Note <p>Some administrators prefer installing all servers in the UTC time zone to ensure that server logs across global deployments are synchronized. Zabbix supports user-based time zone settings, which allows the server to remain in UTC while individual users can adjust the time zone via the interface if needed.</p>"},{"location":"ch00-getting-started/Requirements/#verifying-chrony-synchronization","title":"Verifying Chrony Synchronization","text":"<p>To ensure that Chrony is synchronizing with the correct time servers, you can run the following command:</p> <pre><code># chronyc\n</code></pre> <p>The output should resemble:</p> <pre><code>chrony version 4.2\nCopyright (C) 1997-2003, 2007, 2009-2021 Richard P. Curnow and others\nchrony comes with ABSOLUTELY NO WARRANTY.  This is free software, and\nyou are welcome to redistribute it under certain conditions.  See the\nGNU General Public License version 2 for details.\n\nchronyc&gt;\n</code></pre> <p>Once inside the Chrony prompt, type the following to check the sources:</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>Example output:</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- 51-15-20-83.rev.poneytel&gt;     2   9   377   354   +429us[ +429us] +/-  342ms\n^- 5.255.99.180                  2  10   377   620  +7424us[+7424us] +/-   37ms\n^- hachi.paina.net               2  10   377   412   +445us[ +445us] +/-   39ms\n^* leontp1.office.panq.nl        1  10   377   904  +6806ns[ +171us] +/- 2336us\n</code></pre> <p>In this example, the NTP servers in use are located outside your local region. It is recommended to switch to time servers in your country or, if available, to a dedicated company time server. You can find local NTP servers here.</p>"},{"location":"ch00-getting-started/Requirements/#updating-time-servers","title":"Updating Time Servers","text":"<p>To update the time servers, modify the <code>/etc/chrony.conf</code> file under RedHat based systems if you use Ubuntu edit <code>/etc/chrony/chrony.conf</code> . Replace the existing NTP server with one closer to your location.</p> <p>Example of the current configuration:</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool 2.centos.pool.ntp.org iburst\n</code></pre> <p>Change the pools you want to a local time server:</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool be.pool.ntp.org iburst\n</code></pre> <p>After making this change, restart the Chrony service to apply the new configuration:</p> <pre><code># systemctl restart chronyd\n</code></pre>"},{"location":"ch00-getting-started/Requirements/#verifying-updated-time-servers","title":"Verifying Updated Time Servers","text":"<p>Check the time sources again to ensure that the new local servers are in use:</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>Example of expected output with local servers:</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- ntp1.unix-solutions.be        2   6    17    43   -375us[ -676us] +/-   28ms\n^* ntp.devrandom.be              2   6    17    43   -579us[ -880us] +/- 2877us\n^+ time.cloudflare.com           3   6    17    43   +328us[  +27us] +/- 2620us\n^+ time.cloudflare.com           3   6    17    43\n</code></pre> <p>This confirms that the system is now using local time servers.</p>"},{"location":"ch00-getting-started/initial-steps/","title":"Getting Started with Zabbix \u2013 Unlocking the Power of Monitoring","text":"<p>Welcome to the world of Zabbix, a powerful open-source monitoring solution designed to give you comprehensive insights into your IT infrastructure. Whether you're managing a small network or overseeing a large-scale enterprise system, Zabbix provides the tools you need to monitor performance, detect issues, and ensure the smooth operation of your services.</p> <p>In this book, we focus on Zabbix LTS 8.0, the long-term support version that ensures stability and reliability for your monitoring needs. We'll explore its extensive feature set, including the newly introduced reporting functionality and built-in web monitoring based on the Selenium driver, which allows for sophisticated end-user experience monitoring through automated browser interactions.</p> <p>Zabbix is more than just a simple monitoring tool. It offers a wide range of features that allow you to:</p> <ul> <li>Monitor diverse environments: Track the performance and availability of servers, virtual machines, network devices, databases, and applications.</li> <li>Create dynamic visualizations: Use dashboards, graphs, maps, and screens to visualize data and get an overview of your system's health at a glance.</li> <li>Set up complex alerting mechanisms: Define triggers and actions that notify you of potential issues before they become critical, using various channels like email, SMS, and integrations with external services.</li> <li>Automate monitoring tasks: Leverage auto-discovery and auto-registration to keep up with changing environments without manual intervention.</li> <li>Customize and extend: Build custom scripts, templates, and integrations to tailor Zabbix to your specific needs.</li> </ul>"},{"location":"ch01-zabbix-components/basic-installation/","title":"Basic installation","text":"<p>In this chapter, we will walk through the process of installing the Zabbix server. There are many different ways to setup a Zabbix server. We will cover the most common setups with MariaDB and PostgreSQL on Ubuntu and on Rocky Linux.</p> <p>Before beginning the installation, it is important to understand the architecture of Zabbix. The Zabbix server is structured in a modular fashion, composed of three main components, which we will discuss in detail.</p> <ul> <li>The Zabbix server</li> <li>The Zabbix web server</li> <li>The Zabbix database</li> </ul> <p> 1.1 Zabbix basic split installation</p> <p>All of these components can either be installed on a single server or distributed across three separate servers. The core of the system is the Zabbix server, often referred to as the \"brain.\" This component is responsible for processing trigger calculations and sending alerts. The database serves as the storage for the Zabbix server's configuration and all the data it collects. The web server provides the user interface (front-end) for interacting with the system. It is important to note that the Zabbix API is part of the front-end component, not the Zabbix server itself.</p> <p>These components must function together seamlessly, as illustrated in the diagram above. The Zabbix server must read configurations and store monitoring data in the database, while the front-end needs access to read and write configuration data. Furthermore, the front-end must be able to check the status of the Zabbix server and retrieve additional necessary information to ensure smooth operation.</p> <p>For our setup, we will be using two virtual machines (VMs): one VM will host both the Zabbix server and the Zabbix web front-end, while the second VM will host the Zabbix database.</p> Note <p>It's perfect possible to install all components on 1 single VM or every component on a separate VM. Reason we split the DB as an example is because the database will probably be the first component giving you performance headaches. It's also the component that needs some extra attention when we split it so for this reason we have chosen in this example to split the database from the rest of the setup.</p> Note <p>A crucial consideration for those managing Zabbix installations is the database back-end. Zabbix 7.0 marks the final release to offer support for Oracle Database. Consequently, systems running Zabbix 7.0 or any prior version must undertake a database migration to either PostgreSQL, MySQL, or a compatible fork such as MariaDB before upgrading to a later Zabbix release. This migration is a mandatory step to ensure continued functionality and compatibility with future Zabbix versions.</p> <p>We will cover the following topics:</p> <ul> <li>Install our Database based on MariaDB.</li> <li>Install our Database based on PostgreSQL.</li> <li>Installing the Zabbix server.</li> <li>Install the frontend.</li> </ul>"},{"location":"ch01-zabbix-components/basic-installation/#installing-the-mariadb-database","title":"Installing the MariaDB database","text":"<p>To begin the installation process for the MariaDB server, the first step involves manually creating a repository configuration file. This file, mariadb.repo on Rocky, must be placed in the /etc/yum.repos.d/ directory. The repository file will allow your package manager to locate and install the necessary MariaDB components. For Ubuntu we need to import the repository keys and create a file for example '/etc/apt/sources.list.d/mariadb.sources'.</p>"},{"location":"ch01-zabbix-components/basic-installation/#add-the-mariadb-repository","title":"Add the MariaDB repository","text":"<p>To create the MariaDB repository file, execute the following command in your terminal:</p> <p>RedHat</p> <pre><code># vi /etc/yum.repos.d/mariadb.repo\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt-get install apt-transport-https curl\n# sudo mkdir -p /etc/apt/keyrings\n# sudo curl -o /etc/apt/keyrings/mariadb-keyring.pgp 'https://mariadb.org/mariadb_release_signing_key.pgp'\n\n# sudo vi /etc/apt/sources.list.d/mariadb.sources\n</code></pre> <p>This will open a text editor where you can input the repository configuration details. Once the repository is configured, you can proceed with the installation of MariaDB using your package manager.</p> Tip <p>Always check Zabbix documentation for the latest supported versions.</p> <p>The latest config can be found here: https://mariadb.org/download/?t=repo-config</p> <p>Here's the configuration you need to add into the file:</p> <p>RedHat</p> <pre><code># MariaDB 11.4 RedHatEnterpriseLinux repository list - created 2025-02-21 10:15 UTC\n# https://mariadb.org/download/\n[mariadb]\nname = MariaDB\n# rpm.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.\n# baseurl = https://rpm.mariadb.org/11.4/rhel/$releasever/$basearch\nbaseurl = https://mirror.bouwhuis.network/mariadb/yum/11.4/rhel/$releasever/$basearch\n# gpgkey = https://rpm.mariadb.org/RPM-GPG-KEY-MariaDB\ngpgkey = https://mirror.bouwhuis.network/mariadb/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\n</code></pre> <p>Ubuntu</p> <pre><code># MariaDB 11.4 repository list - created 2025-02-21 11:42 UTC\n# https://mariadb.org/download/\nX-Repolib-Name: MariaDB\nTypes: deb\n# deb.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.\n# URIs: https://deb.mariadb.org/11.4/ubuntu\nURIs: https://mirror.bouwhuis.network/mariadb/repo/11.4/ubuntu\nSuites: noble\nComponents: main main/debug\nSigned-By: /etc/apt/keyrings/mariadb-keyring.pgp\n</code></pre> <p>After saving the file, ensure that everything is properly set up and that your MariaDB version is compatible with your Zabbix version to avoid potential integration issues.</p> <p>Before proceeding with the MariaDB installation, it's a best practice to ensure your operating system is up-to-date with the latest patches and security fixes. This will help maintain system stability and compatibility with the software you're about to install.</p> <p>To update your OS, run the following command:</p> <p>RedHat</p> <pre><code># dnf update -y\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt update -y &amp;&amp; sudo apt upgrade -y\n</code></pre> <p>This command will automatically fetch and install the latest updates available for your system, applying security patches, performance improvements, and bug fixes. Once the update process is complete, you can move forward with the MariaDB installation.</p>"},{"location":"ch01-zabbix-components/basic-installation/#install-the-mariadb-database","title":"Install the MariaDB database","text":"<p>With the operating system updated and the MariaDB repository configured, you are now ready to install the MariaDB server and client packages. This will provide the necessary components to run and manage your database.</p> <p>To install the MariaDB server and client, execute the following command:</p> <p>RedHat</p> <pre><code># dnf install MariaDB-server\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt-get install mariadb-server\n</code></pre> <p>This command will download and install both the server and client packages, enabling you to set up, configure, and interact with your MariaDB database. Once the installation is complete, you can proceed to start and configure the MariaDB service.</p> <p>Now that MariaDB is installed, we need to enable the service to start automatically upon boot and start it immediately. Use the following command to accomplish this:</p> <p>RedHat</p> <pre><code># systemctl enable mariadb --now\n</code></pre> <p>This command will both enable and start the MariaDB service. Once the service is running, you can verify that the installation was successful by checking the version of MariaDB using the following command:</p> <p>RedHat and Ubuntu</p> <pre><code># sudo mariadb -V\n</code></pre> <p>The expected output should resemble this:</p> <pre><code>mariadb from 11.4.5-MariaDB, client 15.2 for Linux (aarch64) using  EditLine wrapper\n</code></pre> <p>To ensure that the MariaDB service is running properly, you can check its status with the following command:</p> <pre><code>RedHat and Ubuntu\n# sudo systemctl status mariadb\n</code></pre> <p>You should see an output similar to this, indicating that the MariaDB service is active and running:</p> <pre><code>mariadb.service - MariaDB 11.4.5 database server\n     Loaded: loaded (/usr/lib/systemd/system/mariadb.service; enabled; preset: disabled)\n    Drop-In: /etc/systemd/system/mariadb.service.d\n             \u2514\u2500migrated-from-my.cnf-settings.conf\n     Active: active (running) since Fri 2025-02-21 11:22:59 CET; 2min 8s ago\n       Docs: man:mariadbd(8)\n             https://mariadb.com/kb/en/library/systemd/\n    Process: 23147 ExecStartPre=/bin/sh -c systemctl unset-environment _WSREP_START_POSITION (code=exited, status=0/SUCCESS)\n    Process: 23148 ExecStartPre=/bin/sh -c [ ! -e /usr/bin/galera_recovery ] &amp;&amp; VAR= ||   VAR=`/usr/bin/galera_recovery`; [ $? -eq 0 ]   &amp;&amp; systemctl set-enviro&gt;\n    Process: 23168 ExecStartPost=/bin/sh -c systemctl unset-environment _WSREP_START_POSITION (code=exited, status=0/SUCCESS)\n   Main PID: 23156 (mariadbd)\n     Status: \"Taking your SQL requests now...\"\n      Tasks: 7 (limit: 30620)\n     Memory: 281.7M\n        CPU: 319ms\n     CGroup: /system.slice/mariadb.service\n             \u2514\u250023156 /usr/sbin/mariadbd\n\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] InnoDB: Loading buffer pool(s) from /var/lib/mysql/ib_buffer_pool\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Plugin 'FEEDBACK' is disabled.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Plugin 'wsrep-provider' is disabled.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] InnoDB: Buffer pool(s) load completed at 250221 11:22:58\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Server socket created on IP: '0.0.0.0'.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Server socket created on IP: '::'.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] mariadbd: Event Scheduler: Loaded 0 events\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] /usr/sbin/mariadbd: ready for connections.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: Version: '11.4.5-MariaDB'  socket: '/var/lib/mysql/mysql.sock'  port: 3306  MariaDB Server\nFeb 21 11:22:59 localhost.localdomain systemd[1]: Started MariaDB 11.4.5 database server.\n</code></pre> <p>This confirms that your MariaDB server is up and running, ready for further configuration.</p>"},{"location":"ch01-zabbix-components/basic-installation/#securing-the-mariadb-database","title":"Securing the MariaDB Database","text":"<p>To enhance the security of your MariaDB server, it's essential to remove unnecessary test databases, anonymous users, and set a root password. This can be done using the mariadb-secure-installation script, which provides a step-by-step guide to securing your database.</p> <p>Run the following command:</p> <p>RedHat and Ubuntu</p> <pre><code># sudo mariadb-secure-installation\n</code></pre> <pre><code>NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\n      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!\n\nIn order to log into MariaDB to secure it, we'll need the current\npassword for the root user. If you've just installed MariaDB, and\nhaven't set the root password yet, you should just press enter here.\n\nEnter current password for root (enter for none):\nOK, successfully used password, moving on...\n\nSetting the root password or using the unix_socket ensures that nobody\ncan log into the MariaDB root user without the proper authorisation.\n\nYou already have your root account protected, so you can safely answer 'n'.\n\nSwitch to unix_socket authentication [Y/n] n\n ... skipping.\n\nYou already have your root account protected, so you can safely answer 'n'.\n\nChange the root password? [Y/n] y\nNew password:\nRe-enter new password:\nPassword updated successfully!\nReloading privilege tables..\n ... Success!\n\n\nBy default, a MariaDB installation has an anonymous user, allowing anyone\nto log into MariaDB without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] y\n ... Success!\n\nNormally, root should only be allowed to connect from 'localhost'.  This\nensures that someone cannot guess at the root password from the network.\n\nDisallow root login remotely? [Y/n] y\n ... Success!\n\nBy default, MariaDB comes with a database named 'test' that anyone can\naccess.  This is also intended only for testing, and should be removed\nbefore moving into a production environment.\n\nRemove test database and access to it? [Y/n] y\n - Dropping test database...\n ... Success!\n - Removing privileges on test database...\n ... Success!\n\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\n\nReload privilege tables now? [Y/n] y\n ... Success!\n\nCleaning up...\n\nAll done!  If you've completed all of the above steps, your MariaDB\ninstallation should now be secure.\n\nThanks for using MariaDB!\n</code></pre> <p>The mariadb-secure-installation script will guide you through several key steps:</p> <ol> <li>Set a root password if one isn't already set.</li> <li>Remove anonymous users.</li> <li>Disallow remote root logins.</li> <li>Remove the test database.</li> <li>Reload the privilege tables to ensure the changes take effect.</li> </ol> <p>Once complete, your MariaDB instance will be significantly more secure. You are now ready to configure the database for Zabbix.</p>"},{"location":"ch01-zabbix-components/basic-installation/#create-the-zabbix-database","title":"Create the Zabbix database","text":"<p>With MariaDB now set up and secured, we can move on to creating the database for Zabbix. This database will store all the necessary data related to your Zabbix server, including configuration information and monitoring data.</p> <p>Follow these steps to create the Zabbix database:</p> <p>Log in to the MariaDB shell as the root user: You'll be prompted to enter the root password that you set during the mariadb-secure-installation process.</p> <p>RedHat and Ubuntu</p> <pre><code># mariadb -uroot -p\n</code></pre> <p>Once you're logged into the MariaDB shell, run the following command to create a database for Zabbix:</p> <pre><code>MariaDB [(none)]&gt; CREATE DATABASE zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\n</code></pre> Note <p>utf8mb4 is a proper implementation of UTF-8 in MySQL/MariaDB, supporting all Unicode characters, including emojis. The older utf8 charset in MySQL/MariaDB only supports up to three bytes per character and is not a true UTF-8 implementation, which is why utf8mb4 is recommended.</p> <p>This command creates a new database named zabbix with the UTF-8 character set, which is required for Zabbix.</p> <p>Create a dedicated user for Zabbix and grant the necessary privileges: Next, you need to create a user that Zabbix will use to access the database. Replace password with a strong password of your choice.</p> <pre><code>MariaDB [(none)]&gt; CREATE USER 'zabbix-web'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nMariaDB [(none)]&gt; CREATE USER 'zabbix-srv'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nMariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix-srv'@'&lt;zabbix server ip&gt;';\nMariaDB [(none)]&gt; GRANT SELECT, UPDATE, DELETE, INSERT ON zabbix.* TO 'zabbix-web'@'&lt;zabbix server ip&gt;';\nMariaDB [(none)]&gt; FLUSH PRIVILEGES;\n</code></pre> <p>This creates new users for zabbix-web and zabbix-srv, grants them access to the zabbix database, and ensures that the privileges are applied immediately.</p> <p>In some cases, especially when setting up Zabbix with MariaDB, you might encounter issues related to stored functions and triggers if binary logging is enabled. To address this, you need to set the log_bin_trust_function_creators option to 1 in the MariaDB configuration file. This allows non-root users to create stored functions and triggers without requiring SUPER privileges, which are restricted when binary logging is enabled.</p> <pre><code>MariaDB [(none)]&gt; SET GLOBAL log_bin_trust_function_creators = 1;\nMariaDB [(none)]&gt; QUIT\n</code></pre> <p>At this point, your Zabbix database is ready, and you can proceed with configuring the Zabbix server to connect to the database.</p> Warning <p>In the Zabbix documentation, it is explicitly stated that deterministic triggers need to be created during the schema import. On MySQL and MariaDB systems, this requires setting GLOBAL log_bin_trust_function_creators = 1 if binary logging is enabled, and you lack superuser privileges.</p> <p>If the log_bin_trust_function_creators option is not set in the MySQL configuration file, it will block the creation of these triggers during schema import. This is essential because, without superuser access, non-root users cannot create triggers or stored functions unless this setting is applied.</p> <p>To summarize:</p> <ul> <li> <p>Binary logging enabled: If binary logging is enabled and the user does not   have superuser privileges, the creation of necessary Zabbix triggers will   fail unless log_bin_trust_function_creators = 1 is set.</p> </li> <li> <p>Solution: Add log_bin_trust_function_creators = 1 to the [mysqld] section   in your MySQL/MariaDB configuration file or temporarily set it at runtime   with SET GLOBAL log_bin_trust_function_creators = 1 if you have sufficient   permissions.</p> </li> </ul> <p>This ensures that Zabbix can successfully create the required triggers during schema import without encountering privilege-related errors.</p> <p>If we want our Zabbix server to connect to our DB then we also need to open our firewall port.</p> <p>RedHat</p> <pre><code># firewall-cmd --add-port=3306/tcp --permanent\n# firewall-cmd --reload\n</code></pre> <p>Ubuntu</p> <pre><code># sudo ufw allow 3306/tcp\n</code></pre>"},{"location":"ch01-zabbix-components/basic-installation/#populate-the-zabbix-db","title":"Populate the Zabbix DB","text":"<p>With the users and permissions set up correctly, you can now populate the database with the Zabbix schema created and other required elements. Follow these steps:</p> <p>One of the first things we need to do is add the Zabbix repository to our machine. This may sound weird but actually makes sense because we need to populate our DB with our Zabbix schemas.</p> <p>RedHat</p> <pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\n# dnf clean all\n# dnf install zabbix-sql-scripts -y\n</code></pre> <p>Ubuntu</p> <pre><code># sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# sudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# sudo apt update\n# sudo apt install zabbix-sql-scripts\n</code></pre> <p>Now lets upload the data from zabbix (db structure, images, user, ... ) for this we make use of the user <code>zabbix-srv</code> and we upload it all in our DB <code>zabbix</code>.</p> <p>RedHat and Ubuntu</p> <pre><code># sudo zcat /usr/share/zabbix/sql-scripts/mysql/server.sql.gz | mariadb --default-character-set=utf8mb4 -uroot -p zabbix\n</code></pre> Note <p>Depending on the speed of your hardware or virtual machine, the process may take anywhere from a few seconds to several minutes. Please be patient and avoid cancelling the operation; just wait for the prompt to appear.</p> <p>Log back into your MySQL Database as root</p> <pre><code># mariadb -uroot -p\n</code></pre> <p>Once the import of the Zabbix schema is complete and you no longer need the log_bin_trust_function_creators global parameter, it is a good practice to remove it for security reasons.</p> <p>To revert the change and set the global parameter back to 0, use the following command in the MariaDB shell:</p> <pre><code>mysql&gt; SET GLOBAL log_bin_trust_function_creators = 0;\nQuery OK, 0 rows affected (0.001 sec)\n</code></pre> <p>This command will disable the setting, ensuring that the servers security posture remains robust.</p> <p>This concludes our installation of the MariaDB</p>"},{"location":"ch01-zabbix-components/basic-installation/#installing-the-postgresql-database","title":"Installing the PostgreSQL database","text":"<p>For our DB setup with PostgreSQL we need to add our PostgreSQL repository first to the system. As of writing PostgreSQL 13-17 are supported but best is to have a look before you install it as new versions may be supported and older maybe unsupported both by Zabbix and PostgreSQL. Usually it's a good idea to go with the latest version that is supported by Zabbix. Zabbix also supports the extension TimescaleDB this is something we will talk later about. As you will see the setup from PostgreSQL is very different from MySQL not only the installation but also securing the DB.</p> <p>The table of compatibility can be found https://docs.timescale.com/self-hosted/latest/upgrades/upgrade-pg/</p>"},{"location":"ch01-zabbix-components/basic-installation/#add-the-postgresql-repository","title":"Add the PostgreSQL repository","text":"<p>So let us start first setting up our PostgreSQL repository with the following commands.</p> <p>RedHat</p> <pre><code>Install the repository RPM:\n# sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\nDisable the built-in PostgreSQL module:\n# sudo dnf -qy module disable postgresql\n</code></pre> <p>Ubuntu</p> <pre><code># Import the repository signing key:\nsudo apt install curl ca-certificates\nsudo install -d /usr/share/postgresql-common/pgdg\nsudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc\n\n# Create the repository configuration file:\nsudo sh -c 'echo \"deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" &gt; /etc/apt/sources.list.d/pgdg.list'\n\n# Update the package lists:\nsudo apt update\n\n</code></pre>"},{"location":"ch01-zabbix-components/basic-installation/#install-the-postgresql-databases","title":"Install the PostgreSQL databases","text":"<p>RedHat</p> <pre><code># Install PostgreSQL:\nsudo dnf install -y postgresql17-server\n\nInitialize the database and enable automatic start:\n# sudo /usr/pgsql-17/bin/postgresql-17-setup initdb\n# sudo systemctl enable postgresql-17 --now\n</code></pre> <p>Ubuntu</p> <pre><code>sudo apt -y install postgresql-17\n</code></pre> <p>To update your OS, run the following command:</p> <p>RedHat</p> <pre><code># dnf update -y\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt update -y &amp;&amp; sudo apt upgrade -y\n</code></pre>"},{"location":"ch01-zabbix-components/basic-installation/#securing-the-postgresql-database","title":"Securing the PostgreSQL database","text":"<p>PostgreSQL handles access permissions differently from MySQL and MariaDB. PostgreSQL relies on a file called pg_hba.conf to manage who can access the database, from where, and what encryption method is used for authentication.</p> Note <p>Client authentication in PostgreSQL is configured through the pg_hba.conf file, where \"HBA\" stands for Host-Based Authentication. This file specifies which users can access the database, from which hosts, and how they are authenticated. For further details, you can refer to the official PostgreSQL documentation.\" https://www.postgresql.org/docs/current/auth-pg-hba-conf.html</p> <p>Add the following lines, the order here is important.</p> <p>Redhat</p> <pre><code># vi /var/lib/pgsql/17/data/pg_hba.conf\n</code></pre> <p>Ubuntu</p> <pre><code># sudo vi /etc/postgresql/17/main/pg_hba.conf\n</code></pre> <p>The result should look like : </p> <pre><code># \"local\" is for Unix domain socket connections only\nlocal    zabbix     zabbix-srv                                                              scram-sha-256\nlocal    all            all                                                                            peer\n# IPv4 local connections\nhost     zabbix     zabbix-srv          &lt;ip from zabbix server/24&gt;     scram-sha-256\nhost     zabbix     zabbix-web        &lt;ip from zabbix server/24&gt;     scram-sha-256\nhost     all            all                         127.0.0.1/32                            scram-sha-256\n</code></pre> <p>After we changed the pg_hba file don't forget to restart postgres else the settings will not be applied. But before we restart let us also edit the file postgresql.conf and allow our database to listen on our network interface for incoming connections from the zabbix server. Postgresql will standard only allow connections from the socket.</p> <p>RedHat</p> <pre><code># vi /var/lib/pgsql/17/data/postgresql.conf\n</code></pre> <p>Ubuntu</p> <pre><code># vi /etc/postgresql/17/main/postgresql.conf\n</code></pre> <p>To configure PostgreSQL to listen on all network interfaces, you need to modify the <code>postgresql.conf</code> file. Locate the following line:</p> <pre><code>#listen_addresses = 'localhost'\n</code></pre> <p>and replace it with:</p> <pre><code>listen_addresses = '*'\n</code></pre> <p>This will enable PostgreSQL to accept connections from any network interface, not just the local machine. In production it's probably a good idea to limit  who can connect to the DB. After making this change, restart the PostgreSQL service to apply the new settings:</p> <p>Redhat</p> <pre><code># systemctl restart postgresql-17\n</code></pre> <p>Ubuntu</p> <pre><code>sudo systemctl restart postgresql\n</code></pre> <p>If the service fails to restart, review the pg_hba.conf file for any syntax errors, as incorrect entries here may prevent PostgreSQL from starting.</p> <p>Next, to prepare your PostgreSQL instance for Zabbix, you'll need to create the necessary database tables. Begin by installing the Zabbix repository, as you did for the Zabbix server. Then, install the appropriate Zabbix package that contains the predefined tables, images, icons, and other database elements needed for the Zabbix application.</p>"},{"location":"ch01-zabbix-components/basic-installation/#create-the-zabbix-database_1","title":"Create the Zabbix database","text":"<p>To begin, add the Zabbix repository to your system by running the following commands:</p> <p>RedHat</p> <pre><code># dnf install https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm -y\n# dnf install zabbix-sql-scripts -y \n</code></pre> <p>Ubuntu</p> <pre><code># sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# sudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# sudo apt update -y\n# sudo apt install zabbix-sql-scripts -y\n</code></pre> <p>With the necessary packages installed, you are now ready to create the Zabbix users for both the server and frontend.</p> <p>First, switch to the <code>postgres</code> user and create the Zabbix server database user:</p> <pre><code># sudo su - postgres\n# createuser --pwprompt zabbix-srv\nEnter password for new role: &lt;server-password&gt;\nEnter it again: &lt;server-password&gt;\n</code></pre> <p>Next, create the Zabbix frontend user, which will be used to connect to the database:</p> <pre><code># createuser --pwprompt zabbix-web\nEnter password for new role: &lt;frontend-password&gt;\nEnter it again: &lt;frontend-password&gt;\n</code></pre> <p>After creating the users, you need to prepare the database schema. As the root or your regular user, unzip the necessary schema files by running the following command:</p> <p>RedHat</p> <pre><code># gzip -d /usr/share/zabbix/sql-scripts/postgresql/server.sql.gz\n</code></pre> <p>Ubuntu</p> <pre><code># sudo gzip -d /usr/share/zabbix/sql-scripts/postgresql/server.sql.gz\n</code></pre> Note <p>Zabbix seems to like to change the locations of the script to populate the DB every version or in between versions. If you encounter an error take a look at the Zabbix documentation there is a good chance that some location was changed.</p> <p>This will extract the database schema required for the Zabbix server.</p> <p>Now that the users are created, the next step is to create the Zabbix database.  First, switch to the <code>postgres</code> user and execute the following command to create the database with the owner set to zabbix-srv:</p> <p>RedHat</p> <pre><code># su - postgres\n# createdb -E Unicode -O zabbix-srv zabbix\n# exit\n</code></pre> <p>Ubuntu</p> <pre><code># sudo su - postgres\n# createdb -E Unicode -O zabbix-srv zabbix\n# exit\n</code></pre> <p>Once the database is created, you should verify the connection and ensure that the correct user session is active. To do this, log into the zabbix database using the zabbix-srv user:</p> <pre><code># psql -d zabbix -U zabbix-srv\n</code></pre> <p>After logging in, run the following SQL query to confirm that both the <code>session_user</code> and <code>current_user</code> are set to <code>zabbix-srv</code>:</p> <pre><code>zabbix=&gt; SELECT session_user, current_user;\n session_user | current_user\n--------------+--------------\n zabbix-srv   | zabbix-srv\n(1 row)\n</code></pre> <p>If the output matches, you are successfully connected to the database with the correct user.</p> <p>PostgreSQL indeed differs significantly from MySQL or MariaDB in several aspects, and one of the key features that sets it apart is its use of schemas. Unlike MySQL, where databases are more standalone, PostgreSQL's schema system provides a structured, multi-user environment within a single database.</p> <p>Schemas act as logical containers within a database, enabling multiple users or applications to access and manage data independently without conflicts. This feature is especially valuable in environments where several users or applications need to interact with the same database concurrently. Each user or application can have its own schema, preventing accidental interference with each other's data.</p> Note <p>PostgreSQL comes with a default schema, typically called public, but it's in general best practice to create custom schemas to better organize and separate database objects, especially in complex or multi-user environments.</p> <p>For more in-depth information, I recommend checking out the detailed guide at this URI, https://hevodata.com/learn/postgresql-schema/#schema which explains the benefits and use cases for schemas in PostgreSQL.</p> <p>To finalize the database setup for Zabbix, we need to configure schema permissions for both the <code>zabbix-srv</code> and <code>zabbix-web</code> users.</p> <p>First, we create a custom schema named <code>zabbix_server</code> and assign ownership to the <code>zabbix-srv</code> user:</p> <pre><code>zabbix=&gt; CREATE SCHEMA zabbix_server AUTHORIZATION \"zabbix-srv\";\n</code></pre> <p>Next, we set the <code>search path</code> to <code>zabbix_server</code> schema so that it's the default for the current session:</p> <pre><code>zabbix=&gt; SET search_path TO \"zabbix_server\";\n</code></pre> <p>To confirm the schema setup, you can list the existing schemas:</p> <pre><code>zabbix=&gt; \\dn\n          List of schemas\n     Name      |       Owner\n---------------+-------------------\n public        | pg_database_owner\n zabbix_server | zabbix-srv\n(2 rows)\n</code></pre> <p>At this point, the <code>zabbix-srv</code> user has full access to the schema, but the <code>zabbix-web</code> user still needs appropriate permissions to connect and interact with the database. First, we grant <code>USAGE</code> privileges on the schema to allow <code>zabbix-web</code> to connect:</p> <pre><code>zabbix=# GRANT USAGE ON SCHEMA zabbix_server TO \"zabbix-web\";\n</code></pre> <p>However, <code>zabbix-web</code> still cannot perform any operations on the tables or sequences. To allow basic data interaction without giving too many privileges, grant the following permissions:</p> <ul> <li>For tables: SELECT, INSERT, UPDATE, and DELETE.</li> <li>For sequences: SELECT and UPDATE.</li> </ul> <pre><code>zabbix=# GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA zabbix_server TO \"zabbix-web\";\n</code></pre> <pre><code>zabbix=# GRANT SELECT, UPDATE ON ALL SEQUENCES IN SCHEMA zabbix_server TO \"zabbix-web\";\n</code></pre>"},{"location":"ch01-zabbix-components/basic-installation/#populate-the-zabbix-db_1","title":"Populate the Zabbix DB","text":"<p>Now, the <code>zabbix-web</code> user has appropriate access to interact with the schema while maintaining security by limiting permissions to essential operations.</p> <p>With the users and permissions set up correctly, you can now populate the database with the Zabbix schema created and other required elements. Follow these steps:</p> <ul> <li>Execute the SQL file to populate the database. Run the following command in the <code>psql</code> shell:</li> </ul> Warning <p>Make sure you did previous steps carefully so that you have selected the correct search_path.</p> <pre><code>sql zabbix=# \\i /usr/share/zabbix/sql-scripts/postgresql/server.sql\n</code></pre> Warning <p>Depending on your hardware or VM performance, this process can take anywhere from a few seconds to several minutes. Please be patient and avoid cancelling the operation.</p> <ul> <li>Monitor the progress as the script runs. You will see output similar to:</li> </ul> <pre><code>zabbix=&gt; \\i /usr/share/zabbix/sql-scripts/postgresql/server.sql\nCREATE TABLE\nCREATE INDEX\nCREATE TABLE\nCREATE INDEX\nCREATE TABLE\n...\n...\n...\nINSERT 0 10444\nDELETE 90352\nCOMMIT\n</code></pre> <p>Once the script completes and you return to the <code>zabbix=#</code> prompt, the database should be successfully populated with all the required tables, schemas, images, and other elements needed for Zabbix.</p> Note <p>If you encounter the following error during the SQL import:  <code>vbnet psql:/usr/share/zabbix/sql-scripts/postgresql/server.sql:7: ERROR: no schema has been selected to create in</code> It indicates that the search_path setting might not have been correctly applied. This setting is crucial because it specifies the schema where the tables and other objects should be created. By correctly setting the search path, you ensure that the SQL script will create tables and other objects in the intended schema.</p> <p>To ensure that the Zabbix tables were created successfully and have the correct permissions, you can verify the table list and their ownership using the <code>psql</code> command:</p> <ul> <li>List the Tables: Use the following command to list all tables in the <code>zabbix_server</code> schema:</li> </ul> <pre><code>sql zabbix=# \\dt\n</code></pre> <p>You should see a list of tables with their schema, name, type, and owner. For example:</p> <pre><code>zabbix=&gt; \\dt\n                        List of relations\n    Schema     |            Name            | Type  |   Owner\n---------------+----------------------------+-------+------------\n zabbix_server | acknowledges               | table | zabbix-srv\n zabbix_server | actions                    | table | zabbix-srv\n zabbix_server | alerts                     | table | zabbix-srv\n zabbix_server | auditlog                   | table | zabbix-srv\n zabbix_server | autoreg_host               | table | zabbix-srv\n zabbix_server | changelog                  | table | zabbix-srv\n zabbix_server | conditions                 | table | zabbix-srv\n...\n...\n...\n zabbix_server | valuemap                   | table | zabbix-srv\n zabbix_server | valuemap_mapping           | table | zabbix-srv\n zabbix_server | widget                     | table | zabbix-srv\n zabbix_server | widget_field               | table | zabbix-srv\n(203 rows)\n</code></pre> <ul> <li>Verify Permissions: Confirm that the zabbix-srv user owns the tables and has the necessary permissions. You can check permissions for specific tables using the \\dp command:</li> </ul> <pre><code>sql zabbix=# \\dp zabbix_server.*\n</code></pre> <p>This will display the access privileges for all tables in the <code>zabbix_server</code> schema. Ensure that <code>zabbix-srv</code> has the required privileges.</p> <p>If everything looks correct, your tables are properly created and the <code>zabbix-srv</code> user has the appropriate ownership and permissions. If you need to adjust any permissions, you can do so using the GRANT commands as needed.</p> Note <p>If you prefer not to set the search path manually each time you log in as the <code>zabbix-srv</code> user, you can configure PostgreSQL to automatically use the desired search path. Run the following SQL command to set the default search path for the <code>zabbix-srv</code> role:</p> <p>sql zabbix=&gt; ALTER ROLE \"zabbix-srv\" SET search_path = \"$user\", public, zabbix_server;</p> <p>This command ensures that every time the <code>zabbix-srv</code> user connects to the database, the <code>search_path</code> is automatically set to include <code>$user</code>, <code>public</code>, and <code>zabbix_server</code>.</p> <p>If you are ready you can exit the database and return as user root.</p> <pre><code>zabbix=&gt; \\q\n</code></pre> <p>If we want our Zabbix server to be able to connect to our DB then we also need to open our firewall port.</p> <p>RedHat</p> <pre><code># firewall-cmd --add-port=5432/tcp --permanent\n# firewall-cmd --reload\n</code></pre> <p>Ubuntu</p> <pre><code># sudo ufw allow 5432/tcp\n</code></pre> Note <p>Make sure your DB is listening on the correct IP and not on 127.0.0.1. You could add the following files to your config file. This would allow MariaDB to listen on all interfaces. Best to limit it only to the needed IP.</p> <p>/etc/mysql/mariadb.cnf</p> <p>[mariadb] log_error=/var/log/mysql/mariadb.err log_warnings=3 bind-address = 0.0.0.0</p> <p>This concludes our installation of the PostgreSQL database.</p>"},{"location":"ch01-zabbix-components/basic-installation/#installing-the-zabbix-server-for-mariadbmysql","title":"Installing the Zabbix server for MariaDB/Mysql","text":"<p>Before proceeding with the installation of your Zabbix server, ensure that the server is properly configured, as outlined in the previous section System Requirements</p> <p>Another critical step at this stage if you use RedHat based systems is disabling SELinux, which can interfere with the installation and operation of Zabbix. We will revisit SELinux at the end of this chapter once our installation is finished.</p> <p>To check the current status of SELinux, you can use the following command: `sestatus``</p> <pre><code># sestatus\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   enforcing\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre> <p>As shown, the system is currently in enforcing mode. To temporarily disable SELinux, you can run the following command: <code>setenforce 0</code></p> <pre><code># setenforce 0\n# sestatus\n\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre> <p>Now, as you can see, the mode is switched to permissive. However, this change is not persistent across reboots. To make it permanent, you need to modify the SELinux configuration file located at <code>/etc/selinux/config</code>. Open the file and replace enforcing with <code>permissive</code>.</p> <p>Alternatively, you can achieve the same result more easily by running the following command:</p> <p>RedHat</p> <pre><code># sed -i 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config\n</code></pre> <p>This line will alter the configuration file for you. So when we run <code>sestatus</code> again we will see that we are in <code>permissive</code> mode and that our configuration file is also in permissive mode.</p> <pre><code># sestatus\n\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          permissive\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre>"},{"location":"ch01-zabbix-components/basic-installation/#adding-the-zabbix-repository","title":"Adding the Zabbix repository","text":"<p>From the Zabbix Download page https://www.zabbix.com/download, select the appropriate Zabbix version you wish to install. In this case, we will be using Zabbix 8.0 LTS. Additionally, ensure you choose the correct OS distribution for your environment, which will be Rocky Linux 9 or Ubuntu 24.04 in our case.</p> <p>We will be installing the Zabbix Server along with NGINX as the web server for the front-end. Make sure to download the relevant packages for your chosen configuration.</p> <p></p> <p>If you make use of a RHEL based system like Rocky then the first step is to disable the Zabbix packages provided by the EPEL repository, if it's installed on your system. To do this, edit the <code>/etc/yum.repos.d/epel.repo</code> file and add the following statement to disable the EPEL repository by default:</p> <p>RedHat</p> <pre><code>[epel]\n...\nexcludepkgs=zabbix*\n</code></pre> Tip <p>It's considered bad practice to keep the EPEL repository enabled all the time, as it may cause conflicts by unintentionally overwriting or installing unwanted packages. Instead, it's safer to enable the repository only when needed, by using the following command during installations: dnf install --enablerepo=epel  This ensures that EPEL is only enabled when explicitly required. <p>Next, we will install the Zabbix repository on our operating system. After adding the Zabbix repository, it is recommended to perform a repository cleanup to remove old cache files and ensure the repository metadata is up to date. You can do this by running:</p> <p>RedHat</p> <pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\n# dnf clean all\n</code></pre> <p>Ubuntu</p> <pre><code># sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# sudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# sudo apt update\n</code></pre> <p>This will refresh the repository metadata and prepare the system for Zabbix installation.</p> Note <p>A repository in Linux is a configuration that allows you to access and install software packages. You can think of it like an \"app store\" where you find and download software from a trusted source, in this case, the Zabbix repository. Many repositories are available, but it's important to only add those you trust. The safest practice is to stick to the repositories provided by your operating  system and only add additional ones when you're sure they are both trusted and necessary.</p> <p>For our installation, the Zabbix repository is provided by the vendor itself, making it a trusted source. Another popular and safe repository for RedHat-based systems is EPEL (Extra Packages for Enterprise Linux), which is commonly used in enterprise environments. However, always exercise caution when adding new repositories to ensure system security and stability.</p>"},{"location":"ch01-zabbix-components/basic-installation/#configuring-the-zabbix-server-for-mysqlmariadb","title":"Configuring the Zabbix server for MySQL/MariaDB","text":"<p>Now that we've added the Zabbix repository with the necessary software, we are ready to install both the Zabbix server and the web server. Keep in mind that the web server doesn't need to be installed on the same machine as the Zabbix server; they can be hosted on separate systems if desired.</p> <p>To install the Zabbix server and the web server components for MySQL/MariaDB, run the following command:</p> <p>RedHat</p> <pre><code># dnf install zabbix-server-mysql -y\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt install zabbix-server-mysql\n</code></pre> <p>After successfully installing the Zabbix server and frontend packages, we need to configure the Zabbix server to connect to the database. This requires modifying the Zabbix server configuration file. Open the <code>/etc/zabbix/zabbix_server.conf</code> file and update the following lines to match your database configuration:</p> <p>RedHat and Ubuntu</p> <pre><code>sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre> <pre><code>DBHost=&lt;database-host&gt;\nDBName=&lt;database-name&gt;\nDBUser=&lt;database-user&gt;\nDBPassword=&lt;database-password&gt;\n</code></pre> <p>Replace , , , and  with the appropriate values for your setup. This ensures that the Zabbix server can communicate with your database. <p>Ensure that there is no # (comment symbol) in front of the configuration parameters, as Zabbix will treat lines beginning with # as comments, ignoring them during execution. Additionally, double-check for duplicate configuration lines; if there are multiple lines with the same parameter, Zabbix will use the value from the last occurrence.</p> <p>For our setup, the configuration will look like this:</p> <pre><code>DBHost=&lt;ip or dns of your MariaDB server&gt;\nDBName=zabbix\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=3306\n</code></pre> <p>In this example:</p> <ul> <li>DBHost refers to the host where your database is running (use localhost if it's on the same machine).</li> <li>DBName is the name of the Zabbix database.</li> <li>DBUser is the database user.</li> <li>DBPassword is the password for the database user.</li> </ul> <p>Make sure the settings reflect your environment's database configuration.</p> Note <p>The Zabbix server configuration file offers an option to include additional configuration files for custom parameters. For a production environment, it's often best to avoid altering the original configuration file directly. Instead, you can create and include a separate configuration file for any additional or modified parameters. This approach ensures that your original configuration file remains untouched, which is particularly useful when performing upgrades or managing configurations with tools like Ansible, Puppet, or SaltStack. </p> <p>To enable this feature, remove the # from the line:</p> <pre><code># Include=/usr/local/etc/zabbix_server.conf.d/*.conf\n</code></pre> <p>Ensure the path <code>/usr/local/etc/zabbix_server.conf.d/</code> exists and create a custom configuration file in this directory. This file should be readable by the <code>zabbix</code> user. By doing so, you can add or modify parameters without modifying the default configuration file, making system management and upgrades smoother.</p> <p>With the Zabbix server configuration updated to connect to your database, you can now start and enable the Zabbix server service. Run the following command to enable the Zabbix server and ensure it starts automatically on boot:</p> <p>Redhat and Ubuntu</p> <pre><code># sudo systemctl enable zabbix-server --now\n</code></pre> <p>This command will start the Zabbix server service immediately and configure it to launch on system startup. To verify that the Zabbix server is running correctly, check the log file for any messages. You can view the latest entries in the <code>Zabbix server</code> log file using:</p> <pre><code>tail /var/log/zabbix/zabbix_server.log\n</code></pre> <p>Look for messages indicating that the server has started successfully. If there are any issues, the log file will provide details to help with troubleshooting.</p> <pre><code>12074:20250225:145333.529 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12074:20250225:145333.530 ****** Enabled features ******\n12074:20250225:145333.530 SNMP monitoring:           YES\n12074:20250225:145333.530 IPMI monitoring:           YES\n12074:20250225:145333.530 Web monitoring:            YES\n12074:20250225:145333.530 VMware monitoring:         YES\n12074:20250225:145333.530 SMTP authentication:       YES\n12074:20250225:145333.530 ODBC:                      YES\n12074:20250225:145333.530 SSH support:               YES\n12074:20250225:145333.530 IPv6 support:              YES\n12074:20250225:145333.530 TLS support:               YES\n12074:20250225:145333.530 ******************************\n12074:20250225:145333.530 using configuration file: /etc/zabbix/zabbix_server.conf\n12074:20250225:145333.545 current database version (mandatory/optional): 07020000/07020000\n12074:20250225:145333.545 required mandatory version: 07020000\n12075:20250225:145333.557 starting HA manager\n12075:20250225:145333.566 HA manager started in active mode\n12074:20250225:145333.567 server #0 started [main process]\n12076:20250225:145333.567 server #1 started [service manager #1]\n12077:20250225:145333.567 server #2 started [configuration syncer #1]\n12078:20250225:145333.718 server #3 started [alert manager #1]\n12079:20250225:145333.719 server #4 started [alerter #1]\n12080:20250225:145333.719 server #5 started [alerter #2]\n12081:20250225:145333.719 server #6 started [alerter #3]\n12082:20250225:145333.719 server #7 started [preprocessing manager #1]\n12083:20250225:145333.719 server #8 started [lld manager #1]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <pre><code>12068:20250225:145309.018 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12068:20250225:145309.018 ****** Enabled features ******\n12068:20250225:145309.018 SNMP monitoring:           YES\n12068:20250225:145309.018 IPMI monitoring:           YES\n12068:20250225:145309.018 Web monitoring:            YES\n12068:20250225:145309.018 VMware monitoring:         YES\n12068:20250225:145309.018 SMTP authentication:       YES\n12068:20250225:145309.018 ODBC:                      YES\n12068:20250225:145309.018 SSH support:               YES\n12068:20250225:145309.018 IPv6 support:              YES\n12068:20250225:145309.018 TLS support:               YES\n12068:20250225:145309.018 ******************************\n12068:20250225:145309.018 using configuration file: /etc/zabbix/zabbix_server.conf\n12068:20250225:145309.027 [Z3005] query failed: [1146] Table 'zabbix.users' doesn't exist [select userid from users limit 1]\n12068:20250225:145309.027 cannot use database \"zabbix\": database is not a Zabbix database\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <pre><code># systemctl status zabbix-server\n\u25cf zabbix-server.service - Zabbix Server\n     Loaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\n     Active: active (running) since Tue 2025-02-25 14:53:33 CET; 26min ago\n   Main PID: 12074 (zabbix_server)\n      Tasks: 77 (limit: 24744)\n     Memory: 71.5M\n        CPU: 18.535s\n     CGroup: /system.slice/zabbix-server.service\n             \u251c\u250012074 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n             \u251c\u250012075 \"/usr/sbin/zabbix_server: ha manager\"\n             \u251c\u250012076 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.027667 sec during 5.042628 sec]\"\n             \u251c\u250012077 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.051345 sec, idle 10 sec]\"\n             \u251c\u250012078 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.030391 sec during 5.031944 sec]\"\n             \u251c\u250012079 \"/usr/sbin/zabbix_server: alerter #1 started\"\n             \u251c\u250012080 \"/usr/sbin/zabbix_server: alerter #2 started\"\n             \u251c\u250012081 \"/usr/sbin/zabbix_server: alerter #3 started\"\n             \u251c\u250012082 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 0, processed 0 values, idle 5.023818 sec during 5.024830 sec]\"\n             \u251c\u250012083 \"/usr/sbin/zabbix_server: lld manager #1 [processed 0 LLD rules, idle 5.017278sec during 5.017574 sec]\"\n             \u251c\u250012084 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 21.031209 sec during 21.063879 sec]\"\n             \u251c\u250012085 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 43.195541 sec during 43.227934 sec]\"\n             \u251c\u250012086 \"/usr/sbin/zabbix_server: housekeeper [startup idle for 30 minutes]\"\n             \u251c\u250012087 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.017595 sec, idle 59 sec]\"\n             \u251c\u250012088 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000071 sec, idle 5 sec]\"\n             \u251c\u250012089 \"/usr/sbin/zabbix_server: browser poller #1 [got 0 values in 0.000066 sec, idle 5 sec]\"\n             \u251c\u250012090 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0 unsaved checks]\"\n             \u251c\u250012091 \"/usr/sbin/zabbix_server: history syncer #1 [processed 4 values, 3 triggers in 0.027382 sec, idle 1 sec]\"\n             \u251c\u250012092 \"/usr/sbin/zabbix_server: history syncer #2 [processed 0 values, 0 triggers in 0.000077 sec, idle 1 sec]\"\n             \u251c\u250012093 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000076 sec, idle 1 sec]\"\n             \u251c\u250012094 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000020 sec, idle 1 sec]\"\n             \u251c\u250012095 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.011627 sec, idle 3 sec]\"\n             \u251c\u250012096 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000081 sec, idle 5 sec]\"\n             \u251c\u250012097 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000068 sec, idle 1 sec]\"\n</code></pre> <p>This concludes our chapter on installing and configuring the Zabbix server with Mariadb. </p>"},{"location":"ch01-zabbix-components/basic-installation/#installing-the-zabbix-server-for-postgresql","title":"Installing the Zabbix server for PostgreSQL","text":"<p>Before proceeding with the installation of your Zabbix server, ensure that the server is properly configured, as outlined in the previous section System Requirements</p> <p>Another critical step at this stage if you use RedHat based systems is disabling SELinux, which can interfere with the installation and operation of Zabbix. We will revisit SELinux at the end of this chapter once our installation is finished.</p> <p>To check the current status of SELinux, you can use the following command: `sestatus``</p> <pre><code># sestatus\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   enforcing\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre> <p>As shown, the system is currently in enforcing mode. To temporarily disable SELinux, you can run the following command: <code>setenforce 0</code></p> <pre><code># setenforce 0\n# sestatus\n\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre> <p>Now, as you can see, the mode is switched to permissive. However, this change is not persistent across reboots. To make it permanent, you need to modify the SELinux configuration file located at <code>/etc/selinux/config</code>. Open the file and replace enforcing with <code>permissive</code>.</p> <p>Alternatively, you can achieve the same result more easily by running the following command:</p> <p>RedHat</p> <pre><code># sed -i 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config\n</code></pre> <p>This line will alter the configuration file for you. So when we run <code>sestatus</code> again we will see that we are in <code>permissive</code> mode and that our configuration file is also in permissive mode.</p> <pre><code># sestatus\n\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          permissive\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre>"},{"location":"ch01-zabbix-components/basic-installation/#adding-the-zabbix-repository_1","title":"Adding the Zabbix repository","text":"<p>From the Zabbix Download page https://www.zabbix.com/download, select the appropriate Zabbix version you wish to install. In this case, we will be using Zabbix 8.0 LTS. Additionally, ensure you choose the correct OS distribution for your environment, which will be Rocky Linux 9 or Ubuntu 24.04 in our case.</p> <p>We will be installing the Zabbix Server along with NGINX as the web server for the front-end. Make sure to download the relevant packages for your chosen configuration.</p> <p></p> <p>If you make use of a RHEL based system like Rocky then the first step is to disable the Zabbix packages provided by the EPEL repository, if it's installed on your system. To do this, edit the <code>/etc/yum.repos.d/epel.repo</code> file and add the following statement to disable the EPEL repository by default:</p> <p>RedHat</p> <pre><code>[epel]\n...\nexcludepkgs=zabbix*\n</code></pre> Tip <p>It's considered bad practice to keep the EPEL repository enabled all the time, as it may cause conflicts by unintentionally overwriting or installing unwanted packages. Instead, it's safer to enable the repository only when needed, by using the following command during installations: dnf install --enablerepo=epel  This ensures that EPEL is only enabled when explicitly required. <p>Next, we will install the Zabbix repository on our operating system. After adding the Zabbix repository, it is recommended to perform a repository cleanup to remove old cache files and ensure the repository metadata is up to date. You can do this by running:</p> <p>RedHat</p> <pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\n# dnf clean all\n</code></pre> <p>Ubuntu</p> <pre><code># sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# sudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# sudo apt update\n</code></pre> <p>This will refresh the repository metadata and prepare the system for Zabbix installation.</p> Note <p>A repository in Linux is a configuration that allows you to access and install software packages. You can think of it like an \"app store\" where you find and download software from a trusted source, in this case, the Zabbix repository. Many repositories are available, but it's important to only add those you trust. The safest practice is to stick to the repositories provided by your operating system and only add additional ones when you're sure they are both trusted and necessary.</p> <p>For our installation, the Zabbix repository is provided by the vendor itself, making it a trusted source. Another popular and safe repository for RedHat-based systems is EPEL (Extra Packages for Enterprise Linux), which is commonly used in enterprise environments. However, always exercise caution when adding new repositories to ensure system security and stability.</p>"},{"location":"ch01-zabbix-components/basic-installation/#configuring-the-zabbix-server-for-postgresql","title":"Configuring the Zabbix server for PostgreSQL.","text":"<p>We are ready to install both the Zabbix server and the web server. Keep in mind that the web server doesn't need to be installed on the same machine as the Zabbix server; they can be hosted on separate systems if desired.</p> <p>To install the Zabbix server and the web server components for PostgreSQL, run the following command:</p> <p>RedHat</p> <pre><code># dnf install zabbix-server-pgsql -y\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt install zabbix-server-pgsql\n</code></pre> <p>After successfully installing the Zabbix server packages, we need to configure the Zabbix server to connect to the database. This requires modifying the Zabbix server configuration file. Open the <code>/etc/zabbix/zabbix_server.conf</code> file and update the following lines to match your database configuration:</p> <p>RedHat and Ubuntu</p> <pre><code>#sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre> <pre><code>DBHost=&lt;database-host&gt;\nDBName=&lt;database-name&gt;\nDBSchema=&lt;database-schema&gt;\nDBUser=&lt;database-user&gt;\nDBPassword=&lt;database-password&gt;\n</code></pre> <p>Replace <code>database-host</code>, <code>database-name</code>, <code>database-user</code>,<code>database-schema</code> and <code>database-password</code> with the appropriate values for your setup. This ensures that the Zabbix server can communicate with your database.</p> <p>Ensure that there is no # (comment symbol) in front of the configuration parameters, as Zabbix will treat lines beginning with # as comments, ignoring them during execution. Additionally, double-check for duplicate configuration lines; if there are multiple lines with the same parameter, Zabbix will use the value from the last occurrence.</p> <p>For our setup, the configuration will look like this:</p> <pre><code>DBHost=&lt;ip or dns of your PostgreSQL server&gt;\nDBName=zabbix\nDBSchema=zabbix_server\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=5432\n</code></pre> <p>In this example:</p> <ul> <li>DBHost refers to the host where your database is running (use localhost if it's on the same machine).</li> <li>DBName is the name of the Zabbix database.</li> <li>DBUser is the database user.</li> <li>DBPassword is the password for the database user.</li> </ul> <p>Make sure the settings reflect your environment's database configuration.</p> Note <p>The Zabbix server configuration file offers an option to include additional configuration files for custom parameters. For a production environment, it's often best to avoid altering the original configuration file directly. Instead, you can create and include a separate configuration file for any additional or modified parameters. This approach ensures that your original configuration file remains untouched, which is particularly useful when performing upgrades or managing configurations with tools like Ansible, Puppet, or SaltStack.</p> <p>To enable this feature, remove the # from the line:</p> <pre><code># Include=/usr/local/etc/zabbix_server.conf.d/*.conf\n</code></pre> <p>Ensure the path <code>/usr/local/etc/zabbix_server.conf.d/</code> exists and create a custom configuration file in this directory. This file should be readable by the <code>zabbix</code> user. By doing so, you can add or modify parameters without modifying the default configuration file, making system management and upgrades smoother.</p> <p>With the Zabbix server configuration updated to connect to your database, you can now start and enable the Zabbix server service. Run the following command to enable the Zabbix server and ensure it starts automatically on boot:</p> <p>Redhat</p> <pre><code>systemctl enable zabbix-server --now\n</code></pre> <p>Ubuntu</p> <pre><code>sudo systemctl enable zabbix-server --now\n</code></pre> <p>This command will start the Zabbix server service immediately and configure it to launch on system startup. To verify that the Zabbix server is running correctly, check the log file for any messages. You can view the latest entries in the <code>Zabbix server</code> log file using:</p> <pre><code>tail /var/log/zabbix/zabbix_server.log\n</code></pre> <p>Look for messages indicating that the server has started successfully. If there are any issues, the log file will provide details to help with troubleshooting.</p> <pre><code>12074:20250225:145333.529 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12074:20250225:145333.530 ****** Enabled features ******\n12074:20250225:145333.530 SNMP monitoring:           YES\n12074:20250225:145333.530 IPMI monitoring:           YES\n12074:20250225:145333.530 Web monitoring:            YES\n12074:20250225:145333.530 VMware monitoring:         YES\n12074:20250225:145333.530 SMTP authentication:       YES\n12074:20250225:145333.530 ODBC:                      YES\n12074:20250225:145333.530 SSH support:               YES\n12074:20250225:145333.530 IPv6 support:              YES\n12074:20250225:145333.530 TLS support:               YES\n12074:20250225:145333.530 ******************************\n12074:20250225:145333.530 using configuration file: /etc/zabbix/zabbix_server.conf\n12074:20250225:145333.545 current database version (mandatory/optional): 07020000/07020000\n12074:20250225:145333.545 required mandatory version: 07020000\n12075:20250225:145333.557 starting HA manager\n12075:20250225:145333.566 HA manager started in active mode\n12074:20250225:145333.567 server #0 started [main process]\n12076:20250225:145333.567 server #1 started [service manager #1]\n12077:20250225:145333.567 server #2 started [configuration syncer #1]\n12078:20250225:145333.718 server #3 started [alert manager #1]\n12079:20250225:145333.719 server #4 started [alerter #1]\n12080:20250225:145333.719 server #5 started [alerter #2]\n12081:20250225:145333.719 server #6 started [alerter #3]\n12082:20250225:145333.719 server #7 started [preprocessing manager #1]\n12083:20250225:145333.719 server #8 started [lld manager #1]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <pre><code>12068:20250225:145309.018 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12068:20250225:145309.018 ****** Enabled features ******\n12068:20250225:145309.018 SNMP monitoring:           YES\n12068:20250225:145309.018 IPMI monitoring:           YES\n12068:20250225:145309.018 Web monitoring:            YES\n12068:20250225:145309.018 VMware monitoring:         YES\n12068:20250225:145309.018 SMTP authentication:       YES\n12068:20250225:145309.018 ODBC:                      YES\n12068:20250225:145309.018 SSH support:               YES\n12068:20250225:145309.018 IPv6 support:              YES\n12068:20250225:145309.018 TLS support:               YES\n12068:20250225:145309.018 ******************************\n12068:20250225:145309.018 using configuration file: /etc/zabbix/zabbix_server.conf\n12068:20250225:145309.027 [Z3005] query failed: [1146] Table 'zabbix.users' doesn't exist [select userid from users limit 1]\n12068:20250225:145309.027 cannot use database \"zabbix\": database is not a Zabbix database\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <pre><code># systemctl status zabbix-server\n\u25cf zabbix-server.service - Zabbix Server\n     Loaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\n     Active: active (running) since Tue 2025-02-25 14:53:33 CET; 26min ago\n   Main PID: 12074 (zabbix_server)\n      Tasks: 77 (limit: 24744)\n     Memory: 71.5M\n        CPU: 18.535s\n     CGroup: /system.slice/zabbix-server.service\n             \u251c\u250012074 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n             \u251c\u250012075 \"/usr/sbin/zabbix_server: ha manager\"\n             \u251c\u250012076 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.027667 sec during 5.042628 sec]\"\n             \u251c\u250012077 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.051345 sec, idle 10 sec]\"\n             \u251c\u250012078 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.030391 sec during 5.031944 sec]\"\n             \u251c\u250012079 \"/usr/sbin/zabbix_server: alerter #1 started\"\n             \u251c\u250012080 \"/usr/sbin/zabbix_server: alerter #2 started\"\n             \u251c\u250012081 \"/usr/sbin/zabbix_server: alerter #3 started\"\n             \u251c\u250012082 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 0, processed 0 values, idle 5.023818 sec during 5.024830 sec]\"\n             \u251c\u250012083 \"/usr/sbin/zabbix_server: lld manager #1 [processed 0 LLD rules, idle 5.017278sec during 5.017574 sec]\"\n             \u251c\u250012084 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 21.031209 sec during 21.063879 sec]\"\n             \u251c\u250012085 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 43.195541 sec during 43.227934 sec]\"\n             \u251c\u250012086 \"/usr/sbin/zabbix_server: housekeeper [startup idle for 30 minutes]\"\n             \u251c\u250012087 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.017595 sec, idle 59 sec]\"\n             \u251c\u250012088 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000071 sec, idle 5 sec]\"\n             \u251c\u250012089 \"/usr/sbin/zabbix_server: browser poller #1 [got 0 values in 0.000066 sec, idle 5 sec]\"\n             \u251c\u250012090 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0 unsaved checks]\"\n             \u251c\u250012091 \"/usr/sbin/zabbix_server: history syncer #1 [processed 4 values, 3 triggers in 0.027382 sec, idle 1 sec]\"\n             \u251c\u250012092 \"/usr/sbin/zabbix_server: history syncer #2 [processed 0 values, 0 triggers in 0.000077 sec, idle 1 sec]\"\n             \u251c\u250012093 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000076 sec, idle 1 sec]\"\n             \u251c\u250012094 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000020 sec, idle 1 sec]\"\n             \u251c\u250012095 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.011627 sec, idle 3 sec]\"\n             \u251c\u250012096 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000081 sec, idle 5 sec]\"\n             \u251c\u250012097 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000068 sec, idle 1 sec]\"\n</code></pre> <p>This concludes our chapter on installing and configuring the Zabbix server with PostgreSQL.</p>"},{"location":"ch01-zabbix-components/basic-installation/#installing-the-frontend","title":"Installing the frontend","text":"<p>Before configuring the front-end, you need to install the necessary packages. If the Zabbix front-end is hosted on the same server as the Zabbix server, you can install the packages on the same server as is in our case. It's also perfectly possible to install the front-end on another server. In that case you only need to specify the  correct IP addresses and open the correct firewall ports.</p>"},{"location":"ch01-zabbix-components/basic-installation/#installing-the-frontend-with-nginx","title":"Installing the frontend with NGINX","text":"<p>RedHat </p> <pre><code># dnf install zabbix-nginx-conf zabbix-web-mysql -y\nor if you used PostgreSQL\n# dnf install zabbix-nginx-conf zabbix-web-pgsql -y\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt install zabbix-frontend-php php8.3-mysql zabbix-nginx-conf\nor if you use PostgreSQL\n# sudo apt install zabbix-frontend-php php8.3-pgsql zabbix-nginx-conf\n</code></pre> <p>This command will install the front-end packages along with the required dependencies for Nginx. If you are installing the front-end on a different server, make sure to execute this command on that specific machine.</p> <p>If you don't remember how to add the repository, have a look at the topic Adding the zabbix repository</p> <p>First thing we have to do is alter the Nginx configuration file so that we don't use the standard config.</p> <p>RedHat</p> <pre><code># vi /etc/nginx/nginx.conf\n</code></pre> <p>In this configuration file look for the following block that starts with :</p> <pre><code>   server {\n        listen       80;\n        listen       [::]:80;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n</code></pre> <p>Then, comment out the following server block within the configuration file:</p> <pre><code>    server {\n#        listen       80;\n#        listen       [::]:80;\n#        server_name  _;\n#        root         /usr/share/nginx/html;\n</code></pre> <p>The Zabbix configuration file must now be modified to reflect the current environment. Open the following file for editing:</p> <pre><code>vi /etc/nginx/conf.d/zabbix.conf\n</code></pre> <p>And alter the following lines:</p> <pre><code>server {\n        listen          8080;\n        server_name     example.com;\n\n        root    /usr/share/zabbix;\n\n        index   index.php;\n</code></pre> <p>Replace the first 2 lines with the correct port and domain for your front-end in case you don't have a domain you can replace <code>servername</code> with <code>_;</code> like in the example below:</p> <pre><code>server {\n#        listen          8080;\n#        server_name     example.com;\n        listen          80;\n        server_name     _;\n\n        root    /usr/share/zabbix;\n\n        index   index.php;\n</code></pre> <p>The web server and PHP-FPM service are now ready for activation and persistent startup. Execute the following commands to enable and start them immediately:</p> <p>Ubuntu</p> <pre><code># sudo vi /etc/zabbix/nginx.conf\n</code></pre> <p>replace the Following lines:</p> <pre><code>server {\n#        listen          8080;\n#        server_name     example.com;\n</code></pre> <p>with :</p> <pre><code>server {\n        listen          80;\n        server_name     xxx.xxx.xxx.xxx;\n\n</code></pre> <p>where xxx.xxx.xxx.xxx is your IP or DNS name.</p> <p>RedHat</p> <pre><code>systemctl enable php-fpm --now\nsystemctl enable nginx --now\n</code></pre> <p>Ubuntu</p> <pre><code>sudo systemctl enable nginx php8.3-fpm\nsudo systemctl restart nginx php8.3-fpm\n</code></pre> <p>Let's verify if the service is properly started and enabled so that it survives our reboot next time.</p> <p>RedHat and Ubuntu</p> <pre><code># systemctl status nginx\n\n\u25cf nginx.service - The nginx HTTP and reverse proxy server\n     Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; preset: disabled)\n    Drop-In: /usr/lib/systemd/system/nginx.service.d\n             \u2514\u2500php-fpm.conf\n     Active: active (running) since Mon 2023-11-20 11:42:18 CET; 30min ago\n   Main PID: 1206 (nginx)\n      Tasks: 2 (limit: 12344)\n     Memory: 4.8M\n        CPU: 38ms\n     CGroup: /system.slice/nginx.service\n             \u251c\u25001206 \"nginx: master process /usr/sbin/nginx\"\n             \u2514\u25001207 \"nginx: worker process\"\n\nNov 20 11:42:18 zabbix-srv systemd[1]: Starting The nginx HTTP and reverse proxy server...\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: configuration file /etc/nginx/nginx.conf test is successful\nNov 20 11:42:18 zabbix-srv systemd[1]: Started The nginx HTTP and reverse proxy server.\n\n</code></pre> <p>With the service operational and configured for automatic startup, the final preparatory step involves adjusting the firewall to permit inbound HTTP traffic. Execute the following commands:</p> <p>RedHat</p> <pre><code>firewall-cmd --add-service=http --permanent\nfirewall-cmd --reload\n</code></pre> <p>Ubuntu</p> <pre><code># sudo ufw allow 80/tcp\n</code></pre> <p>Open your browser and go to the url or ip of your front-end :</p> <pre><code>http://&lt;ip or dns of the zabbix frontend server&gt;/\n</code></pre> <p>If all goes well you should be greeted with a Zabbix welcome page. In case you have an error check the configuration again or have a look at the nginx log file :</p> <pre><code>/var/log/nginx/error.log\n</code></pre> <p>or run the following command :</p> <pre><code>journalctl -xe\n</code></pre> <p>This should help you in locating the errors you made.</p> <p>Upon accessing the appropriate URL, a page resembling the one illustrated below should appear:</p> <p></p> <p>The Zabbix frontend presents a limited array of available localizations, as shown.</p> <p></p> <p>What if we want to install Chinese as language or another language from the list? Run the next command to get a list of all locales available for your OS.</p> <p>RedHat</p> <pre><code>dnf list glibc-langpack-*\n</code></pre> <p>Ubuntu</p> <pre><code>apt-cache search language-pack\n</code></pre> <p>This will give you on Redhat based systems a list like:</p> <pre><code>Installed Packages\nglibc-langpack-en.x86_64\nAvailable Packages\nglibc-langpack-aa.x86_64\n...\n\nglibc-langpack-zu.x86_64\n\n\nOn Ubuntu it will look like \nlanguage-pack-kab - translation updates for language Kabyle\nlanguage-pack-kab-base - translations for language Kabyle\nlanguage-pack-kn - translation updates for language Kannada\nlanguage-pack-kn-base - translations for language Kannada\n...\n\nlanguage-pack-ko - translation updates for language Korean\nlanguage-pack-ko-base - translations for language Korean\nlanguage-pack-ku - translation updates for language Kurdish\nlanguage-pack-ku-base - translations for language Kurdish\nlanguage-pack-lt - translation updates for language Lithuanian\n</code></pre> <p>Let's search for our Chinese locale to see if it is available. As you can see the code starts with zh.</p> <p>RedHat</p> <pre><code># dnf list glibc-langpack-* | grep zh\n\nglibc-langpack-zh.x86_64\nglibc-langpack-lzh.x86_64\n</code></pre> <p>Ubuntu</p> <pre><code>apt-cache search language-pack | grep -i zh\n</code></pre> <p>The command outputs two lines; however, given the identified language code, 'zh_CN,' only the first package requires installation.</p> <p>RedHat</p> <pre><code># dnf install glibc-langpack-zh.x86_64 -y\n</code></pre> <p>Ubuntu</p> <pre><code># sudo apt install language-pack-zh-hans\n# sudo systemctl restart nginx php8.3-fpm\n</code></pre> <p>When we return now to our front-end we are able to select the Chinese language, after a reload of our browser.</p> <p></p> Note <p>If your preferred language is not available in the Zabbix front-end, don't worry it simply means that the translation is either incomplete or not yet available. Zabbix is an open-source project that relies on community contributions for translations, so you can help improve it by contributing your own translations.</p> <p>Visit the translation page at https://translate.zabbix.com/ to assist with the translation efforts. Once your translation is complete and reviewed, it will be included in the next minor patch version of Zabbix. Your contributions help make Zabbix more accessible and improve the overall user experience for everyone.</p> <p>When you're satisfied with the available translations, click <code>Next</code>. You will  then be taken to a screen to verify that all prerequisites are satisfied. If any prerequisites are not fulfilled, address those issues first. However, if everything is in order, you should be able to proceed by clicking <code>Next</code>.</p> <p></p> <p>On the next page, you'll configure the database connection parameters:</p> <ol> <li><code>Select the Database Type</code>: Choose either MySQL or PostgreSQL depending on your setup.</li> <li><code>Enter the Database Host</code>: Provide the IP address or DNS name of your database    server. Use port 3306 for MariaDB/MySQL or 5432 for PostgreSQL.</li> <li><code>Enter the Database Name</code>: Specify the name of your database. In our case, it    is zabbix. If you are using PostgreSQL, you will also need to provide the schema    name, which is zabbix_server in our case.</li> <li><code>Enter the Database User</code>: Input the database user created for the web front-end,    such as zabbix-web. Enter the corresponding password for this user.</li> </ol> <p>Ensure that the <code>Database TLS encryption</code> option is not selected, and then click <code>Next step</code> to proceed.</p> <p></p> <p>You're almost finished with the setup! The final steps involve:</p> <ol> <li><code>Assigning an Instance Name</code>: Choose a descriptive name for your Zabbix instance.</li> <li><code>Selecting the Timezone</code>: Choose the timezone that matches your location or your preferred time zone for the Zabbix interface.</li> <li><code>Setting the Default Time Format</code>: Select the default time format you prefer to use.</li> </ol> <p>Once these settings are configured, you can complete the setup and proceed with any final configuration steps as needed.</p> Note <p>It's a good practice to set your Zabbix server to the UTC timezone, especially when managing systems across multiple timezones. Using UTC helps ensure consistency in time-sensitive actions and events, as the server\u2019s timezone is often used for calculating and displaying time-related information.</p> <p></p> <p>After clicking <code>Next step</code> again, you'll be taken to a page confirming that the configuration was successful. Click <code>Finish</code> to complete the setup process.</p> <p></p> <p>We are now ready to login :</p> <p></p> <p>Login : Admin Password : zabbix</p> <p>This concludes our topic on setting up the Zabbix server. If you're interested in securing your front-end, I recommend checking out the topic Securing Zabbix for additional guidance and best practices.</p> Note <p>If you are not able to safe your configuration at the end make sure SeLinux is disabled. It is possible that it will block access to certain files or even the database.</p>"},{"location":"ch01-zabbix-components/basic-installation/#conclusion","title":"Conclusion","text":"<p>With this, we conclude our journey through setting up Zabbix and configuring it with MySQL or PostgreSQL on RHEL-based systems and Ubuntu. We have walked through the essential steps of preparing the environment, installing the necessary components, and ensuring a fully functional Zabbix server. From database selection to web frontend configuration with Nginx, each decision has been aimed at creating a robust and efficient monitoring solution.</p> <p>At this stage, your Zabbix instance is operational, providing the foundation for advanced monitoring and alerting. In the upcoming chapters, we will delve into fine-tuning Zabbix, optimizing performance, and exploring key features that transform it into a powerful observability platform.</p> <p>Now that your Zabbix environment is up and running, let\u2019s take it to the next level.</p>"},{"location":"ch01-zabbix-components/basic-installation/#questions","title":"Questions","text":"<ol> <li>Should I choose MySQL or PostgreSQL as the database back-end? Why?</li> <li>What version of Zabbix should I install for compatibility and stability?</li> <li>What port does my DB use ?</li> <li>What Zabbix logs should I check for troubleshooting common issues?</li> </ol>"},{"location":"ch01-zabbix-components/basic-installation/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.zabbix.com/download</li> <li>https://www.zabbix.com/documentation/current/en/manual</li> <li>https://www.zabbix.com/documentation/current/en/manual/installation/requirements</li> <li>https://www.zabbix.com/documentation/current/en/manual/installation/install_from_packages</li> </ul>"},{"location":"ch01-zabbix-components/chapter/","title":"Zabbix components, basic functions and installation","text":"<p>In this chapter, we expand on the foundational knowledge from the \"Getting Started\" section to provide a comprehensive guide for both beginners who are installing Zabbix for the first time and advanced users who seek to optimize their setup. We\u2019ll not only cover the essential steps for a basic installation but also delve into the finer details of Zabbix architecture, components, and best practices.</p> <p>We\u2019ll start by walking through the installation process, ensuring you have a solid foundation to build on. From there, we'll move into the core components of Zabbix, what each one does, how they interact, and why they are crucial to your monitoring solution. You'll learn about subprocesses, their roles, and how they contribute to Zabbix efficiency and reliability.</p> <p>Additionally, we\u2019ll explore good architectural choices that can make or break your monitoring setup. Whether you're managing a small network or a large-scale infrastructure, making the right design decisions early on will pay dividends in scalability, performance, and maintenance.</p> <p>This chapter is designed to cater to a wide range of readers. If you're simply looking to get Zabbix up and running, you'll find clear, step-by-step instructions. For those wanting to dive deeper, we'll provide detailed insights into how Zabbix functions under the hood, helping you make informed choices that align with your needs and future growth plans.</p> <p>By the end of this chapter, you will have not only a working Zabbix installation but also a thorough understanding of its components and architecture, empowering you to leverage Zabbix to its fullest potential, regardless of the complexity of your environment.</p> <p>Let\u2019s embark on this detailed journey into Zabbix and equip ourselves with the knowledge to both start and optimize a powerful monitoring solution.</p>"},{"location":"ch01-zabbix-components/ha-setup/","title":"HA Setup","text":"<p>In this section, we will set up Zabbix in a High Availability (HA) configuration. This feature, introduced in Zabbix 6, is a crucial enhancement that ensures continued monitoring even if a Zabbix server fails. With HA, when one Zabbix server goes down, another can take over seamlessly.</p> <p>For this guide, we will use two Zabbix servers and one database, but the setup allows for adding more zabbix servers if necessary.</p> <p></p> <p>It's important to note that Zabbix HA setup is straightforward, providing redundancy without complex features like load balancing.</p> <p>Just as in our basic configuration, we will document key details for the servers in this HA setup. Below is the list of servers and some place to add their respective IP addresses for your convenience :</p> Server IP Address Zabbix Server 1 Zabbix Server 2 Database Virtual IP Note <p>Our database (DB) in this setup is not configured for HA. Since it's not a Zabbix component, you will need to implement your own solution for database HA, such as a HA SAN or a database cluster setup. A DB cluster configuration is out of the scope of this guide and unrelated to Zabbix, so it will not be covered here.</p>"},{"location":"ch01-zabbix-components/ha-setup/#installing-the-database","title":"Installing the Database","text":"<p>Refer to the Basic Installation chapter for detailed instructions on setting up the database. That chapter provides step-by-step guidance on installing either a PostgreSQL or MariaDB database on a dedicated node running Ubuntu or Rocky Linux. The same installation steps apply when configuring the database for this setup.</p>"},{"location":"ch01-zabbix-components/ha-setup/#installing-the-zabbix-cluster","title":"Installing the Zabbix cluster","text":"<p>Setting up a Zabbix cluster involves configuring multiple Zabbix servers to work together, providing high availability. While the process is similar to setting up a single Zabbix server, there are additional configuration steps required to enable HA (High Availability).</p> <p>Add the Zabbix Repositories to your servers.</p> <p>First, add the Zabbix repository to both of your Zabbix servers:</p> <p>Redhat</p> <pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\n# dnf clean all\n</code></pre> <p>Ubuntu</p> <pre><code># wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\n# apt update\n</code></pre> <p>Once this is done we can install the zabbix server packages.</p> <p>Redhat</p> <pre><code># dnf install zabbix-server-pgsql -y\nor if your database is MariaDB\n# dnf install zabbix-server-mysql -y\n</code></pre> <p>Ubuntu</p> <pre><code># apt install zabbix-server-pgsql -y\nor if your databqse is MariaDB\n# apt install zabbix-server-mysql -y\n</code></pre>"},{"location":"ch01-zabbix-components/ha-setup/#configuring-zabbix-server-1","title":"Configuring Zabbix Server 1","text":"<p>Edit the Zabbix server configuration file,</p> <pre><code># vi /etc/zabbix/zabbix_server.conf\n</code></pre> <p>Update the following lines to connect to the database:</p> <pre><code>DBHost=&lt;zabbix db ip&gt;\nDBName=&lt;name of the zabbix DB&gt;\nDBUser=&lt;name of the db user&gt;\nDBSchema=&lt;db schema for the PostgreSQL DB&gt;\nDBPassword=&lt;your secret password&gt;\n</code></pre> <p>Configure the HA parameters for this server:</p> <pre><code>HANodeName=zabbix1 (or choose a name you prefer)\n</code></pre> <p>Specify the frontend node address for failover scenarios:</p> <pre><code>NodeAddress=&lt;Zabbix server 1 ip&gt;:10051\n</code></pre>"},{"location":"ch01-zabbix-components/ha-setup/#configuring-zabbix-server-2","title":"Configuring Zabbix Server 2","text":"<p>Repeat the configuration steps for the second Zabbix server. Adjust the <code>HANodeName</code> and <code>NodeAddress</code> as necessary for this server.</p>"},{"location":"ch01-zabbix-components/ha-setup/#starting-zabbix-server","title":"Starting Zabbix Server","text":"<p>After configuring both servers, enable and start the zabbix-server service on each:</p> <pre><code># systemctl enable zabbix-server --now\n</code></pre>"},{"location":"ch01-zabbix-components/ha-setup/#verifying-the-configuration","title":"Verifying the Configuration","text":"<p>Check the log files on both servers to ensure they have started correctly and are operating in their respective HA modes.</p> <p>On the first server:</p> <pre><code># grep HA /var/log/zabbix/zabbix_server.log\n</code></pre> <p>You should see:</p> <pre><code>22597:20240309:155230.353 starting HA manager\n22597:20240309:155230.362 HA manager started in active mode\n</code></pre> <p>On the second server (and any additional nodes):</p> <pre><code># grep HA /var/log/zabbix/zabbix_server.log\n</code></pre> <p>You should see:</p> <pre><code>22304:20240309:155331.163 starting HA manager\n22304:20240309:155331.174 HA manager started in standby mode\n</code></pre> <p>Your Zabbix cluster should now be set up with high availability, ensuring continuous monitoring even if one of the servers fails.</p>"},{"location":"ch01-zabbix-components/ha-setup/#installing-the-frontend","title":"Installing the frontend","text":"<p>Todo</p>"},{"location":"ch01-zabbix-components/securing-zabbix/","title":"Security","text":""},{"location":"ch02-zabbix-installation/chapter/","title":"Getting started with the Zabbix installation","text":"<p>We begin this chapter with a deep dive into the Zabbix frontend, the central hub where all monitoring and configuration tasks come together. Alongside the basic introduction to navigating the frontend, this chapter also covers user and group setup, focusing on creating a secure and efficient user management system.</p> <p>We'll walk through setting up internal authentication with best practices for security, including dual-factor authentication. For those needing advanced integration, we'll explore options like SAML, LDAP, and other external authentication methods.</p> <p>This chapter strikes a balance between a straightforward overview \u201cthis is the frontend\u201d and a more in depth look at the advanced choices you can make to enhance your system's security and manageability. Whether you're just getting started or looking to implement robust security measures, there's something here for everyone.</p> <p>By the end, you'll be well equipped to navigate the Zabbix frontend with confidence and set up a secure, scalable user management system tailored to your organization's needs.</p>"},{"location":"ch02-zabbix-installation/external-authentication/","title":"External authentication","text":""},{"location":"ch02-zabbix-installation/external-authentication/#http","title":"HTTP","text":""},{"location":"ch02-zabbix-installation/external-authentication/#ldap-ad","title":"LDAP / AD","text":""},{"location":"ch02-zabbix-installation/external-authentication/#saml","title":"SAML","text":""},{"location":"ch02-zabbix-installation/external-authentication/#google","title":"Google","text":""},{"location":"ch02-zabbix-installation/external-authentication/#ms-cloud","title":"MS Cloud","text":""},{"location":"ch02-zabbix-installation/external-authentication/#okta","title":"Okta","text":""},{"location":"ch02-zabbix-installation/frontend/","title":"Frontend explained","text":""},{"location":"ch02-zabbix-installation/host-groups/","title":"Host groups","text":""},{"location":"ch02-zabbix-installation/user-groups/","title":"User groups","text":""},{"location":"ch03-zabbix-proxies/active-proxies/","title":"Active proxies","text":""},{"location":"ch03-zabbix-proxies/chapter/","title":"Proxies and the Web services component","text":"<p>Proxies are often regarded as an advanced topic in Zabbix, but in reality, they are a fundamental part of many installations and one of the first components we set up for numerous customers. In this chapter, we'll make proxies the third subject we cover, encouraging you to consider them from the very beginning of your Zabbix journey.</p> <p>We'll start with a basic proxy setup, providing straightforward steps to get you up and running quickly. Then, we'll take a deep dive into the mechanics of proxies how they operate within the Zabbix ecosystem, their benefits, and the critical role they play in distributing monitoring load and enhancing system scalability.</p> <p>Understanding proxies from the start can significantly improve your architecture, especially in distributed or large scale environments. Whether you're new to Zabbix or looking to refine your existing setup, this chapter will offer valuable insights into why proxies should be an integral part of your monitoring strategy from the start.</p> <p>By the end, you'll not only know how to set up a basic proxy but also have a clear understanding of their underlying workings and strategic advantages, ensuring you make informed decisions as you scale your Zabbix installation.</p>"},{"location":"ch03-zabbix-proxies/passive-proxies/","title":"Passive Proxies","text":""},{"location":"ch03-zabbix-proxies/web-services/","title":"Web services","text":""},{"location":"ch04-zabbix-collecting-data/chapter/","title":"Collecting data with your Zabbix environment","text":"<p>In this chapter, we'll take a detailed journey through Zabbix data flow, showing how to progress from an empty setup to a fully functioning system capable of sending timely notifications. We\u2019ll break down each step, giving you a clear understanding of how data moves through Zabbix.</p> <p>We'll then explore the various protocols used in Zabbix, how they function, their compatibility with different components, and how to configure them effectively. This will provide you with a comprehensive overview of the communication backbone that powers Zabbix monitoring capabilities.</p> <p>Next, we'll cover the essentials like hosts, host groups, host interfaces, and items, ensuring you understand their roles and how to set them up correctly. </p> <p>For now, we'll hold off on custom scripts and external check items, focusing instead on the core elements. When we touch on active agents, we'll reference the chapter on auto-registration, guiding you to more detailed discussions on that topic later.</p> <p>By the end of this chapter, you'll have a strong grasp of Zabbix data flow and the protocols that enable seamless monitoring and notifications, preparing you for more advanced configurations and integrations.</p>"},{"location":"ch04-zabbix-collecting-data/dataflow/","title":"Dataflow","text":""},{"location":"ch04-zabbix-collecting-data/hosts/","title":"Hosts","text":""},{"location":"ch04-zabbix-collecting-data/hosts/#host-interfaces","title":"Host Interfaces","text":""},{"location":"ch04-zabbix-collecting-data/hosts/#zbx","title":"ZBX","text":""},{"location":"ch04-zabbix-collecting-data/hosts/#snmp","title":"SNMP","text":""},{"location":"ch04-zabbix-collecting-data/hosts/#ipmi","title":"IPMI","text":""},{"location":"ch04-zabbix-collecting-data/hosts/#jmx","title":"JMX","text":""},{"location":"ch04-zabbix-collecting-data/protocols/","title":"Protocols","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#zabbix-agent","title":"Zabbix Agent","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#zabbix-agent-active","title":"Zabbix Agent (Active)","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#simple-check","title":"Simple check","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#snmp-agent","title":"SNMP Agent","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#snmp-trap","title":"SNMP trap","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#zabbix-internal","title":"Zabbix Internal","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#zabbix-trapper","title":"Zabbix trapper","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#external-check","title":"External check","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#database-monitor","title":"Database monitor","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#http-agent","title":"HTTP Agent","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#ipmi-agent","title":"IPMI Agent","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#ssh-telnet-agent","title":"SSH / Telnet Agent","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#jmx-agent","title":"JMX Agent","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#calculated","title":"Calculated","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#dependent-item","title":"Dependent item","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#script","title":"Script","text":""},{"location":"ch04-zabbix-collecting-data/protocols/#browser","title":"Browser","text":""},{"location":"ch05-zabbix-triggers/advanced-triggers/","title":"Advanced triggers","text":""},{"location":"ch05-zabbix-triggers/chapter/","title":"Setting up triggers","text":"<p>In this chapter, we'll explore triggers in depth, starting with the basics of setting up step triggers and progressively moving into advanced trigger configurations. You'll gain a thorough understanding of how triggers work, ensuring you can leverage them effectively to monitor your infrastructure.</p> <p>We'll take a deep dive into the mechanics of triggers, examining how they evaluate conditions and generate alerts. This section will also address the important topic of monitoring and alerting fatigue, providing strategies to fine-tune your triggers to reduce unnecessary alerts while maintaining optimal system oversight.</p> <p>By the end, you'll have the knowledge to set up both simple and complex triggers, helping you maintain a well balanced monitoring system that minimizes noise and focuses on what truly matters.</p>"},{"location":"ch05-zabbix-triggers/triggers/","title":"Triggers","text":""},{"location":"ch06-zabbix-templates/chapter/","title":"Building and using templates","text":"<p>A great way to guide users towards a deeper understanding of Zabbix is by initially holding off on templates and gradually introducing them much like in formal training. In this chapter, we'll start by explaining the basic usage of default templates and how to find new ones, helping you get up and running with minimal effort.</p> <p>Once you're comfortable with default templates, we\u2019ll dive into building your own templates, offering detailed instructions on customization and best practices. We\u2019ll also cover how to share your templates within the Zabbix community, fostering collaboration and knowledge exchange.</p> <p>To round off, we'll feature Tags and Macros, explaining their roles within templates and why they're most effective when understood in the context of template usage. This structured approach will ensure you grasp the full potential of templates and their associated features in Zabbix.</p> <p>By the end of this chapter, you'll be well versed in both using and creating templates, equipped to enhance your monitoring setup and contribute to the broader Zabbix ecosystem.</p>"},{"location":"ch07-zabbix-alerts/chapter/","title":"Sending out alerts with Zabbix","text":"<p>After delving into templates, it's time to return to the data flow and bring everything together by exploring integrations with powerful external services. In this chapter, we\u2019ll complete the data flow journey, showing how to extend Zabbix capabilities through seamless connections with third-party tools and platforms.</p> <p>We'll guide you through setting up integrations that enhance your monitoring system, covering various use cases from alerting to data visualization and automation. By integrating Zabbix with external services, you'll unlock new levels of functionality, making your monitoring setup more dynamic and adaptable.</p> <p>By the end, you'll have a well-rounded understanding of how to fully utilize Zabbix data flow, augmented by strategic integrations that add value to your infrastructure management.</p>"},{"location":"ch08-zabbix-lld/chapter/","title":"Using Low level discovery to automate","text":"<p>In this chapter, we'll dive into Low-Level Discovery (LLD), covering everything there is to know about this powerful feature in Zabbix. LLD automates the creation of hosts, items, triggers, and more, simplifying the management of large and dynamic environments.</p> <p>We'll also explain how to work with custom JSON in the context of LLD, showing you how to tailor discovery rules to fit your unique needs. By mastering these techniques, you'll be able to create highly adaptable monitoring setups that respond to changes in your infrastructure with minimal manual intervention.</p> <p>By the end of this chapter, you'll have a deep understanding of LLD, from basic concepts to advanced customization, enabling you to leverage its full potential in your Zabbix deployment.</p>"},{"location":"ch09-zabbix-extending/chapter/","title":"Leveraging custom items for extending the Zabbix environment","text":"<p>In this chapter, we'll take a deep dive into extending Zabbix functionality beyond its default item options. We'll cover the script item, external checks, remote commands, user parameters, and other advanced features that allow you to customize and expand your monitoring capabilities.</p> <p>You'll learn how to use these tools to integrate custom logic, monitor external applications, and automate tasks, making Zabbix an even more powerful and flexible solution tailored to your specific needs. </p> <p>By the end, you'll have the skills to push Zabbix beyond its default configuration, unlocking new possibilities for complex and unique monitoring scenarios.</p>"},{"location":"ch10-zabbix-discovery/chapter/","title":"Automating Your Monitoring with Auto Discovery and Active Agent Auto Registration","text":"<p>In this chapter, we'll explore two powerful automation features in Zabbix: auto discovery and active agent auto-registration. These tools are essential for scaling your monitoring efforts by minimizing manual configuration and ensuring new devices and services are seamlessly integrated into your Zabbix environment.</p> <p>We'll begin with auto discovery, which enables Zabbix to automatically detect and monitor new hosts and services within your network. You'll learn how to configure discovery rules, actions, and conditions to automate the onboarding process, making your monitoring more dynamic and adaptive to changes in your infrastructure.</p> <p>Next, we'll dive into active agent auto registration, which simplifies the management of Zabbix agents, especially in large or rapidly changing environments. We'll cover how to set up auto-registration rules that allow agents to register themselves with the Zabbix server, reducing administrative overhead and ensuring all relevant data is captured efficiently.</p> <p>By the end of this chapter, you'll have a thorough understanding of how to leverage auto-discovery and auto-registration to create a more automated, scalable, and efficient monitoring system.</p>"},{"location":"ch11-zabbix-visualisation/chapter/","title":"Graphs, Dashboards, Reports, Maps and other visualisation","text":"<p>In this chapter, we delve into the heart of Zabbix's visualization capabilities, where data comes to life through intuitive and powerful visual tools. From dynamic graphs that track your system's performance to comprehensive dashboards that provide at-a-glance insights, Zabbix offers a rich set of visualization features to help you understand and manage your infrastructure.</p> <p>We'll start by exploring graphs, which allow you to monitor metrics over time, helping you spot trends and anomalies with ease. Next, we'll move on to dashboards, where you can aggregate multiple widgets into a single view for a more holistic understanding of your network's health.</p> <p>Then, we'll discuss reports an essential feature for summarizing and sharing insights with your team or stakeholders. Finally, we'll cover maps, a unique visualization tool that lets you create interactive representations of your network topology, making it easier to pinpoint issues and understand relationships between different components.</p> <p>By the end of this chapter, you'll have a comprehensive understanding of how to leverage Zabbix's visualization tools to monitor, analyse, and communicate the state of your IT environment effectively.  Whether you're a seasoned administrator or just starting with Zabbix, mastering these visual tools will enhance your ability to manage complex infrastructures and ensure optimal performance.</p> <p>Let's dive into the world of Zabbix visualizations and unlock the full potential of your monitoring setup.</p>"},{"location":"ch12-zabbix-api/chapter/","title":"Zabbix API","text":"<p>The Zabbix API is a crucial part for anyone looking to expand the capabilities of their Zabbix environment, automate time-consuming tasks and get information for usage in other systems. In this chapter we will go over various of these capabilities to expand our knowledge of the Zabbix API.</p>"},{"location":"ch13-zabbix-real-world-examples/chapter/","title":"Zabbix real world examples","text":"<p>In this book we have learned a lot about our Zabbix environment, but most of it is building the foundation to start doing it on your own. From time to time you will encounter an implementation in a Zabbix environment that uses out of the box thinking or is just so simple you can't believe you never thought of it.</p> <p>This chapter aims to provide you a collection of interesting things people have built and things you absolutely have to know exist. </p>"}]}